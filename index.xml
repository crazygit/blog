<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Soul Mate</title><link>https://crazygit.wiseturtles.com/</link><description>Recent content on Soul Mate</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 21 Jun 2021 10:11:29 +0800</lastBuildDate><atom:link href="https://crazygit.wiseturtles.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Kotlin基本语法05</title><link>https://crazygit.wiseturtles.com/2021/06/21/008-kotlin-basic-synatx-05/</link><pubDate>Mon, 21 Jun 2021 10:11:29 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2021/06/21/008-kotlin-basic-synatx-05/</guid><description>&lt;h3 id="heading">&lt;/h3>
&lt;h3 id="类委托和委托属性httpskotlinlangorgdocsreferencedelegated-propertieshtml">&lt;a href="https://kotlinlang.org/docs/reference/delegated-properties.html">类委托和委托属性&lt;/a>&lt;/h3>
&lt;p>委托是一种设计模式，它的基本理念是:操作对象自己不会去处理某段逻辑，而是会把工作委托给另外一个辅助对象去处理。&lt;/p>
&lt;h3 id="类委托">类委托&lt;/h3>
&lt;p>类委托的核心思想在于将一个类的具体实现委托给另外一个类是去完成。Kotlin中委托使用的关键字是&lt;code>by&lt;/code>,我们只需要在接口声明的后面使用&lt;code>by&lt;/code>关键字，再接上接受委托的辅助对象，就可以了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">MySet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">helperSet&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">HashSet&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">helperSet&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">helloWorld&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">isEmpty&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">Boolean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">helperSet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isEmpty&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面就创建了&lt;code>MySet&lt;/code>类就是通过委托对象&lt;code>helperSet&lt;/code>实现了接口&lt;code>Set&lt;/code>里的所有方法，
我们只需要根据自己的需要，重写&lt;code>helperSet&lt;/code>里的方法就可以了，剩余的其它方法又&lt;code>helperSet&lt;/code>自身实现。&lt;/p>
&lt;p>使用类委托的例子&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">interface&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">BaseImpl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">b&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">BaseImpl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Derived&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">print&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 10
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>覆写类委托里的方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">interface&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">printMessage&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">printMessageLine&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">BaseImpl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">printMessage&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">printMessageLine&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">printMessage&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;abc&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">BaseImpl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Derived&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">printMessage&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// abc
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Derived&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">printMessageLine&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 10
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>属性是不会被覆写的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">interface&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">message&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">BaseImpl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">message&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;BaseImpl: x = &lt;/span>&lt;span class="si">$x&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// This property is not accessed from b&amp;#39;s implementation of `print`
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">message&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Message of Derived&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">BaseImpl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">derived&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Derived&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 这里输出的仍然是代理类的message变量
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">derived&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">print&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// BaseImpl: x = 10
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 自身的属性只能通过自己的对象来方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">derived&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Message of Derived
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="委托属性">委托属性&lt;/h3>
&lt;p>委托属性的核心思想是将一个属性(字段)的具体实现委托给另一个类去完成。委托属性的语法结构如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">var&lt;/span> &lt;span class="py">p&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">Delegate&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里使用&lt;code>by&lt;/code>关键字连接了左边的&lt;code>p&lt;/code>属性和右边的&lt;code>Delegate&lt;/code>实例，代表着将&lt;code>p&lt;/code>属性的具体实现委托给了&lt;code>Delegate&lt;/code>类去完成。到调用p属性的时候会自动调用&lt;code>Delegate&lt;/code>类的&lt;code>getValue()&lt;/code>方法，当给&lt;code>p&lt;/code>属性赋值的时候会自动调用&lt;code>Delegate&lt;/code>类的&lt;code>setValue()&lt;/code>方法。&lt;/p>
&lt;p>因此，我们还必须对&lt;code>Delegate&lt;/code>类进行实现才可以，具体代码如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Delegate&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">propValue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">null&lt;/span>
&lt;span class="k">operator&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">getValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myClass&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">property&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">KProperty&lt;/span>&lt;span class="p">&amp;lt;*&amp;gt;):&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">propValue&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">operator&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">setValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myClass&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">property&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">KProperty&lt;/span>&lt;span class="p">&amp;lt;*&amp;gt;,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">?)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">propValue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>在&lt;code>Delegate&lt;/code>类中，我们必须实现&lt;code>getValue()&lt;/code>和&lt;code>setValue()&lt;/code>这两个方法，并且都要使用&lt;code>operator&lt;/code>关键字进行声明。&lt;/strong>&lt;/p>
&lt;p>&lt;code>getValue()&lt;/code>方法接收两个参数: 第一个是用于声明该&lt;code>Delegate&lt;/code>类的委托功能可以在什么类中使用，这里写成&lt;code>MyClass&lt;/code>表示仅可以在&lt;code>MyClass&lt;/code>类中使用; 第二个参数&lt;code>KProperty&amp;lt;*&amp;gt;&lt;/code>是Kotlin的一个属性操作类，可用于获取各种属性相关的值，在当前场景下用不上，但是必须在方法参数上声明。&lt;/p>
&lt;p>&lt;code>setValue()&lt;/code>的方法也是类似，只不过它要接收3个参数。前两个参数和&lt;code>getValue()&lt;/code>方法中是一样的，最后一个参数表示具体要赋值给委托属性的值，&lt;strong>这个参数的类型必须和&lt;code>getValue()&lt;/code>方法返回值的类型保持一致。&lt;/strong>&lt;/p>
&lt;p>不过还存在一种不需要在&lt;code>Delegate&lt;/code>类中实现&lt;code>setValue()&lt;/code>的方法，那就是&lt;code>MyClass&lt;/code>类中的&lt;code>p&lt;/code>属性使用的是关键字&lt;code>val&lt;/code>声明的。如果&lt;code>p&lt;/code>属性是使用&lt;code>val&lt;/code>声明的，那么就意味着&lt;code>p&lt;/code>属性是无法在初始之后重新被赋值的，因此也就没有逼下台实现&lt;code>setValue()&lt;/code>方法，只需要实现&lt;code>getValue()&lt;/code>方法即可。&lt;/p>
&lt;h3 id="标准库中的委托属性">标准库中的委托属性&lt;/h3>
&lt;h4 id="lazy">Lazy&lt;/h4>
&lt;p>我们先看看&lt;code>lazy&lt;/code>函数的作用&lt;/p>
&lt;blockquote>
&lt;p>lazy() is a function that takes a lambda and returns an instance of Lazy&lt;!-- raw HTML omitted --> which can serve as a delegate for implementing a lazy property: the first call to get() executes the lambda passed to lazy() and remembers the result, subsequent calls to get() simply return the remembered result.&lt;/p>
&lt;/blockquote>
&lt;p>具体效果如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">lazyValue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">lazy&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;computed!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="s2">&amp;#34;Hello&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lazyValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lazyValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 输出结果为
&lt;/span>&lt;span class="c1">// computed!
&lt;/span>&lt;span class="c1">// Hello
&lt;/span>&lt;span class="c1">// Hello
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从输出结果我们可以看到，实际上&lt;code>lazy&lt;/code>函数的Lambda表达式只有在第一次获取值的时候运行了一次，第二次调用&lt;code>lazyValue&lt;/code>的时候用的是它的缓存值。&lt;/p>
&lt;p>从代码可以看到: 懒加载背后的原理就是属性委托, 在&lt;code>lazy&lt;/code>函数中创建并返回了一个&lt;code>Delegate&lt;/code>对象,当我们调用属性&lt;code>lazyValue&lt;/code>的时候，其实就是调用&lt;code>Delegate&lt;/code>对象的&lt;code>getValue()&lt;/code>方法，然后&lt;code>getValue()&lt;/code>中又会调用&lt;code>lazy&lt;/code>函数传入的Lambda表达式，这样表达式中的代码就可以执行了，并且调用&lt;code>p&lt;/code>属性后得到的值就是Lambda表达式中最后一行代码的返回值。&lt;/p>
&lt;p>让我们自己实现一个简单版本的&lt;code>lazy&lt;/code>函数，新建一个&lt;code>Later.kt&lt;/code>文件，创建一个&lt;code>Later&lt;/code>类，并实现&lt;code>getValue()&lt;/code>方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Later&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">block&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">null&lt;/span>
&lt;span class="k">operator&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">getValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">any&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">?,&lt;/span> &lt;span class="n">prop&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">KProperty&lt;/span>&lt;span class="p">&amp;lt;*&amp;gt;):&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">block&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">T&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>getValue()&lt;/code>方法第一个参数指定为&lt;code>Any?&lt;/code>,表示我们希望&lt;code>Later&lt;/code>的委托功能在所有类中都可以用。然后使用了一个变量&lt;code>value&lt;/code>变量对值进行缓存，如果&lt;code>value&lt;/code>为空就调用构造函数中传入的函数类型参数去获取值，否则就直接返回。&lt;/p>
&lt;p>由于懒加载技术是不会对属性赋值的，因此这里我们就不用实现&lt;code>setValue&lt;/code>方法了。&lt;/p>
&lt;p>然后让我们再定义一个顶层函数，让它的调用方式更接近&lt;code>lazy&lt;/code>函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nc">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nf">later&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Later&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在我们就可以使用自己定义的&lt;code>later&lt;/code>函数来代替&lt;code>lazy&lt;/code>函数了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">lazyValue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">later&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;computed!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="s2">&amp;#34;Hello&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lazyValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lazyValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>注意&lt;/strong>,虽然我们自己实现了懒加载函数&lt;code>later&lt;/code>,但是它只是一个简单的版本，在一些诸如同步，空值处理等方面并没有实现得很严谨。因此在正式项目中，推荐使用Kotlin内置的&lt;code>lazy&lt;/code>函数才是最好的。&lt;/p>
&lt;h4 id="观察属性">观察属性&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">import&lt;/span> &lt;span class="nn">kotlin.properties.Delegates&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">var&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">Delegates&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">observable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;no name&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">prop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">old&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$old&lt;/span>&lt;span class="s2"> -&amp;gt; &lt;/span>&lt;span class="si">$new&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">user&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;first&amp;#34;&lt;/span> &lt;span class="c1">//&amp;lt;no name&amp;gt; -&amp;gt; first
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;second&amp;#34;&lt;/span> &lt;span class="c1">//first -&amp;gt; second
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>观察属性会在每次给对象赋值时(赋值之后)，都执行一次观察里的方法。&lt;/p>
&lt;p>同理，如果想在每次赋值之前被调用，可以使用&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.properties/-delegates/vetoable.html">&lt;code>vetoable&lt;/code>&lt;/a>来实现&lt;/p>
&lt;p>属性委托同样可以用语委托给类自身的另给一个属性，使用&lt;code>::&lt;/code>来引用另一个属性。例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">var&lt;/span> &lt;span class="py">newName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="nd">@Deprecated&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Use &amp;#39;newName&amp;#39; instead&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ReplaceWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;newName&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="k">var&lt;/span> &lt;span class="py">oldName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">newName&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">myClass&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">// Notification: &amp;#39;oldName: Int&amp;#39; is deprecated.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// Use &amp;#39;newName&amp;#39; instead
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">myClass&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">oldName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">42&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myClass&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">newName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 42
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>oldName&lt;/code>是被抛弃的方法，为了向前兼容，把它委托给&lt;code>newName&lt;/code>属性。&lt;/p>
&lt;p>使用属性委托的特定，我们还可以实现存储属性的效果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">User&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">map&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">?&amp;gt;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">map&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">map&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">user&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mapOf&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="s2">&amp;#34;John Doe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;age&amp;#34;&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="m">25&lt;/span>
&lt;span class="p">))&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Prints &amp;#34;John Doe&amp;#34;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Prints 25
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>创建User对象的时候通过map来构建User,然后就可以通过属性直接访问了.&lt;/p>
&lt;h3 id="类型别名">类型别名&lt;/h3>
&lt;p>可以给已经存在的类型设置一个别名，方便在编写代码时调用，多用于泛型或集合类型。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">typealias&lt;/span> &lt;span class="n">NodeSet&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Network&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Node&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="k">typealias&lt;/span> &lt;span class="n">FileTable&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">MutableMap&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MutableList&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">File&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以给函数&lt;strong>类型&lt;/strong>设置别名&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">typealias&lt;/span> &lt;span class="n">MyHandler&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>
&lt;span class="k">typealias&lt;/span> &lt;span class="n">Predicate&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Boolean&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>内部类和嵌套类也可以设置别名&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">inner&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Inner&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">inner&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Inner&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">typealias&lt;/span> &lt;span class="n">AInner&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Inner&lt;/span>
&lt;span class="k">typealias&lt;/span> &lt;span class="n">BInner&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Inner&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="空指针检查">空指针检查&lt;/h3>
&lt;p>Kotlin利用编译时判空检查的机制&lt;strong>几乎&lt;/strong>(并不是百分百)杜绝了空指针异常，也就是说，Kotlin将空指针检查提前到了编译时期。&lt;/p>
&lt;h4 id="可空类型声明">可空类型声明&lt;/h4>
&lt;p>Kotlin中默认所有的参数和变量都不能为空，要定义可空类型，就要在类名后面加上&lt;code>?&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">a&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="err">？&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="操作符">&lt;code>?.&lt;/code>操作符&lt;/h4>
&lt;p>&lt;code>?.&lt;/code>操作符表示当对象不为空时正常调用相应的方法，否则什么也不做。&lt;/p>
&lt;p>如:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="p">!&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">doSomething&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以简化为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="n">a&lt;/span>&lt;span class="o">?.&lt;/span>&lt;span class="n">doSomething&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="操作符-1">&lt;code>?:&lt;/code>操作符&lt;/h4>
&lt;p>&lt;code>?:&lt;/code>操作符的左右两边都接受一个表达式，如果左边表示表达式的结果不为空就返回左边表达式的结果，否则就返回右边表达式的结果。&lt;/p>
&lt;p>如:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">c&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">a&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">b&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以简化为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">c&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">?:&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="和结合使用">&lt;code>?.&lt;/code>和&lt;code>?:&lt;/code>结合使用&lt;/h4>
&lt;p>上面两个操作符可以结合使用，如:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">getTextLength&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">?):&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">text&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">text&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>简化为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">getTextLength&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">?)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">text&lt;/span>&lt;span class="o">?.&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="o">?:&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="非空断言工具">&lt;code>!!&lt;/code>非空断言工具&lt;/h4>
&lt;p>如下面的代码，虽然我们在&lt;code>main&lt;/code>函数中对&lt;code>content&lt;/code>做了非空判断的检查,但是下面的代码仍然无法编译过。因为&lt;code>printUpperCase&lt;/code>函数并不知道外部已经对&lt;code>content&lt;/code>进行了非空检查。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">content&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Hello&amp;#34;&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">content&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printUpperCase&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">printUpperCase&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">upperCase&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toUpperCase&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">upperCase&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>要让上面的代码编译过，可以使用非可断言工具&lt;code>!!&lt;/code>,写法是在对象后面加上&lt;code>!!&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">printUpperCase&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">upperCase&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">!!&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toUpperCase&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">upperCase&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="相等比较">相等比较&lt;/h3>
&lt;p>kotlin中比较两个变量是否相等有两种比较方式：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>==&lt;/code>比较两个变量的值是否相等，即两个遍历的&lt;code>equals()&lt;/code>返回值是否相等,等价于&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="n">a&lt;/span>&lt;span class="o">?.&lt;/span>&lt;span class="n">equals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>===&lt;/code>比较两个变量是否引用同一个对象&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="方法引用">方法引用&lt;code>::&lt;/code>&lt;/h3>
&lt;h3 id="kotlin中使用来引用方法">Kotlin中使用&lt;code>::&lt;/code>来引用方法&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Book&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 让getBook引用Book的构造函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">getBook&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">::&lt;/span>&lt;span class="n">Book&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">getBook&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Dive into Kotlin&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">bookNames&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">listOf&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">Book&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Dive into Java&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Book&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Dive into Kotlin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">).&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="c1">// 引用获取name的方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Book&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">name&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bookNames&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="heading-1">&lt;/h3></description></item><item><title>Kotlin基本语法04</title><link>https://crazygit.wiseturtles.com/2021/06/15/007-kotlin-basic-synatx-04/</link><pubDate>Tue, 15 Jun 2021 10:11:29 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2021/06/15/007-kotlin-basic-synatx-04/</guid><description>&lt;h3 id="密封类sealed-class">密封类&lt;code>sealed class&lt;/code>&lt;/h3>
&lt;p>密封类的具体作用如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="c1">// 定义一个空接口
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">interface&lt;/span> &lt;span class="nc">Result&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">msg&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Result&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Failure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">error&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Result&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">getResultMsg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">when&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">is&lt;/span> &lt;span class="n">Success&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">msg&lt;/span>
&lt;span class="k">is&lt;/span> &lt;span class="n">Failure&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">message&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="n">IllegalArgumentException&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面定义了一个&lt;code>Result&lt;/code>接口，用于表示某个操作的执行结果（接口中没有任何内容）。然后定义了两个类&lt;code>Success&lt;/code>和&lt;code>Failure&lt;/code>实现&lt;code>Result&lt;/code>接口。
再看&lt;code>getResultMsg&lt;/code>方法，它接收一个&lt;code>Result&lt;/code>参数，然后我们通过&lt;code>when&lt;/code>语句判断&lt;code>result&lt;/code>参数。我们知道，&lt;code>result&lt;/code>只有为&lt;code>Success&lt;/code>或&lt;code>Failure&lt;/code>两种情况，但是在&lt;code>when&lt;/code>语句最后，我们不得不添加一个&lt;code>else&lt;/code>条件，否则Kotlin编译器会认为这里缺少条件分支，会编译不过。&lt;/p>
&lt;p>我们在这里添加一个&lt;code>else&lt;/code>条件，仅仅只是为了让通过语法检查而已。使用密封类可以很好地解决这个问题。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">sealed&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Result&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">msg&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Failure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">error&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">getResultMsg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">when&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">is&lt;/span> &lt;span class="n">Success&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">msg&lt;/span>
&lt;span class="k">is&lt;/span> &lt;span class="n">Failure&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">message&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用密封类之后，当在&lt;code>when&lt;/code>语句中传入一个密封类变量作为条件时，Kotlin编译器会自动检查该密封类包含哪些子类，并强制要求你将每一个子类所对应的条件全部处理。这样就可以保证没有添加&lt;code>else&lt;/code>分支的情况下，也不可能会漏写条件分支的情况。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>:&lt;/p>
&lt;p>密封类以及所有子类只能定义在同一个文件的顶层位置，不能嵌套在其他类中，这是被密封类底层的实现机制所限制的。&lt;/p>
&lt;h3 id="泛型">泛型&lt;/h3>
&lt;p>关于泛型部分的&lt;code>in&lt;/code>, &lt;code>out&lt;/code>, &lt;code>where&lt;/code>关键字的使用，建议先阅读&lt;/p>
&lt;p>&lt;a href="https://rengwuxian.com/kotlin-generics/">https://rengwuxian.com/kotlin-generics/&lt;/a>&lt;/p>
&lt;p>Kotlin中的泛型与Java中的泛型有同有异，我们先来看相同的部分。&lt;/p>
&lt;h3 id="kotlin泛型与java泛型相同的部分">Kotlin泛型与Java泛型相同的部分&lt;/h3>
&lt;p>泛型的定义方式有两种: 一种是定义泛型类，另一种是定义泛型方法。&lt;/p>
&lt;p>定义一个泛型类,泛型类中的方法允许使用&lt;code>T&lt;/code>类型作为参数和返回值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">method&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">param&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">param&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">myClass&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">myClass&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">123&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>只定义一个泛型方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nc">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nf">method&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">param&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">param&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">myClass&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Myclass&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">myClass&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="m">123&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">result2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">myClass&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">123&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//利用推导机制，可以省略掉泛型的指定
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过限定上界，可以限制泛型的类型，下面的方法将限制泛型只能是数字类型。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nc">T&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nc">Number&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nf">method&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">param&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">param&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>默认情况下，所有的泛型类型都是可以指定成可空类型的，在没有指定上界的时候，泛型的上界默认是&lt;code>Any?&lt;/code>。如果想让泛型的类型不可为空，可以将泛型的上界手动指定为&lt;code>Any&lt;/code>类型。&lt;/p>
&lt;h3 id="kotlin泛型独有的功能">Kotlin泛型独有的功能&lt;/h3>
&lt;h4 id="对泛型实化">对泛型实化&lt;/h4>
&lt;p>泛型实例化这个功能对于绝大多数Java程序员来讲是非常默认的，因为Java中完全没有这个概念。而如果我们要先解释一下泛型实化，就要先解释一下Java的擦除机制。&lt;/p>
&lt;p>Java的泛型功能是通过类型擦除机制来实现的。什么意思呢？就是说泛型对于类型的约束只在编译时期存在，JVM是识别不出来我们在代码中指定的泛型类型的。假如我们创建了一个&lt;code>List&amp;lt;String&amp;gt;&lt;/code>集合，虽然在编译时期只能想集合里添加&lt;code>String&lt;/code>类型的元素，但是在运行时期JVM并不能知道它本来只打算包含哪种类型的元素，只能识别出来它是一个&lt;code>List&lt;/code>.&lt;/p>
&lt;p>所有基于JVM的语言，它们的泛型功能都是通过类型擦除机制来实现的，其中当然也包括Kotlin. 这种机制使得我们不可能使用&lt;code>a is T&lt;/code>或者&lt;code>T::class.java&lt;/code>这样的语法，因为&lt;code>T&lt;/code>的实际类型在运行的时候已经被擦除了。&lt;/p>
&lt;p>然而不同的是，Kotlin提供了一个内联函数的概念。内联函数中的代码会在编译的时候自动被替换到调用它的地方，这样的话也就不存在什么泛型擦除问题了，因为代码在编译后会直接使用实际的类型来替代内联函数中的泛型声明。&lt;/p>
&lt;p>所以在Kotlin中泛型实化要有两个条件:&lt;/p>
&lt;ol>
&lt;li>该函数必须是内联函数才行，也就是要用inline关键字来修饰该函数。&lt;/li>
&lt;li>在声明泛型的地方必须加上&lt;code>reified&lt;/code>关键字来表示该泛型要进行实化。&lt;/li>
&lt;/ol>
&lt;p>比如:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">inline&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="k">reified&lt;/span> &lt;span class="nc">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nf">getGenericType&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">java&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的函数直接返回了指定泛型的实际类型，&lt;code>T.class&lt;/code>这样的语法在Java中是不合法的，而在Kotlin中，借助泛型实化功能就可以使用&lt;code>T::class.java&lt;/code>这样的语法了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">getGenericType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;())&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">getGenericType&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">&amp;gt;())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 输出
&lt;/span>&lt;span class="c1">// class java.lang.String
&lt;/span>&lt;span class="c1">// class java.lang.Integer
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="泛型实化的应用">泛型实化的应用&lt;/h3>
&lt;p>泛型实化功能允许我们在泛型函数中获得泛型实例的实际类型，这也就使得类似&lt;code>a is T&lt;/code>、&lt;code>T::class.java&lt;/code>这样的语法成为了可能。&lt;/p>
&lt;p>看一个启动&lt;code>Activity&lt;/code>的代码，一般我们是这样写的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">intent&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Intnet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">TestActivity&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">intent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">putExtra&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;param1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">intent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">putExtra&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;param2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">123&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">startActivity&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">intent&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>利用泛型实化和高阶函数，我可以定义一个如下函数&lt;code>startActivity()&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">inline&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="k">reified&lt;/span> &lt;span class="nc">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nf">startActivity&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Context&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">block&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Intent&lt;/span>&lt;span class="p">.()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">intent&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Intent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">intent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">startActivity&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">intent&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后调用的时候直接使用下面的形式就可以了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="n">startActivity&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">TestActivity&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">putExtra&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;param1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">putExtra&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;param2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">123&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="泛型的协变">泛型的协变&lt;/h4>
&lt;p>假如定义了一个&lt;code>MyClass&amp;lt;T&amp;gt;&lt;/code>的泛型类，其中&lt;code>A&lt;/code>是&lt;code>B&lt;/code>的子类，同时&lt;code>MyClass&amp;lt;A&amp;gt;&lt;/code>又是&lt;code>MyClass&amp;lt;B&amp;gt;&lt;/code>的子类，那么我们就称&lt;code>MyClass&lt;/code>在&lt;code>T&lt;/code>这个泛型上是协变的。&lt;/p>
&lt;h4 id="泛型的逆变">泛型的逆变&lt;/h4>
&lt;p>假如定义了一个&lt;code>MyClass&amp;lt;T&amp;gt;&lt;/code>的泛型类，其中&lt;code>A&lt;/code>是&lt;code>B&lt;/code>的子类，同时&lt;code>MyClass&amp;lt;B&amp;gt;&lt;/code>又是&lt;code>MyClass&amp;lt;A&amp;gt;&lt;/code>的子类，那么我们就称&lt;code>MyClass&lt;/code>在&lt;code>T&lt;/code>这个泛型上是逆变的。&lt;/p>
&lt;p>Java 的泛型本身是不支持协变和逆变的。&lt;/p>
&lt;ul>
&lt;li>可以使用泛型通配符 &lt;code>? extends&lt;/code> 来使泛型支持协变，但是「只能读取不能修改」，这里的修改仅指对泛型集合添加元素，如果是 &lt;code>remove(int index)&lt;/code> 以及 &lt;code>clear&lt;/code> 当然是可以的。&lt;/li>
&lt;li>可以使用泛型通配符 &lt;code>? super&lt;/code> 来使泛型支持逆变，但是「只能修改不能读取」，这里说的不能读取是指不能按照泛型类型读取，你如果按照 &lt;code>Object&lt;/code> 读出来再强转当然也是可以的。&lt;/li>
&lt;/ul>
&lt;p>根据前面的说法，这被称为 PECS 法则：「&lt;em>Producer-Extends, Consumer-Super&lt;/em>」。&lt;/p>
&lt;h3 id="说回-kotlin-中的-out-和-in">说回 Kotlin 中的 &lt;code>out&lt;/code> 和 &lt;code>in&lt;/code>&lt;/h3>
&lt;p>和 Java 泛型一样，Kolin 中的泛型本身也是不可变的。&lt;/p>
&lt;ul>
&lt;li>使用关键字 &lt;code>out&lt;/code> 来支持协变，等同于 Java 中的上界通配符 &lt;code>? extends&lt;/code>。&lt;/li>
&lt;li>使用关键字 &lt;code>in&lt;/code> 来支持逆变，等同于 Java 中的下界通配符 &lt;code>? super&lt;/code>。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">var&lt;/span> &lt;span class="py">textViews&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="k">out&lt;/span> &lt;span class="n">TextView&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="k">var&lt;/span> &lt;span class="py">textViews&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="k">in&lt;/span> &lt;span class="n">TextView&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Kotlin换了个写法，但作用是完全一样的。&lt;code>out&lt;/code> 表示，我这个变量或者参数只用来输出，不用来输入，你只能读我不能写我；&lt;code>in&lt;/code> 就反过来，表示它只用来输入，不用来输出，你只能写我不能读我。&lt;/p>
&lt;h3 id="嵌套类">嵌套类&lt;/h3>
&lt;p>kotlin中，类和接口可以任意组合嵌套，比如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Outer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">bar&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Nested&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">demo&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Outer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Nested&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// == 2
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 接口和类直接也可以相互嵌套
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">interface&lt;/span> &lt;span class="nc">OuterInterface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">InnerClass&lt;/span>
&lt;span class="k">interface&lt;/span> &lt;span class="nc">InnerInterface&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">OuterClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">InnerClass&lt;/span>
&lt;span class="k">interface&lt;/span> &lt;span class="nc">InnerInterface&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="inner-classes">Inner classes﻿&lt;/h4>
&lt;p>如果一个嵌套类被标记为&lt;code>inner&lt;/code>,那么这个类可以访问外部类的成员(没有标记时是不能直接访问的)，它包含了一个外部类的引用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Outer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">bar&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="k">inner&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Inner&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">bar&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">demo&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Outer&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">Inner&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// == 1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="匿名内部类anonymous-inner-classes">匿名内部类(Anonymous inner classes)&lt;/h4>
&lt;p>使用&lt;code>object&lt;/code>关键字，可以创建匿名的内部类&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="n">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addMouseListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">object&lt;/span> &lt;span class="err">: &lt;/span>&lt;span class="nc">MouseAdapter&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">mouseClicked&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MouseEvent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">mouseEntered&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MouseEvent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="枚举类">枚举类&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">enum&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Direction&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">NORTH&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SOUTH&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">WEST&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">EAST&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//包含初始值的枚举类
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">rgb&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">RED&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0xFF0000&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">GREEN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0x00FF00&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">BLUE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0x0000FF&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>枚举类也可以匿名类的形式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">enum&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">ProtocolState&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">WAITING&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">signal&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">TALKING&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="n">TALKING&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">signal&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">WAITING&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">abstract&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">signal&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">ProtocolState&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="枚举类的常用方法">枚举类的常用方法&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="n">EnumClass&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">valueOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">EnumClass&lt;/span>
&lt;span class="c1">// 获取枚举类的
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">EnumClass&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">EnumClass&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c1">// 通过泛型方式方法
&lt;/span>&lt;span class="c1">// enumValues&amp;lt;T&amp;gt;()
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">RGB&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">RED&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GREEN&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BLUE&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">inline&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="k">reified&lt;/span> &lt;span class="nc">T&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nc">Enum&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nc">T&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nf">printAllValues&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">enumValues&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;().&lt;/span>&lt;span class="n">joinToString&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>每个枚举类都默认有两个属性&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">ordinal&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="c1">// 按照声明顺序在枚举类中的位置
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="inline-class">Inline Class&lt;/h3>
&lt;p>类似&lt;code>data class&lt;/code>, 在编写程序时，为了一些逻辑。我们经常会定义一些类来封装数据。这也做很方便，但是也会带来一些额外的运算开销。尤其是当只有一个属性时。因此，Kotlin中引起了&lt;code>Inline Class&lt;/code>,可以把它看作为&lt;code>data class&lt;/code>的子类&lt;/p>
&lt;p>使用&lt;code>value&lt;/code>关键字声明&lt;code>Inline Class&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="n">value&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Password&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">private&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了兼容JVM，还需要使用注解&lt;code>@JvmInline&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="c1">// For JVM backends
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@JvmInline&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Password&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">private&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Inline Class&lt;/code>必须在主构造函数里必须有一个属性，在代码运行的时候，编译器会将它作为原始数据来对待，而不会额外创建一个类来处理&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="c1">// No actual instantiation of class &amp;#39;Password&amp;#39; happens
&lt;/span>&lt;span class="c1">// At runtime &amp;#39;securePassword&amp;#39; contains just &amp;#39;String&amp;#39;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">securePassword&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Password&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Don&amp;#39;t try this in production&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="inline-class-members">Inline Class Members&lt;/h4>
&lt;p>&lt;code>Inline Class&lt;/code>同样跟普通类一样，支持定义属性和一些方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="nd">@JvmInline&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">init&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">length&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>
&lt;span class="k">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">greet&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello, &lt;/span>&lt;span class="si">$s&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Kotlin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">greet&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// method `greet` is called as a static method
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// property getter is called as a static method
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Inline Class 继承&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">interface&lt;/span> &lt;span class="nc">Printable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">prettyPrint&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">String&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nd">@JvmInline&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Printable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">prettyPrint&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Let&amp;#39;s &lt;/span>&lt;span class="si">$s&lt;/span>&lt;span class="s2">!&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Kotlin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">prettyPrint&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1">// Still called as a static method
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="根据不情况具有不同的表现形式">根据不情况具有不同的表现形式&lt;/h4>
&lt;p>&lt;code>Inline Class&lt;/code>并不是一直在运行时都做被当成原始数据，而是根据使用场景，优化了是否封包解包的操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">interface&lt;/span> &lt;span class="nc">I&lt;/span>
&lt;span class="nd">@JvmInline&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">i&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">I&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">asInline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Foo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nc">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nf">asGeneric&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">asInterface&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">I&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">asNullable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Foo&lt;/span>&lt;span class="p">?)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nc">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nf">id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">f&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">42&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">asInline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// unboxed: used as Foo itself
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">asGeneric&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// boxed: used as generic type T
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">asInterface&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// boxed: used as type I
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">asNullable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// boxed: used as Foo?, which is different from Foo
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// below, &amp;#39;f&amp;#39; first is boxed (while being passed to &amp;#39;id&amp;#39;) and then unboxed (when returned from &amp;#39;id&amp;#39;)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// In the end, &amp;#39;c&amp;#39; contains unboxed representation (just &amp;#39;42&amp;#39;), as &amp;#39;f&amp;#39;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">c&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="mangling">Mangling&lt;/h4>
&lt;p>Since inline classes are compiled to their underlying type, it may lead to various obscure errors, for example unexpected platform signature clashes:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="nd">@JvmInline&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">UInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Represented as &amp;#39;public final void compute(int x)&amp;#39; on the JVM
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">fun&lt;/span> &lt;span class="nf">compute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1">// Also represented as &amp;#39;public final void compute(int x)&amp;#39; on the JVM!
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">fun&lt;/span> &lt;span class="nf">compute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">UInt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To mitigate such issues, functions using inline classes are &lt;em>mangled&lt;/em> by adding some stable hashcode to the function name. Therefore, &lt;code>fun compute(x: UInt)&lt;/code> will be represented as &lt;code>public final void compute-&amp;lt;hashcode&amp;gt;(int x)&lt;/code>, which solves the clash problem.&lt;/p>
&lt;h3 id="calling-from-java-code">Calling from Java code&lt;/h3>
&lt;p>You can call functions that accept inline classes from Java code. To do so, you should manually disable mangling: add the &lt;code>@JvmName&lt;/code> annotation before the function declaration:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="nd">@JvmInline&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">UInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">compute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="nd">@JvmName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;computeUInt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">compute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">UInt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="inline-classes-vs-type-aliases">Inline classes vs type aliases&lt;/h4>
&lt;p>At first sight, inline classes seem very similar to &lt;a href="https://kotlinlang.org/docs/type-aliases.html">type aliases&lt;/a>. Indeed, both seem to introduce a new type and both will be represented as the underlying type at runtime.&lt;/p>
&lt;p>However, the crucial difference is that type aliases are &lt;em>assignment-compatible&lt;/em> with their underlying type (and with other type aliases with the same underlying type), while inline classes are not.&lt;/p>
&lt;p>In other words, inline classes introduce a truly &lt;em>new&lt;/em> type, contrary to type aliases which only introduce an alternative name (alias) for an existing type:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">typealias&lt;/span> &lt;span class="n">NameTypeAlias&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">String&lt;/span>
&lt;span class="nd">@JvmInline&lt;/span>
&lt;span class="n">value&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">NameInlineClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">acceptString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">acceptNameTypeAlias&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NameTypeAlias&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">acceptNameInlineClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NameInlineClass&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">nameAlias&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NameTypeAlias&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">nameInlineClass&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NameInlineClass&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">NameInlineClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">string&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">acceptString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nameAlias&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// OK: pass alias instead of underlying type
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">acceptString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nameInlineClass&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Not OK: can&amp;#39;t pass inline class instead of underlying type
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// And vice versa:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">acceptNameTypeAlias&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// OK: pass underlying type instead of alias
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">acceptNameInlineClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Not OK: can&amp;#39;t pass underlying type instead of inline class
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="object-expressions-and-declarations">Object expressions and declarations&lt;/h3>
&lt;p>有些时候，我们可能只需要修改修改类的一点东西而不想单独创建一个类，这个时候对象表达式就派上用场了。&lt;/p>
&lt;p>对象表达式创建的类都不使用&lt;code>class&lt;/code>关键字，一般情况下只会使用一次。&lt;/p>
&lt;h4 id="创建一个匿名类">创建一个匿名类&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">helloWorld&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">object&lt;/span> &lt;span class="err">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">hello&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Hello&amp;#34;&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">world&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;World&amp;#34;&lt;/span>
&lt;span class="c1">// object expressions extend Any, so `override` is required on `toString()`
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">toString&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$hello&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="si">$world&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>创建一个继承自其它类的匿名类&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="n">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addMouseListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">object&lt;/span> &lt;span class="err">: &lt;/span>&lt;span class="nc">MouseAdapter&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">mouseClicked&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MouseEvent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/*...*/&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">mouseEntered&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MouseEvent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/*...*/&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果继承的父类有构造函数，创建时也需要传递构造函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">open&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">open&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">interface&lt;/span> &lt;span class="nc">B&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/*...*/&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">ab&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">A&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">object&lt;/span> &lt;span class="err">: &lt;/span>&lt;span class="nc">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">B&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">15&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="使用匿名类作为返回值">使用匿名类作为返回值&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">C&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">getObject&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">object&lt;/span> &lt;span class="err">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;x&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">printX&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">getObject&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="从匿名内部类可以访问外部的成员">从匿名内部类可以访问外部的成员&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">countClicks&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">window&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">JComponent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">var&lt;/span> &lt;span class="py">clickCount&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="k">var&lt;/span> &lt;span class="py">enterCount&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="n">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addMouseListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">object&lt;/span> &lt;span class="err">: &lt;/span>&lt;span class="nc">MouseAdapter&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">mouseClicked&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MouseEvent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">clickCount&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">mouseEntered&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MouseEvent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">enterCount&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="单例类">单例类&lt;/h3>
&lt;p>在Kotlin中创建一个单例类的方法特别简单，只需要将&lt;code>class&lt;/code>关键字改为&lt;code>object&lt;/code>关键字即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">object&lt;/span> &lt;span class="nc">Manager&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">manager&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;manager is called.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>调用单例类中的函数也很简单，比较类似Java中静态方法的调用方式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="n">Manager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">manager&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的写法看起来很像是静态方法的调用，但其实Kotlin背后帮我们自动创建了一个&lt;code>Manager&lt;/code>类的实例，并保证全局只有一个&lt;code>Manager&lt;/code>实例。&lt;/p>
&lt;h3 id="伴生类">伴生类&lt;/h3>
&lt;p>使用&lt;code>companion object&lt;/code>关键字，可以创建伴生类&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">companion&lt;/span> &lt;span class="k">object&lt;/span> &lt;span class="n">Factory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">create&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">MyClass&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>伴生类里面的成员可以直接通过外部类的类名访问&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">instance&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>尽管伴生类看起来像是静态类，但是在使用时仍然是一个实际存在的对象，因此它也可以实现接口&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">interface&lt;/span> &lt;span class="nc">Factory&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">create&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">T&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">companion&lt;/span> &lt;span class="k">object&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Factory&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">create&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">MyClass&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">MyClass&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">f&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Factory&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">MyClass&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="静态方法">静态方法&lt;/h3>
&lt;p>在Kotlin中极度弱化了静态方法这个概念。像工具类这种功能，在Kotlin中非常推荐使用单例的方式来实现。比如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">object&lt;/span> &lt;span class="nc">Util&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">doAction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;do some action&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>虽然这里的&lt;code>doAction()&lt;/code>方法并不是静态方法，但是由于&lt;code>Util&lt;/code>被声明为了单例的形式，我们仍然可以使用&lt;code>Util.doAction()&lt;/code>的方式来调用，非常方便。&lt;/p>
&lt;p>不过使用单例类的写法会将类中所有的方法都变成类似静态方法的调用方式，而如果我们只希望让类中的一个方法变成静态方法时，就需要使用&lt;code>companion object&lt;/code>了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Util&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">doAction1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;do action1&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">companion&lt;/span> &lt;span class="k">object&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">doAction2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;do action2&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Util&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">doAction1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// doAction1必须先创建对象才能调用
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Util&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">doAction2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// doAction2可以像静态方法一样直接调用
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>doAction2()&lt;/code>方法其实也不是一个静态方法，&lt;code>companion object&lt;/code>这个关键字实际上会在&lt;code>Util&lt;/code>类的内部创建一个伴生类，而&lt;code>doAction2()&lt;/code>就是定义在这个伴生类里的&lt;strong>实例&lt;/strong>方法。
只是Kotlin会保证在&lt;code>Util&lt;/code>类始终存在一个伴生类&lt;strong>对象&lt;/strong>，因此调用&lt;code>Util.doAction2()&lt;/code>实际上就是调用了&lt;code>Util&lt;/code>类中伴生对象的&lt;code>doAction2&lt;/code>方法。&lt;/p>
&lt;p>由此可以看出，Kotlin确实没有直接定义静态方法的关键字，但是提供了一些语法特性来支持类似静态方法调用的写法。&lt;/p>
&lt;p>如果确实需要定义真正的静态方法，Kotlin提供了两种实现方式:&lt;/p>
&lt;ul>
&lt;li>注解&lt;/li>
&lt;li>顶层方法&lt;/li>
&lt;/ul>
&lt;h4 id="通过注解实现静态方法">通过注解实现静态方法&lt;/h4>
&lt;p>先来看注解，前面使用单例类和&lt;code>companion object&lt;/code>都只是在语法上模仿了静态方法的调用方式，实际上他们都不是真正的静态方法。因此如果你在Java中以静态方法的形式调用上面的方法的话，会发现这些方法根本不存在。而如果我们给单例类或者&lt;code>companion object&lt;/code>中的方法加上&lt;code>@JvmStatic&lt;/code>注解，那么Kotlin编译器就会将这些方法编译成真正的静态方法。如:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Util&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">doAction1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;do action1&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">companion&lt;/span> &lt;span class="k">object&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nd">@JvmStatic&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">doAction2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;do action2&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意： &lt;code>@JvmStatic&lt;/code>只能加在单例类或者&lt;code>companion object&lt;/code>中的方法上，如果你尝试加在一个普通方法上(如上面的&lt;code>doAction1()&lt;/code>方法)，会直接报错。&lt;/p>
&lt;p>按照上面的方法添加注解之后，&lt;code>doAction2()&lt;/code>方法就变成了真正的静态方法，不管是在Kotlin还是Java中，都可以使用&lt;code>Util.doAction2()&lt;/code>的写法来调用。&lt;/p>
&lt;h4 id="通过顶层方法实现静态方法">通过顶层方法实现静态方法&lt;/h4>
&lt;p>顶层方法是指那些没有定义在任何类中的方法。Kotlin编译器会将所有的顶层方法全部编译成静态方法。因此只要你定义了一个顶层方法，那它一定是静态方法。&lt;/p>
&lt;p>如在&lt;code>Helper.kt&lt;/code>文件中定义一个方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;do something&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在Kotlin中调用顶层方法比较简单，直接使用方法名就可以调用了，但是在Java中，没有顶层方法这个概念，所有的方法都必须定义在类中，那么在Java中该如何调用这个方法呢？&lt;/p>
&lt;p>由于我们刚刚创建的文件名是&lt;code>Helper.kt&lt;/code>,于是Kotlin编译器会自动创建一个叫做&lt;code>HelperKt&lt;/code>的Java类，&lt;code>doSomething&lt;/code>就是以静态方法的形式定义在&lt;code>HelperKt&lt;/code>类中的。
因此在Java中只需要通过&lt;code>HelperKt.doSomething()&lt;/code>的写法来调用。&lt;/p></description></item><item><title>Kotlin基本语法03</title><link>https://crazygit.wiseturtles.com/2021/06/07/006-kotlin-basic-synatx-03/</link><pubDate>Mon, 07 Jun 2021 11:17:29 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2021/06/07/006-kotlin-basic-synatx-03/</guid><description>&lt;h2 id="面向对象编程01">面向对象编程01&lt;/h2>
&lt;h3 id="类">类&lt;/h3>
&lt;p>与Java一样，Kotlin中使用&lt;code>class&lt;/code>关键字来声明类, 例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/*...*/&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当一个类不包含任何属性和方法时，可以简写为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="主构造函数">主构造函数&lt;/h3>
&lt;p>Kotlin中，一个类可以有1个主构造函数，以及一个或者多个次构造函数。&lt;/p>
&lt;p>主构造函数使用关键字**&lt;code>constructor&lt;/code>**关键字声明，紧跟在类名后面，格式如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span> &lt;span class="k">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">firstName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/*...*/&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果主构造函数没有任何注解或修饰符，可以把&lt;code>constructor&lt;/code>关键字省略掉，直接写作&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">firstName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/*...*/&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是如果主构造函数前有注解或修饰符时，&lt;code>constructor&lt;/code>关键字不能省略&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Customer&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="nd">@Inject&lt;/span> &lt;span class="k">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/*...*/&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>主构造函数里不能包含任何代码块，初始语句可以放在&lt;code>init&lt;/code>代码块里面，并且一个类可以包含多个&lt;code>init&lt;/code>代码块，按照他们在类中出现的顺序依次执行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">InitOrderDemo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">firstProperty&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;First property: &lt;/span>&lt;span class="si">$name&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">also&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">init&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;First initializer block that prints &lt;/span>&lt;span class="si">${name}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">secondProperty&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Second property: &lt;/span>&lt;span class="si">${name.length}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">also&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">init&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Second initializer block that prints &lt;/span>&lt;span class="si">${name.length}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>主构造函数里的参数即可以在&lt;code>init&lt;/code>块里使用，也可以在类属性初始化时使用，比如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Customer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">customerKey&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">uppercase&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>定义类的属性时，只需要在主构造函数的参数前面加上&lt;code>val&lt;/code>或者&lt;code>var&lt;/code>即可&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">firstName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">lastName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="次构造函数">次构造函数&lt;/h3>
&lt;p>如果需要多种方法来初始化类，则可以创建&lt;strong>次构造函数&lt;/strong>，每个构造函数都是一个名称为&lt;code>constructor&lt;/code> 的函数。每个次构造函数都必须使用&lt;code>this&lt;/code>或&lt;code>super&lt;/code>关键字来调用另一个（主或次）构造函数，就好像它是一个函数一样（以便每个实例构造最终都调用该主构造函数）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">yearOfBirth&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2018&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="n">yearOfBirth&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">p1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Jim&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">12&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">p2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Jack&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">p3&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1988&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Sam&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="创建类的对象">创建类的对象&lt;/h3>
&lt;p>直接调用构造函数即可调用创建类对象，跟Java不同的是，不需要使用&lt;code>new&lt;/code>关键字&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">invoice&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Invoice&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">customer&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Customer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Joe Smith&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="继承">继承&lt;/h3>
&lt;p>Kotlin中每个未明确声明父类的类都从&lt;code>Any&lt;/code>类继承，&lt;code>Any&lt;/code>是类层次结构的根（类似于 Python 中的&lt;code>Object&lt;/code>）通过继承&lt;code>Any&lt;/code>类，每个类自动具有以下函数：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>toString()&lt;/code> 返回对象的字符串表示形式，类似于 Python 中的 &lt;code>__str__()&lt;/code>（默认实现相当有趣，因为它仅返回类名与类似于对象 ID 的名称）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>equals(x)&lt;/code> 检查此对象是否与任何类的某个其他对象&lt;code>x&lt;/code>相同（默认情况下，它仅检查该对象是否与&lt;code>x&lt;/code>是相同的对象，类似 Python 中的 &lt;code>is&lt;/code>， 但可以被子类覆盖以进行属性值的自定义比较）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>hashCode()&lt;/code> 返回一个整数，哈希表可以使用该整数并用于简化复杂的相等比较（根据&lt;code>equals()&lt;/code> 相等的对象必须具有相同的哈希码，因此，如果两个对象的哈希码不同，则这些对象不能相等）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">var&lt;/span> &lt;span class="py">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Anne&amp;#34;&lt;/span>
&lt;span class="k">var&lt;/span> &lt;span class="py">age&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">32&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>与 Python 相反，在类内部直接声明属性不会创建类级别的属性，而是创建实例级别的属性：&lt;code>Person&lt;/code>的每个实例都有它自己的&lt;code>name&lt;/code>和&lt;code>age。&lt;/code>它们的值将在每个实例中分别以&lt;code>Anne&lt;/code>与&lt;code>32&lt;/code>生成，但是每个实例中的值可以独立于其他实例进行修改。在Kotlin中要使用类属性，需要使用&amp;quot;伴生对象&amp;quot;(&lt;code>objects-and-companion-objects&lt;/code>)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>默认情况下，Kotlin中每个都都是&lt;code>final&lt;/code>的，不能被继承，要让一个类可以被继承，需要使用&lt;code>open&lt;/code>关键字&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">open&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="方法覆写">方法覆写&lt;/h3>
&lt;p>方法覆写时，除了继承的类必须是&lt;code>open&lt;/code>之类，覆写的方法也必须是&lt;code>open&lt;/code>才可以，例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">open&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">open&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/*...*/&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">fill&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/*...*/&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Circle&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Shape&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/*...*/&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 编译器会报错
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// override fun fill() {}
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的例子中，只有&lt;code>draw&lt;/code>方法才可以被覆写。&lt;/p>
&lt;p>覆写的方法自身是&lt;code>open&lt;/code>的，想让覆写的方法自身不被它的子类覆写，可以加上&lt;code>final&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">open&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Rectangle&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Shape&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">final&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/*...*/&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="属性覆写">属性覆写&lt;/h3>
&lt;p>跟方法覆写一样，属性覆写也是类似的, 注释覆写的属性类型必须和父类的兼容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">open&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">open&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">vertexCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Rectangle&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Shape&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">vertexCount&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">4&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>甚至可以使用&lt;code>val&lt;/code>覆写&lt;code>var&lt;/code>属性，反之亦然。&lt;/p>
&lt;p>另外，也可以直接在主构造函数里使用&lt;code>override&lt;/code>关键字&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">interface&lt;/span> &lt;span class="nc">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">vertexCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Rectangle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">override&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">vertexCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Shape&lt;/span> &lt;span class="c1">// Always has 4 vertices
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Polygon&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">vertexCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="c1">// Can be set to any number later
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="派生类的执行顺序">派生类的执行顺序&lt;/h3>
&lt;p>首先是父类先初始化，然后才是子类。子类里覆写父类的属性或也要在子类初始化完成后才正式可用，假如在父类里调用了被覆写的属性，可能会导致错误的结果。&lt;/p>
&lt;p>因此在设计父类的时候，应当避免在构造参数，属性初始化，或者&lt;code>init&lt;/code>模块中，使用带&lt;code>open&lt;/code>修饰的成员。&lt;/p>
&lt;p>并且&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">open&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">init&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Initializing a base class&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">open&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span>
&lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">also&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Initializing size in the base class: &lt;/span>&lt;span class="si">$it&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">lastName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">replaceFirstChar&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">uppercase&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}.&lt;/span>&lt;span class="n">also&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Argument for the base class: &lt;/span>&lt;span class="si">$it&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">init&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Initializing a derived class&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="k">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">lastName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">also&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Initializing size in the derived class: &lt;/span>&lt;span class="si">$it&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Constructing the derived class(&lt;/span>&lt;span class="se">\&amp;#34;&lt;/span>&lt;span class="s2">hello&lt;/span>&lt;span class="se">\&amp;#34;&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="se">\&amp;#34;&lt;/span>&lt;span class="s2">world&lt;/span>&lt;span class="se">\&amp;#34;&lt;/span>&lt;span class="s2">)&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">Derived&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;world&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Constructing the derived class(&amp;#34;hello&amp;#34;, &amp;#34;world&amp;#34;)
Argument for the base class: Hello
Initializing a base class
Initializing size in the base class: 5
Initializing a derived class
Initializing size in the derived class: 10
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从上面的输出可以看出，size属性签名有两个值。&lt;/p>
&lt;h3 id="调用父类的方法">调用父类的方法&lt;/h3>
&lt;p>在派生类中，如果想调用父类的方法，使用&lt;code>super&lt;/code>关键字即可&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">open&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Rectangle&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">open&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Drawing a rectangle&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">borderColor&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;black&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">FilledRectangle&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Rectangle&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 使用super调用父类的方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Filling the rectangle&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 使用super调用父类的方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">fillColor&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">borderColor&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在&lt;code>inner class&lt;/code>里，想要访问外部类的父类方法时，可以使用&lt;code>super&lt;/code>关键字加上外部类的类名来实现，类似&lt;code>super@OuterClassName&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">FilledRectangle&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Rectangle&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">filler&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Filler&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">filler&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">drawAndFill&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">inner&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Filler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">fill&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Filling&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">drawAndFill&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 调用外部类FilledRectangle的父类Rectangle的draw()方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">super&lt;/span>&lt;span class="nd">@FilledRectangle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// Calls Rectangle&amp;#39;s implementation of draw()
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fill&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Drawn a filled rectangle with color &lt;/span>&lt;span class="si">${super@FilledRectangle.borderColor}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Uses Rectangle&amp;#39;s implementation of borderColor&amp;#39;s get()
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="覆写顺序">覆写顺序&lt;/h3>
&lt;p>当一个类同时实现了多个相同的方法时，必须明确指定它要调用的是哪个的实现(使用&lt;code>super&amp;lt;Base&amp;gt;&lt;/code>的形式) 或者自己重写这个方法。&lt;/p>
&lt;p>例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">open&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Rectangle&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">open&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* ... */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">interface&lt;/span> &lt;span class="nc">Polygon&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* ... */&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// interface members are &amp;#39;open&amp;#39; by default
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Square&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Rectangle&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">Polygon&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// The compiler requires draw() to be overridden:
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">super&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Rectangle&lt;/span>&lt;span class="p">&amp;gt;.&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// call to Rectangle.draw()
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">super&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Polygon&lt;/span>&lt;span class="p">&amp;gt;.&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// call to Polygon.draw()
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="属性的gettersetter函数">属性的&lt;code>getter/setter&lt;/code>函数&lt;/h3>
&lt;p>Kotlin中类属性实际上是一个 幕后字段（对象内部为隐藏变量的种类）与两个访问器函数：一个用于获取变量的值，另一个用于设置值。&lt;strong>访问函数在每次调用属性时都会执行，类似计算属性&lt;/strong>&lt;/p>
&lt;p>可以重写一个或两个访问器（未被重写的访问器会自动获得默认行为，即直接返回或设置幕后字段）。&lt;/p>
&lt;p>在访问器内部，可以使用&lt;code>field&lt;/code>引用幕后字段。&lt;code>Setter&lt;/code>访问器必须采用参数 &lt;code>value&lt;/code>，这是赋值给属性的值。&lt;/p>
&lt;p>一个&lt;code>Getter&lt;/code> 主体可以是一个以&lt;code>=&lt;/code>开头的单行表达式，也可以是一个花括号括起来的更复杂的主体，而&lt;code>Setter&lt;/code>主体通常包括一个赋值，因此必须括在花括号中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">package&lt;/span> &lt;span class="nn">com.github.crazygit.koltlin.demo&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">var&lt;/span> &lt;span class="py">age&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="n">IllegalArgumentException&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s2">&amp;#34;Age cannot be negative&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="k">field&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">init&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">age&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//创建实际上没有幕后字段的属性，而只需引用另一个属性
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">isNewborn&lt;/span>
&lt;span class="k">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">p&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isNewborn&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请注意，尽管由于使用&lt;code>val&lt;/code>声明了&lt;code>isNewborn&lt;/code>是一个只读属性（在这种情况下，即使没有提供&lt;code>Setter&lt;/code>），但它的值仍然可以更改，因为它是从可变属性中读取的——只是无法给该属性赋值。另外，请注意，属性类型是根据&lt;code>Getter&lt;/code>的返回值推断出来的。&lt;/p>
&lt;p>访问器前面的缩进是由于约定，像Kotlin的其他地方一样，它没有语法意义。编译器可以知道哪些访问器属于哪些属性，&lt;strong>因为访问器的唯一合法位置是在属性声明之后（并且最多可以有一个 Getter 与一个 Setter——因此无法拆分属性声明与访问器声明。然而，访问器的顺序并不重要&lt;/strong>。&lt;/p>
&lt;h3 id="setter函数中的一个坑">&lt;code>Setter&lt;/code>函数中的一个坑&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">var&lt;/span> &lt;span class="py">age&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">age&lt;/span>
&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;call age setter with value: &lt;/span>&lt;span class="si">$value&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="n">IllegalArgumentException&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s2">&amp;#34;Age cannot be negative&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="k">field&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">p&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Person&lt;/span>&lt;span class="p">(-&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//初始为负数，但是不会报错, setter中的println语句并不会执行
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的类虽然设置了&lt;code>age&lt;/code>的&lt;code>Setter&lt;/code>，但是初始化并未调用&lt;code>Setter&lt;/code>逻辑，而是直接设置了幕后字段。必须用下面的写法，通过&lt;code>init&lt;/code>模块才能让初始化调用&lt;code>setter&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">var&lt;/span> &lt;span class="py">age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="k">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;call age setter with value: &lt;/span>&lt;span class="si">$value&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="n">IllegalArgumentException&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="s2">&amp;#34;Age cannot be negative&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="k">field&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">init&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">age&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="接口">接口&lt;/h3>
&lt;p>实现接口和继承类使用的是同样的关键字&lt;code>:&lt;/code>,另外接口的名称后面不用加上括号，因为它没有主构造函数需要实现.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">package&lt;/span> &lt;span class="nn">com.github.crazygit.koltlin.demo&lt;/span>
&lt;span class="k">interface&lt;/span> &lt;span class="nc">Study&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 接口中同样可以声明属性
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">prop&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="c1">// abstract
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">readBooks&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">doHomework&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;do homework default implementation&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>与Java1.8一样，Kotlin的接口允许拥有默认实现，在实现接口时，拥有默认实现的函数可以自由选择实现或者不实现，不实现时自动使用默认的实现逻辑。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">package&lt;/span> &lt;span class="nn">com.github.crazygit.koltlin.demo&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Student&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">sno&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">grade&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Study&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">prop&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">29&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">readBooks&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$name&lt;/span>&lt;span class="s2"> is reading books&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">doHomework&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$name&lt;/span>&lt;span class="s2"> is doing homework&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接口直接也是可以相互继承的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">interface&lt;/span> &lt;span class="nc">Named&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">interface&lt;/span> &lt;span class="nc">Person&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Named&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">firstName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">lastName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$firstName&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="si">$lastName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">data&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Employee&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="c1">// implementing &amp;#39;name&amp;#39; is not required
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">firstName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">lastName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Position&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Person&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当实现多个具有相同函数的接口时，需要显示指定调用哪个的接口&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">interface&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;A&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">interface&lt;/span> &lt;span class="nc">B&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;B&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">C&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">D&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">B&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//使用super调用接口里的方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">super&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">&amp;gt;.&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">super&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">&amp;gt;.&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">super&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="p">&amp;gt;.&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="functional-sam-interfaces">Functional (SAM) interfaces&lt;/h3>
&lt;p>一个接口只有一个抽象方法时，这个接口被叫做功能性接口(&lt;em>functional interface&lt;/em>)，或者&lt;em>Single Abstract Method (SAM) interface&lt;/em>. 它可以有几个非抽象的属性。&lt;/p>
&lt;p>使用&lt;code>fun&lt;/code>关键字声明功能性接口&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">interface&lt;/span> &lt;span class="n">KRunnable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">invoke&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>SAM接口有个语法，可以使用Lambda表达式来简化接口的实现&lt;/p>
&lt;p>比如有这么一个接口&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">interface&lt;/span> &lt;span class="n">IntPredicate&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">accept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Boolean&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不使用SAM语法，实现这个接口的写法是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="c1">// Creating an instance of a class
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">isEven&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">object&lt;/span> &lt;span class="err">: &lt;/span>&lt;span class="nc">IntPredicate&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">accept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Boolean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">%&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用SAM语法，可以直接简化为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="c1">// Creating an instance using lambda
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">isEven&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">IntPredicate&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">it&lt;/span> &lt;span class="p">%&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="函数可见性修饰符">函数可见性修饰符&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/1603766576.png" alt="Java与Kotlin函数可见性修饰符对照表">&lt;/p>
&lt;h3 id="数据类">数据类&lt;/h3>
&lt;p>当在一个类前面声明了&lt;code>data&lt;/code>关键字时，就表明你希望这个类是一个数据类，Kotlin会根据主构造函数中的参数帮你将如下函数自动生成。&lt;/p>
&lt;ul>
&lt;li>&lt;code>eaquals()&lt;/code>/&lt;code>hashCode()&lt;/code>&lt;/li>
&lt;li>&lt;code>toString()&lt;/code>&lt;/li>
&lt;li>&lt;code>componentN()&lt;/code>&lt;/li>
&lt;li>&lt;code>copy()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>另外数据类有一下几个必要条件&lt;/p>
&lt;ol>
&lt;li>
&lt;p>主构造函数只要要有一个属性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所有主构造属性的属性应该标记为&lt;code>var&lt;/code>或者&lt;code>val&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据类不能是 abstract, open, sealed or inner类型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不允许覆写数据类的&lt;code>componentN()&lt;/code>和&lt;code>Copy()&lt;/code>方法&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="常规类">常规类&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Phone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">brand&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">price&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Double&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">phone1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Phone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">6999.99&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">phone2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Phone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">6999.99&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">phone1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;phone1 equals phone2: &amp;#34;&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">phone1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">phone2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">com.github.crazygit.koltlin.demo.Phone@17c68925
phone1 equals phone2: false
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="使用数据类">使用数据类&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">data&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Phone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">brand&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">price&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Double&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">phone1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Phone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">6999.99&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">phone2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Phone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">6999.99&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">phone1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;phone1 equals phone2: &amp;#34;&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">phone1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">phone2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Phone(brand=Apple, price=6999.99)
phone1 equals phone2: true
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="properties-declared-in-the-class-body">Properties declared in the class body&lt;/h4>
&lt;p>在类里面声明属性时，是不会被自动添加到生成的&lt;code>toString()&lt;/code>, &lt;code>equals()&lt;/code>, &lt;code>hashCode()&lt;/code>等方法里面的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">data&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Person1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">data&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Person2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Person1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Jack&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">// Person1(name=Jack, age=10)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Person2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Jack&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">// Person2(name=Jack)
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="使用copy方法复制对象并修改部分属性">使用copy()方法复制对象并修改部分属性&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">jack&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Jack&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">olderJack&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jack&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">copy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jack&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// User(name=Jack, age=1)
&lt;/span>&lt;span class="c1">// 复制对象的同时修改age属性
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">olderJack&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// User(name=Jack, age=2)
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="data-classes-and-destructuring-declarations">Data classes and destructuring declarations&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">data&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">User&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// componentN()方法的用法
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">u&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Jack&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="err">(&lt;/span>&lt;span class="py">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">u&lt;/span> &lt;span class="c1">//注意写法
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Jack，相当于调用u.component1()
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 10， 相当于调用u.component2()
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Kotlin基本语法02</title><link>https://crazygit.wiseturtles.com/2021/06/02/005-kotlin-basic-synatx-02/</link><pubDate>Wed, 02 Jun 2021 11:00:29 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2021/06/02/005-kotlin-basic-synatx-02/</guid><description>&lt;h2 id="lambda表达式和高阶函数">Lambda表达式和高阶函数&lt;/h2>
&lt;p>在Kotlin当中，函数可以像普通变量一样作为参数传递或者作为返回值返回。&lt;/p>
&lt;h3 id="lambda定义">Lambda定义&lt;/h3>
&lt;p>Lambda就是一段可以作为参数传递的代码。Lambda表达式的语法结构&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">{参数名1: 参数类型, 参数名2: 参数类型 -&amp;gt; 函数体}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>函数体中最后一行代码会自动作为Lambda表达式的返回值。&lt;/p>
&lt;h3 id="lambda语法简化流程">Lambda语法简化流程&lt;/h3>
&lt;p>一个完整的lambda表达式用法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">fruits&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">listOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Orange&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Pear&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Grape&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">lambda&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">fruit&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">fruit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">maxLengthFruit&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">fruits&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">maxBy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lambda&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">maxLengthFruit&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>首先，我们不需要单独定义一个lambda变量，而是直接将lambda表达式传入&lt;code>maxBy&lt;/code>函数当中。因此第一步简化为:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">maxLengthFruit&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">fruits&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">maxBy&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="n">fruit&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">fruit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Kotlin当中规定，当Lambda作为最后一个参数时，可以将Lambda表达式移到括号外面。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">maxLengthFruit&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">fruits&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">maxBy&lt;/span>&lt;span class="p">(){&lt;/span> &lt;span class="n">fruit&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">fruit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来，如果该Lambda参数是函数的唯一一个参数的话，可以将函数的括号省略掉:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">maxLengthFruit&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">fruits&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">maxBy&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">fruit&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">fruit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于自动推导机制，Lambda表达式的参数列表大多数时候是不需要声明参数类型的。因此代码可以简化为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">maxLengthFruit&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">fruits&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">maxBy&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">fruit&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">fruit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，当Lambda表达式的参数列表只有一个参数时，也不必声明参数名,而是可以直接使用&lt;code>it&lt;/code>关键字来代替，上面的代码可以简化为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">maxLengthFruit&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">fruits&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">maxBy&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="lambda中的return">Lambda中的return&lt;/h3>
&lt;p>Lambda表达式中，默认把最后一行作为返回值返回，一般不需要使用&lt;code>return&lt;/code>关键字。但是它在结合高阶函数一起使用时，需要注意，比如下面的例子&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">getListSize&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">list&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">listSize&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">run&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;add hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;add world&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;world&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">size&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;current list size is: &lt;/span>&lt;span class="si">$listSize&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">listSize&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 输出
&lt;/span>&lt;span class="c1">// add hello
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的例子中，使用&lt;code>return&lt;/code>语句时会直接结束&lt;code>run()&lt;/code>函数外部的方法，也就是&lt;code>getListSize()&lt;/code>方法,所以看到&lt;code>getListSize()&lt;/code>方法后面的语句都没有被执行。&lt;/p>
&lt;p>如果要只是结束当前Lambda表达式，应该使用下面的写法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">getListSize&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">list&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">listSize&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">run&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;add hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="nd">@run&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;add world&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;world&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">size&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;current list size is: &lt;/span>&lt;span class="si">$listSize&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">listSize&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">getListSize&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 输出
&lt;/span>&lt;span class="c1">// add hello
&lt;/span>&lt;span class="c1">// current list size is: 1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="高阶函数">高阶函数&lt;/h2>
&lt;p>在前面的学习中，我们了解了&lt;code>map&lt;/code>,&lt;code>filter&lt;/code>, &lt;code>with&lt;/code>, &lt;code>run&lt;/code>, &lt;code>apply&lt;/code>等函数，这几个函数有一个共同的特点:&lt;/p>
&lt;p>它们都会要求我们传入一个Lambda表达式作为参数。像这种接收Lambda参数的函数可以称为&lt;strong>具有函数式编程风格的API&lt;/strong>, 而如果想自己实现这样的函数式API，就需要借助&lt;strong>高阶函数&lt;/strong>来实现了&lt;/p>
&lt;h3 id="什么是高阶函数">什么是高阶函数&lt;/h3>
&lt;p>高阶函数就是一个接受函数作为参数，或者把函数作为返回值的函数。&lt;/p>
&lt;p>如果一个函数接收另一个函数作为参数，或者返回值的类型是另外一个函数，那么该函数就被称为&lt;strong>高阶函数&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">num1AndNumber2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">plus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">num1&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">num2&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">minus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">num1&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="n">num2&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">num1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">10&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">num2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">5&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1AndNumber2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">::&lt;/span>&lt;span class="n">plus&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">// 注意第三个参数: 函数引用的写法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1AndNumber2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">::&lt;/span>&lt;span class="n">minus&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的例子中&lt;code>num1AndNumber2&lt;/code>就是一个高阶函数，但是如果每次调用高阶函数都要定义一个与函数参数类型相匹配的函数(如上面的&lt;code>plus&lt;/code>和&lt;code>minus&lt;/code>函数)，就略显麻烦了。&lt;/p>
&lt;p>Kotlin还支持其它多种方式来调用高阶函数,比如Lambda表达式，匿名函数，成员引用等.因此上面的例子可以简化为下面的方式，&lt;code>plus&lt;/code>和&lt;code>minus&lt;/code>函数都不再需要了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">num1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">10&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">num2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">5&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1AndNumber2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">n1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n2&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">n1&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">n2&lt;/span> &lt;span class="p">})&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1AndNumber2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">n1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n2&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">n1&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="n">n2&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="使用高阶函数实现类似标准函数apply的功能">使用高阶函数实现类似标准函数&lt;code>apply&lt;/code>的功能&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">StringBuilder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">StringBuilder&lt;/span>&lt;span class="p">.()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">StringBuilder&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">block&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">fruits&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">listOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Orange&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Pear&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Grape&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">StringBuilder&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">build&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Start eating fruits&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fruit&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">fruits&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;eat &lt;/span>&lt;span class="si">$fruit&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Ate all fruits.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的代码中，给&lt;code>StringBuilder&lt;/code>类定义了扩展函数&lt;code>build&lt;/code>来实现&lt;code>apply&lt;/code>函数的功能。&lt;/p>
&lt;p>这里要注意函数类型参数的声明方式: 它在函数类型的前面加上了&lt;code>StringBuiler.&lt;/code>的语法结构。这才是定义高阶函数的完整语法，在函数类型的前面加上&lt;code>ClassName.&lt;/code>就表示函数类型是定义在哪个类当中的，这样的好处就是当我们在调用&lt;code>build&lt;/code>函数时，Lambda表达式将自动拥有&lt;code>StringBuilder&lt;/code>的上下文，同时这也是&lt;code>apply&lt;/code>函数的实现方式(这里只是一个简化版本的&lt;code>apply&lt;/code>函数实现方式)&lt;/p>
&lt;h3 id="内联函数inline">内联函数(&lt;code>inline&lt;/code>)&lt;/h3>
&lt;p>如下面的高阶函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">num1AndNumber2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">num1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">100&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">num2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">80&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">num1AndNumber2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">n1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n2&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;span class="n">n1&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">n2&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Kotlin的代码最后还是要编译成Java字节码的，但是Java中并没有高阶函数的概念。
那么Kotlin究竟使用了什么魔法让Java支持高阶函数的语法呢?这就要归功于Kotlin的编译器了。Kotlin的编译器会将这些代码转换成Java支持的语法结构。上述的Kotlin代码大致会转成下面的Java代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">num1AndNum2&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">num1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Function&lt;/span> &lt;span class="n">operation&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">operation&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">num1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">100&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">num2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">80&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num1AndNum2&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Function&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Integer&lt;/span> &lt;span class="n">n1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="n">n2&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">n1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">n2&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的代码是进行了调整的，并不是严格对应了Kotlin转换成的Java代码。这里可以看到，&lt;code>num1AndNum2()&lt;/code>函数的第三个参数变成了&lt;code>Function&lt;/code>接口，这个是Kotlin内置的接口，里面有一个待实现的&lt;code>invoke()&lt;/code>函数。而&lt;code>num1AndNum2()&lt;/code>就是调用了&lt;code>Function&lt;/code>接口的&lt;code>invoke()&lt;/code>函数，并将&lt;code>num1&lt;/code>和&lt;code>num2&lt;/code>参数传了进去。&lt;/p>
&lt;p>在调用&lt;code>num1AndNum2()&lt;/code>函数的时候，之前的Lambda表达式在这里变成了&lt;code>Function&lt;/code>接口的匿名类实现，然后在&lt;code>invoke()&lt;/code>函数中实现了&lt;code>n1 + n2&lt;/code>的逻辑，并将结果返回。&lt;/p>
&lt;p>这就是高阶函数背后的实现原理。你会发现，原来我们一直使用的Lambda表达式在底层被转换成了匿名类的实现方式。这就表明，我们每调用一次Lambda表达式，都会创建一个新的匿名类实例，当然也就造成额外的内存和性能开销。&lt;/p>
&lt;p>为了解决这个问题，Kotlin提供了&lt;strong>内联函数&lt;/strong>的功能，它可以将Lambda表达式带来的运行时开销完全消除。&lt;/p>
&lt;p>&lt;strong>内联函数&lt;/strong>的用法非常简单，只需要在定义高阶函数的时候加上&lt;code>inline&lt;/code>关键字的声明即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">inline&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">num1AndNumber2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="内联函数的工作原理">内联函数的工作原理&lt;/h4>
&lt;p>内联函数的工作原理是什么呢？其实并不复杂，就是Kotlin编译器会将内联函数中的代码在编译的时候自动替换到调用它的地方，那么也就不存在运行时的开销了。具体步骤如下:&lt;/p>
&lt;p>原始代码为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">inline&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">num1AndNumber2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">reuslt&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">num1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">100&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">num2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">80&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">num1AndNumber2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">n1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n2&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;span class="n">n1&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">n2&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一步， Kotlin编译器会将Lambda表达式中的代码替换到函数类型参数调用的地方，代码变成下面的形式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">inline&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">num1AndNumber2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">num1&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">num2&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">num1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">100&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">num2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">80&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">num1AndNumber2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第二步， 将内联函数中的全部代码替换到函数调用的地方，最后代码变成下面的形式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">num1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">100&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">num2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">80&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">num1&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">num2&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也正式如此，内联函数才能完全消除Lambda表达式所带来的运行时开销&lt;/p>
&lt;h3 id="noinline">&lt;code>noinline&lt;/code>&lt;/h3>
&lt;p>一个高阶函数中如果接收了两个或者很多的函数类型的参数，这时我们给函数加上&lt;code>inline&lt;/code>关键字，那么Kotlin编译器就会自动将所有引用的Lambda表达式全部进行内联。&lt;/p>
&lt;p>但是，假如我们只想内联其中一个Lambda表达式该怎么办呢？这时就可以使用&lt;code>noinline&lt;/code>关键字。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">inline&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">inlineTest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Unit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">noinline&lt;/span> &lt;span class="n">block2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">Unit&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">TODO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Implementation this&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到，这里使用了&lt;code>inline&lt;/code>关键字声明了&lt;code>inlineTest()&lt;/code>函数，原本&lt;code>block1()&lt;/code>和&lt;code>block2()&lt;/code>这两个函数类型参数所引用的Lambda表达式都会被内联。但是我们在&lt;code>block2&lt;/code>参数的前面加上了&lt;code>noinline&lt;/code>关键字，那么现在只会对&lt;code>block1&lt;/code>参数所引用的Lambda表达式进行内联了，这就是&lt;code>noinline&lt;/code>关键字的作用。&lt;/p>
&lt;p>前面我们已经解释了内联函数的好处？那么为什么Kotlin还要提供一个&lt;code>noinline&lt;/code>关键字来排除内联呢？这是因为内联的函数类型参数在编译的时候会进行代码替换，因此它没有真正的参数属性。&lt;/p>
&lt;p>&lt;strong>非内联的函数参数类型可以自由地传递给其它任何函数，因为它就是一个真实的参数，而内联的函数类型参数只能传递给另外一个内联函数，这也是它的最大局限性&lt;/strong>。&lt;/p>
&lt;p>另外，内联函数和非内联函数还有一个重要的区别，那就是内联函数所引用的Lambada表达式中是可以使用&lt;code>return&lt;/code>关键字来进行函数返回的，而非内联的函数只能进行局部返回。为了说明这个例子，让我们看下面的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">printString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">block&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;printString begin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">block&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;printString end&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;main start&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">str&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">printString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Lambda start&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isEmpty&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="nd">@printString&lt;/span> &lt;span class="c1">// 局部返回
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Lambda finish&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;main end&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//输出
&lt;/span>&lt;span class="c1">// main start
&lt;/span>&lt;span class="c1">// printString begin
&lt;/span>&lt;span class="c1">// Lambda start
&lt;/span>&lt;span class="c1">// printString end
&lt;/span>&lt;span class="c1">// main end
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Lambda表达式中是不允许直接使用&lt;code>return&lt;/code>关键字的，上面使用了&lt;code>return@printString&lt;/code>进行局部返回，并且不再执行Lambda表达式的剩余部分代码。
从输出结果可以看到，除了Lambda表达式中&lt;code>return@printString&lt;/code>语句之后的代码没有打印，其它的日志都是正常打印了的，说明&lt;code>return@printString&lt;/code>确实只能进行局部返回。&lt;/p>
&lt;p>但是我们将&lt;code>printSring()&lt;/code>函数声明成一个内联函数，那么情况就不一样了.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">inline&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">printString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">block&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;printString begin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">block&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;printString end&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;main start&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">str&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">printString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Lambda start&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isEmpty&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="k">return&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Lambda finish&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;main end&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 输出
&lt;/span>&lt;span class="c1">// main start
&lt;/span>&lt;span class="c1">// printString begin
&lt;/span>&lt;span class="c1">// Lambda start
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在的&lt;code>printString()&lt;/code>函数变成了内联函数，我们就可以在Lambda的表达式中使用&lt;code>return&lt;/code>关键字，此时的&lt;code>return&lt;/code>代表的是返回外层的调用函数，也就是&lt;code>main()&lt;/code>函数。&lt;/p>
&lt;h3 id="crossinline">&lt;code>crossinline&lt;/code>&lt;/h3>
&lt;p>&lt;strong>将高阶函数声明成内联函数是一种良好的编程习惯&lt;/strong>, 事实上，绝大多数的高阶函数可以是直接声明成内联函数的，但是也有少部分例外的情况。观察下面的代码:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">inline&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">runRunnable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">runnable&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Runnable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">block&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">runnable&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这点代码在没有加上&lt;code>inline&lt;/code>关键字的时候绝对是可以正常工作的，但是在加上&lt;code>inline&lt;/code>关键字之后，上面的代码在block部分会有错误提示&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Can&amp;#39;t inline &amp;#39;block&amp;#39; here: it may contain non-local returns. Add &amp;#39;crossinline&amp;#39; modifier to parameter declaration &amp;#39;block&amp;#39;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个错误出现的原因解释起来可能会稍微有点复杂。首先，在&lt;code>runRunnable()&lt;/code>函数中，我们创建了一个&lt;code>Runnable&lt;/code>对象，并在&lt;code>Runnable&lt;/code>的Lambda表达式中调用了传入的函数类型参数。而Lambda表达式在编译的时候会被转换成匿名类的实现方式。也就是说，上述代码实际上在匿名类中调用了传入的函数类型参数。&lt;/p>
&lt;p>而内联函数所引用的Lambda表达式允许使用&lt;code>return&lt;/code>关键字进行函数返回，但是由于我们是在匿名类中调用的函数类型参数，此时是不可能进行外层调用函数返回的，最多只能对匿名类中的函数调用进行返回，因此这里就出现了上述错误。&lt;/p>
&lt;p>&lt;strong>也就是说，如果我们在高阶函数中创建了Lambda或者匿名的实现，并且在这些实现中调用了函数类型参数，此时再将高阶函数声明为内联函数，就一定会提示错误。&lt;/strong>&lt;/p>
&lt;p>借助&lt;code>crossinline&lt;/code>关键字就可以很好地解决这个问题:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">inline&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">runRunnable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">crossinline&lt;/span> &lt;span class="n">block&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">runnable&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Runnable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">block&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">runnable&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里可以看到，在函数类型参数&lt;code>block&lt;/code>前面加上了&lt;code>crossinline&lt;/code>的声明，代码就可以正常编译通过了。&lt;/p>
&lt;p>那么这个&lt;code>crossinline&lt;/code>关键字又是什么呢?&lt;/p>
&lt;p>前面我们已经分析过，上面的代码之所以在没有添加&lt;code>crossinline&lt;/code>时会报错，就是因为内联函数的Lambda表达式中允许使用&lt;code>return&lt;/code>关键字，和高阶函数的匿名类实现中不允许使用&lt;code>return&lt;/code>关键字之间造成了冲突。而&lt;code>crossinline&lt;/code>关键字就像一个契约，它用于保证在内联函数的Lambda表达式中一定不会使用&lt;code>return&lt;/code>关键字，这样冲突就不存在了，问题也就巧妙地解决了。&lt;/p>
&lt;p>声明了&lt;code>crossinline&lt;/code>之后，我们就无法在调用&lt;code>runRunnable()&lt;/code>函数时的Lambda表达式中使用&lt;code>return&lt;/code>关键字进行函数返回了，但是仍然可以使用&lt;code>return@runRunnable&lt;/code>的写法进行局部返回。总体来说，
除了&lt;code>return&lt;/code>关键字的使用上有所区别之外，&lt;code>crossinline&lt;/code>保留了内联函数的其它所有特性。&lt;/p>
&lt;h2 id="高阶函数的应用">高阶函数的应用&lt;/h2>
&lt;p>高阶函数非常适合简化各种API的调用，一些API的原有用法在使用高阶函数简化之后，不管是在易用性还是可读性方面，都可能会有很大的提升。&lt;/p>
&lt;h3 id="简化sharedpreferences的用法">简化&lt;code>SharedPreferences&lt;/code>的用法&lt;/h3>
&lt;p>原来的用法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">editor&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">getSharedPreferences&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MODE_PRIVATE&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">edit&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">editor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">putString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Tom&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">editor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">putString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">editor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">apply&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的写法更多还是使用的Java的编程方式来编写代码的，利用高阶函数，我们可以简化&lt;code>SharedPreferences&lt;/code>的用法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">SharedPreferences&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">SharedPreferences&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Editor&lt;/span>&lt;span class="p">.()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">editor&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">edit&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//由于open函数内拥有SharedPreferences的上下文，因此这里可以直接使用edit()方法来获取SharedPreferences.Editor对象。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">editor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 由于open函数接受的是一个SharedPreferences.Editor的函数类型参数，因此这里要调用editor.block()对函数类型参数进行调用。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">editor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">apply&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>定义好上面的函数之后，以后我们只需要在项目中使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="n">getSharedPreferences&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MODE_PRIVATE&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">open&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">putString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Tom&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">putString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相比之下，代码简化了很多。&lt;/p>
&lt;p>其实Google提供的KTX扩展库中已经包含了上述&lt;code>SharedPreferences&lt;/code>的简化用法。实际上，我们可以在项目中直接使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="n">getSharedPreferences&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MODE_PRIVATE&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">edit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">putString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Tom&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">putString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Kotlin基本语法01</title><link>https://crazygit.wiseturtles.com/2021/05/31/004-kotlin-basic-synatx-01/</link><pubDate>Mon, 31 May 2021 10:25:29 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2021/05/31/004-kotlin-basic-synatx-01/</guid><description>&lt;h2 id="语言特点">语言特点&lt;/h2>
&lt;p>Kotlin可以编译成Java字节码，也可以编译成JavaScript字节码，方便在没有JVM的设备上运行。&lt;/p>
&lt;h2 id="基本语法">基本语法&lt;/h2>
&lt;p>Kotlin语言是严格区分大小写的。&lt;/p>
&lt;h3 id="变量声明">变量声明&lt;/h3>
&lt;p>在&lt;code>Kotlin&lt;/code>中定义一个变量，只允许在变量前声明两种关键字:
&lt;code>val&lt;/code>和&lt;code>var&lt;/code>&lt;/p>
&lt;h3 id="const-val和val的区别">&lt;code>const val&lt;/code>和&lt;code>val&lt;/code>的区别&lt;/h3>
&lt;ul>
&lt;li>&lt;code>val&lt;/code>: 相当于Java中的&lt;code>private final static&lt;/code>&lt;/li>
&lt;li>&lt;code>const val&lt;/code>: 相当于Java中的&lt;code>public final static&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>定义常量时，优先考虑使用&lt;code>const val&lt;/code>&lt;/p>
&lt;h3 id="空值处理">空值处理&lt;/h3>
&lt;p>安全调用符&lt;code>?.&lt;/code>，专门用于调用可空类型变量中的成员方法或属性，其语法格式为&lt;code>变量?.成员&lt;/code>。其作用是判断变量是否为&lt;code>null&lt;/code>，如果不为&lt;code>null&lt;/code>才调用变量的成员方法或者属性。&lt;/p>
&lt;p>使用&lt;code>?.&lt;/code>调用可空变量的属性时，如果当前变量为空，则程序编译也不会报错，而是返回一个null值。&lt;/p>
&lt;p>Kotlin中提供了一个Elvis操作符&lt;code>?:&lt;/code>，通过Elvis操作符&lt;code>?:&lt;/code>, 其语法格式为&lt;code>表达式?:表达式&lt;/code>。如果左侧表达式非空，则返回左侧表达式的值，否则返回右侧表达式的值。当且仅当左侧为空时，才会对右侧表达式求值。&lt;/p>
&lt;p>通过非空断言（&lt;code>!!.&lt;/code>）来调用可空类型变量的成员方法或属性。使用非空断言时，调用变量成员方法或属性的语法结构为&lt;code>变量!!.成员&lt;/code>。非空断言&lt;code>!!.&lt;/code>会将任何变量（可空类型变量或者非空类型变量）转换为非空类型的变量，若该变量为空则抛出异常。&lt;/p>
&lt;h3 id="数据类型">数据类型&lt;/h3>
&lt;p>Kotlin完全抛弃了Java中的基本数据类型，全部使用对象类型。Kotlin语言中的数据类型不区分基本数据类型和引用数据类型，分别为数值型、字符型、布尔型、数组型、字符串型。&lt;/p>
&lt;p>Kotlin中每个字符类型变量都会占用2个字节。在给&lt;code>Char&lt;/code>类型的变量赋值时，需要用一对英文半角格式的单引号&lt;code>' '&lt;/code>把字符括起来。&lt;/p>
&lt;p>数组是用&lt;code>Array&lt;/code>表示，其中数值类型、布尔类型、字符类型都有数组的表现形式&lt;/p>
&lt;p>这些数组类型变量的初始化有两种方式，一种是以&lt;code>数据类型ArrayOf()&lt;/code>方法进行初始化，另一种是以&lt;code>arrayOf()&lt;/code>方法进行初始化。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="c1">// 声明数组变量的两种方式
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">intArray&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">intArrayOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">intArray2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">arrayOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">intArray&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">contentToString&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">intArray2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">contentToString&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不能使用&lt;code>stringArrayOf()&lt;/code>方法创建字符串类型数组，因为&lt;code>String&lt;/code>不属于基本数据类型。要想在Kotlin中声明字符串数组，需要使用&lt;code>Array＜String＞&lt;/code>，并且对应的初始化数组的方法也相应变成了&lt;code>arrayOf()&lt;/code>，这种初始化方式对于其他类型的数组同样适用。&lt;/p>
&lt;h3 id="运算符">运算符&lt;/h3>
&lt;p>在进行取模&lt;code>(%）&lt;/code>运算时，运算结果的正负取决于被模数（&lt;code>%&lt;/code>左边的数）的符号，与模数（&lt;code>%&lt;/code>右边的数）的符号无关。例如&lt;code>（-1）%2=-1&lt;/code>，而&lt;code>1%（-2）=1&lt;/code>。&lt;/p>
&lt;p>&lt;code>&amp;amp;&amp;amp;&lt;/code>当运算符左边的表达式为&lt;code>false&lt;/code>时，运算符右边的表达式不会进行运算，结果为&lt;code>false&lt;/code>，因此&lt;code>&amp;amp;&amp;amp;&lt;/code>被称作短路与。&lt;/p>
&lt;p>同与操作类似，&lt;code>||&lt;/code>表示短路或，当运算符&lt;code>||&lt;/code>的左边为&lt;code>true&lt;/code>时，右边的表达式不会进行运算，结果为&lt;code>true&lt;/code>。&lt;/p>
&lt;h3 id="字符串">字符串&lt;/h3>
&lt;p>字符串是不可变的，字符串中的元素可以使用索引的形式进行访问：即“变量名+角标”的形式，如&lt;code>str[i]&lt;/code>, 也可以用&lt;code>for&lt;/code>循环遍历字符串.&lt;/p>
&lt;p>为了方便字符串的查找，提供了多个函数，如&lt;code>first()&lt;/code>、&lt;code>last()&lt;/code>、&lt;code>get（index）&lt;/code>，分别用于查找字符串中的第1个元素、最后1个元素以及角标为index的元素。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Hello, World&amp;#34;&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1">// H
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">last&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1">// d
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1">// o
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>字符串截取主要使用的是&lt;code>subString()&lt;/code>函数和&lt;code>subSequence()&lt;/code>函数，这两个函数都有重载函数（函数名相同，参数不同)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Hello, World&amp;#34;&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">substring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">// 返回值类型为String
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">subSequence&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">// 返回值类型为CharSequence
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 输出为
&lt;/span>&lt;span class="c1">// llo
&lt;/span>&lt;span class="c1">// llo
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>split()&lt;/code>函数还可以传入多个拆分符，多个拆分符中间只需用逗号分隔即可。返回类型为&lt;code>List&amp;lt;String&amp;gt;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;www.baidu.com&amp;#34;&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">// [www, baidu, com]
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">s2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;www.baidu.com/query&amp;#34;&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">//[www, baidu, com, query]
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此Kotlin提供了&lt;code>trim()&lt;/code>、&lt;code>trimEnd()&lt;/code>等多个函数，其中&lt;code>trim()&lt;/code>用于删除字符串前面的空格，&lt;code>trimEnd()&lt;/code>用于删除字符串后面的字符。&lt;/p>
&lt;p>原生字符串是使用3对引号（&lt;code>&amp;quot;&amp;quot;&amp;quot; &amp;quot;&amp;quot;&amp;quot;&lt;/code>）把所有字符括起来，原生字符串可以有效地保证字符串中原有内容的输出，即使原生字符串中包含转义字符也不会被转义。&lt;/p>
&lt;p>在原生字符串中，使用模板表达式输出&lt;code>$&lt;/code>需要使用&lt;code>${'$'}&lt;/code>，&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s"> Hello\nWorld
&lt;/span>&lt;span class="s"> &lt;/span>&lt;span class="si">${&amp;#39;$&amp;#39;}&lt;/span>&lt;span class="s">200
&lt;/span>&lt;span class="s"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">trimIndent&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 输出
&lt;/span>&lt;span class="c1">// Hello\nWorld
&lt;/span>&lt;span class="c1">// $200
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="区间">区间&lt;/h3>
&lt;ul>
&lt;li>&lt;code>..&lt;/code> 两端都是闭区间[a, b], a&amp;lt;b&lt;/li>
&lt;li>&lt;code>until&lt;/code>左闭右开[a, b), a&amp;lt;b&lt;/li>
&lt;li>&lt;code>downTo&lt;/code>两端都是闭区间[a, b], a &amp;gt; b&lt;/li>
&lt;li>&lt;code>step&lt;/code> 步长&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="c1">// ..重写了运算操作符rangeTo
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">s1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="m">5&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">joinToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;, &amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">// until 是infix函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">s2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="n">until&lt;/span> &lt;span class="m">5&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">joinToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;, &amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">// downTo 是infix函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">s3&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="n">downTo&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">joinToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;, &amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">// 设置步长
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">s4&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="m">10&lt;/span> &lt;span class="n">step&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s4&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">joinToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;, &amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">// 输出
&lt;/span>&lt;span class="c1">// 1, 2, 3, 4, 5
&lt;/span>&lt;span class="c1">// 1, 2, 3, 4
&lt;/span>&lt;span class="c1">// 5, 4, 3, 2, 1
&lt;/span>&lt;span class="c1">// 1, 3, 5, 7, 9
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 使用in关键子判断一个元素属于一个区间
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">10&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">9&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="m">1.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">+&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;fits in range&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">list&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">listOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;c&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 使用!in关键子判断一个元素不属于一个区间
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(-&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="o">!in&lt;/span> &lt;span class="m">0.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lastIndex&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;-1 is out of range&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">!in&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">indices&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;list size is out of valid list indices range, too&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="数组">数组&lt;/h3>
&lt;p>Kotlin中，为了方便获取数组的长度，提供了一个&lt;code>size&lt;/code>属性，在程序中可以通过“数组名.size”的方式来获取数组的长度，即元素的个数。&lt;/p>
&lt;p>在Kotlin中，如果创建的数组对象没有被初始化，则当访问数组中的元素时，程序会报错并提示数组对象必须初始化。脚下留心: 数组中的索引不能超出索引的范围&lt;/p>
&lt;p>通过数组的&lt;code>withIndex()&lt;/code>方法来遍历并打印数组中元素对应的角标和元素。&lt;/p>
&lt;p>除了使用数组的&lt;code>indexOf()&lt;/code>方法来查找指定元素中第1个元素的角标之外，还可以通过数组的&lt;code>indexOfFirst()&lt;/code>方法来查找指定元素中第1个元素的角标。&lt;/p>
&lt;p>通过数组的&lt;code>lastIndexOf()&lt;/code>方法来查找，该方法中传递的参数就是需要查找的元素。&lt;/p>
&lt;p>除了调用数组的&lt;code>lastIndexOf()&lt;/code>方法来查找指定元素的角标之外，还可以通过数组的&lt;code>indexOfLast()&lt;/code>方法来查找指定元素的最后一个角标&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">arrayOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;d&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">index&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">indexOfLast&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">it&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;d&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="is和is操作符">&lt;code>is&lt;/code>和&lt;code>!is&lt;/code>操作符&lt;/h3>
&lt;p>用于检查一个变量是否为某个类型的对象&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">obj&lt;/span> &lt;span class="p">=&lt;/span>&lt;span class="s2">&amp;#34;xxx&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span> &lt;span class="k">is&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span> &lt;span class="o">!is&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// same as !(obj is String)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Not a String&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="类型自动转换">类型自动转换&lt;/h3>
&lt;p>大多数情况下，我们都不需要显示显示转换变量类型，编译器会根据&lt;code>is&lt;/code>操作符号自动进行转换&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">demo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="k">is&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// x is automatically cast to String
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>when&lt;/code>语句时，类型自动转换同样存在&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">when&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">is&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">is&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">is&lt;/span> &lt;span class="n">IntArray&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="非安全的类型转换">非安全的类型转换&lt;/h3>
&lt;p>当使用&lt;code>as&lt;/code>(中缀infix操作符)进行类型转换失败时，会抛出异常，这样的转换被称为非安全的类型转换&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">String&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的例子中，当&lt;code>y&lt;/code>是&lt;code>null&lt;/code>时，会抛出异常&lt;/p>
&lt;p>使用下面的形式可以解决这个问题&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">?&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="安全的类型转换">安全的类型转换&lt;/h3>
&lt;p>使用&lt;code>as?&lt;/code>进行类型转换时，在转换失败时会返回&lt;code>null&lt;/code>，而不是抛出异常，这样的类型转换被称为安全的类型转换&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="k">as&lt;/span>&lt;span class="err">？&lt;/span> &lt;span class="n">String&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="包管理">包管理&lt;/h2>
&lt;h3 id="默认导入的包">默认导入的包&lt;/h3>
&lt;p>Kotlin中，默认情况下自动导入了下面的包&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/index.html">kotlin.*&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/index.html">kotlin.annotation.*&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index.html">kotlin.collections.*&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.comparisons/index.html">kotlin.comparisons.*&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/index.html">kotlin.io.*&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/index.html">kotlin.ranges.*&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/index.html">kotlin.sequences.*&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/index.html">kotlin.text.*&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>另外，根据使用的平台不同，额外还导入了如下包&lt;/p>
&lt;ul>
&lt;li>JVM:
&lt;ul>
&lt;li>java.lang.*&lt;/li>
&lt;li>&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/index.html">kotlin.jvm.*&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>JS:
&lt;ul>
&lt;li>&lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/index.html">kotlin.js.*&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="添加导入的包">添加导入的包&lt;/h3>
&lt;p>使用&lt;code>import&lt;/code>关键字可以定义需要添加的包&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="c1">// 导入单个
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">import&lt;/span> &lt;span class="nn">org.example.Message&lt;/span> &lt;span class="c1">// Message is now accessible without qualification
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 导入多个
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">import&lt;/span> &lt;span class="nn">org.example.*&lt;/span> &lt;span class="c1">// everything in &amp;#39;org.example&amp;#39; becomes accessible
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>as&lt;/code>关键字可以重命名包导入的对象，解决冲突问题&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">import&lt;/span> &lt;span class="nn">org.test.Message&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">testMessage&lt;/span> &lt;span class="c1">// testMessage stands for &amp;#39;org.test.Message&amp;#39;
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="函数">函数&lt;/h2>
&lt;h3 id="函数声明">函数声明&lt;/h3>
&lt;p>函数使用&lt;code>fun&lt;/code>关键字声明。对于参数，不仅必须声明其名称，还必须声明其类型，并且必须声明函数返回值的类型。函数的主体通常是一个代码块，用花括号括起来&lt;/p>
&lt;h3 id="函数返回值">函数返回值&lt;/h3>
&lt;p>与&lt;code>Python&lt;/code>相反，在函数末尾省略&lt;code>return&lt;/code>不会隐式返回&lt;code>null&lt;/code>；如果函数要返回&lt;code>null&lt;/code>，则必须使用&lt;code>return null&lt;/code>。&lt;/p>
&lt;p>如果一个函数不需要任何返回值，则该函数应该声明返回类型为&lt;code>Unit&lt;/code>,类似于Java中的void。当函数的返回值类型为Unit时，可以省略不写Unit。（或者根本不声明返回类型，在这种情况下，返回类型默认为&lt;code>Unit&lt;/code>）。在这样的函数中，可能根本没有&lt;code>return&lt;/code> 语句，或只有&lt;code>return&lt;/code>。&lt;/p>
&lt;p>&lt;code>Unit&lt;/code>是一个单例对象（在&lt;code>Python&lt;/code> 中也恰好是&lt;code>None&lt;/code>），也是该对象的类型，它表示&lt;strong>此函数不会返回任何信息&lt;/strong>&lt;/p>
&lt;h3 id="vararg可选参数">&lt;code>vararg&lt;/code>可选参数&lt;/h3>
&lt;p>使用关键字&lt;code>vararg&lt;/code>,函数可以接受任意数量的参数，类似于&lt;code>Python&lt;/code>中的 &lt;code>*args&lt;/code>，但它们必须都属于同一类型。与&lt;code>Python&lt;/code>不同的是，可以在可变参数之后声明其他位置参数，但最多可以有一个可变参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">countAndPrintArgs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">vararg&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 输出 3
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 输出 1，2，3
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">countAndPrintArgs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以使用包含所有可变参数的一个&lt;strong>数组&lt;/strong>（&lt;em>而不是列表或任何其他可迭代对象&lt;/em>）来调用可变参数函数，使用&lt;code>*&lt;/code>运算符（与 Python 相同的语法）将数组展开：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">numbers&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">listOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">countAndPrintArgs&lt;/span>&lt;span class="p">(*&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toIntArray&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="命名参数">命名参数&lt;/h3>
&lt;p>&lt;code>Kotlin&lt;/code>中没有&lt;code>**kwargs&lt;/code>，但是可以定义具有默认值的可选参数，并且在调用函数时可以选择命名部分或所有参数（无论它们是否具有默认值）。具有默认值的参数仍必须明确指定其类型。像在&lt;code>Python&lt;/code>中一样，已命名的参数可以在调用时随意重新排序：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">decimal&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Double&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">integer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">text&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">TODO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Implement this method&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3.14&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">text&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Bye&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">integer&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">42&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">integer&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">12&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">decimal&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">3.4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="函数默认值">函数默认值&lt;/h3>
&lt;p>在&lt;code>Python&lt;/code>中，默认值的表达式只在函数定义时计算一次。这导致了一个经典的陷阱，当开发人员希望每次调用没有传递&lt;code>numbers&lt;/code>参数的函数时，都得到一个新的空列表，但是实际上每次都使用相同的列表：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">tricky&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[]):&lt;/span> &lt;span class="c1"># Bug：每次调用都会使用相同的列表！&lt;/span>
&lt;span class="n">numbers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">tricky&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">tricky&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">tricky&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>依次输出&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">[1]
[1, 2]
[1, 2, 3]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在&lt;code>Kotlin&lt;/code>中，每次调用函数时，都会计算默认值的表达式。因此，只要使用在每次求值时生成新列表的表达式，就可以避免上述陷阱&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">tricky&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MutableList&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">mutableListOf&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">tricky&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">tricky&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">tricky&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">[1]
[2]
[3]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="函数的简化写法">函数的简化写法&lt;/h3>
&lt;p>当一个函数中只有一行代码时，&lt;code>Kotlin&lt;/code>允许我们不写函数体，直接将唯一的一行代码写在函数定义的尾部，中间等号连接即可。
如:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">largerNumber&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以直接写成如下形式，其中&lt;code>return&lt;/code>关键字也省略掉了，等号足以表达返回值的意思&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">largeNumber&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于自动推导机制，我们知道&lt;code>max&lt;/code>函数会返回&lt;code>Int&lt;/code>类型，因此上面的代码还可以简化成&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">largerNumber&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="函数重载">函数重载&lt;/h3>
&lt;p>在&lt;code>Python&lt;/code>中，函数名称在模块或类中必须唯一。而在&lt;code>Kotlin&lt;/code>中，可以&lt;strong>重载&lt;/strong>函数，即可以有多个具有相同名称的函数声明。&lt;/p>
&lt;p>重载的函数必须通过其&lt;strong>参数列表&lt;/strong>相互区分(参数列表的类型与返回类型一起被称为&lt;strong>函数签名&lt;/strong>，但是返回类型不能用于消除重载函数的歧义)。例如，可以在同一个文件中同时声明这两个函数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">number&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Double&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">number&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在调用时，要使用的函数取决于参数的类型：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="n">square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 调用第一个函数；结果为 16 (Int)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3.14&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 调用第二个函数；结果为 9.8596 (Double)
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>尽管此示例恰好使用相同的表达式，但这不是必须的。如果需要，重载的函数可以做完全不同的事情（尽管可以使行为截然不同的函数互相重载，但是代码可能会造成混乱）。&lt;/p>
&lt;h3 id="todo函数">TODO函数&lt;/h3>
&lt;p>Kotlin标准库中提供了一个&lt;code>TODO&lt;/code>函数用于标记没有完成的代码，调用时会自动抛出&lt;code>NotImplementedError&lt;/code>异常。并且它的返回值是&lt;code>Nothing&lt;/code>类型，所以使用它可以不考虑返回值的类型&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">calcTaxes&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">BigDecimal&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">TODO&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Waiting for feedback from accounting&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="中缀函数infix">中缀函数infix&lt;/h3>
&lt;p>在创建&lt;code>map&lt;/code>集合的时候，我们用到了&lt;code>to&lt;/code>这样的语法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">fruits&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">mapOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Apple&amp;#34;&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Orange&amp;#34;&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Banana&amp;#34;&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">fruits&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$name&lt;/span>&lt;span class="s2"> =&amp;gt; &lt;/span>&lt;span class="si">$index&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>首先&lt;code>to&lt;/code>并不是Kotlin中的关键字，之所以能够使用&lt;code>A to B&lt;/code>这样的语法结构，是因为Kotlin提供了一种高级语法糖特性: &lt;code>infix&lt;/code>函数。 &lt;code>infix&lt;/code>函数并不是什么难理解的事物，它只是把编程语言的调用语法规则调整了一下而已，如果&lt;code>A to B&lt;/code>这样的写法，实际上等价于&lt;code>A.to(B)&lt;/code>，&lt;code>infix&lt;/code>函数允许我们将函数调用时的小数点，括号等计算机相关的语法去掉，从而使用一种更接近英语的语法来编程。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">infix&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">beginWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">startsWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 我们即可以向普通函数一样使用，也可以使用infix函数的语法糖特性
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Apple&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">beginWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;A&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Apple&amp;#34;&lt;/span> &lt;span class="n">beginWith&lt;/span> &lt;span class="s2">&amp;#34;A&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>infix&lt;/code>函数有3个比较严格的条件&lt;/p>
&lt;ol>
&lt;li>&lt;code>infix&lt;/code>函数是不能定义成顶层函数的，它必须是某个类的成员函数，可以使用扩展函数的方式来将它定义到某个类当中。&lt;/li>
&lt;li>&lt;code>infix&lt;/code>函数必须接收且只能接收一个参数，至于参数类型是没有限制的。&lt;/li>
&lt;li>参数不能是可变参数，并且要没有默认值&lt;/li>
&lt;/ol>
&lt;p>只有同时满足这3点，infix函数的语法糖才具备使用条件。&lt;/p>
&lt;h3 id="函数扩展">函数扩展&lt;/h3>
&lt;p>不少现代的高级编程语言中都有扩展函数这个概念,Java却一直都不支持，但是Kotlin对扩展函数进行了很好的支持。&lt;/p>
&lt;h4 id="什么是扩展函数-">什么是扩展函数 ？&lt;/h4>
&lt;p>扩展函数表示即使在不修改某个类的源码的情况下，仍然可以打开这个类，向该类添加新的函数。&lt;/p>
&lt;p>扩展函数的语法结构为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">ClassName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">methodName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">param1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">param2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相比与定义一个普通的函数，定义扩展函数只需要在函数名的前面添加一个&lt;code>ClassName.&lt;/code>的语法结构，就表示将该函数添加到指定的类中了。这里的ClassName称为&lt;code>receiver type&lt;/code>&lt;/p>
&lt;p>比如，向&lt;code>String&lt;/code>类中添加一个统计字符串中包含字母个数的函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lettersCount&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">var&lt;/span> &lt;span class="py">count&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">char&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isLetter&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">count&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">count&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里需要注意，我们将&lt;code>lettersCount()&lt;/code>函数定义为&lt;code>String&lt;/code>类的扩展函数，那么函数中就自动拥有了&lt;code>String&lt;/code>实例的上下文。因此&lt;code>lettersCount()&lt;/code>函数就不再需要接收一个字符串参数了，而是直接使用&lt;code>this&lt;/code>即可，因为现在&lt;code>this&lt;/code>就代表着字符串本身。&lt;/p>
&lt;p>然后我们就可以像调用&lt;code>String&lt;/code>类自带的函数一样调用它了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">count&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;ABC#$$123EFG&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lettersCount&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="最佳实践">最佳实践&lt;/h4>
&lt;p>当我们希望向&lt;code>String&lt;/code>类中添加一个扩展函数时，建议先先创建一个&lt;code>String.kt&lt;/code>文件。文件名虽然没有固定的要求，但是建议向哪个类添加扩展函数时，就定义一个同名的Kotlin文件，这样便于后期查找。&lt;/p>
&lt;p>当然，扩展函数也是可以定义在任何一个现有的类当中的，并不一定要创建新的文件。不过通常来说，最好将它定义成顶层方法，这样可以让扩展函数拥有全局的访问域。&lt;/p>
&lt;h4 id="扩展函数是静态扩展">扩展函数是静态扩展&lt;/h4>
&lt;p>调用扩展函数时，是根据声明时的类型来决定调用方法的，而不是实际运行时的类型，例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">open&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Shape&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Rectangle&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Shape&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">Shape&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Shape&amp;#34;&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">Rectangle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Rectangle&amp;#34;&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">printClassName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Shape&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getName&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 这里传的参数虽然是Rectangle,
&lt;/span>&lt;span class="c1">// 但是printClassName声明的参数类型是Shape
&lt;/span>&lt;span class="c1">// 所以结果仍然是Shape
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">printClassName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Rectangle&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1">// Shape
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="扩展函数无法覆盖原始类里已有的同名函数">扩展函数无法覆盖原始类里已有的同名函数&lt;/h4>
&lt;p>当扩展函数的名称和原始类的名称一样时，始终会调用原始类里的函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Example&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">printFunctionType&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Class method&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">Example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">printFunctionType&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Extension function&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">Example&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">printFunctionType&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// Class method
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然，在扩展函数里对原始类的函数重载是可以的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Example&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">printFunctionType&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Class method&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">Example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">printFunctionType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Extension function&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">Example&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">printFunctionType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Extension function
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="nullable-receiver">Nullable receiver&lt;/h4>
&lt;p>扩展函数的&lt;code>receiver&lt;/code>同样可以为空.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">Any&lt;/span>&lt;span class="o">?.&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;null&amp;#34;&lt;/span>
&lt;span class="c1">// after the null check, &amp;#39;this&amp;#39; is autocast to a non-null type, so the toString() below
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// resolves to the member function of the Any class
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">toString&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="扩展属性">扩展属性&lt;/h3>
&lt;p>除了扩展函数之外，同样支持扩展属性。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="py">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;.&lt;/span>&lt;span class="n">lastIndex&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>
&lt;span class="k">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不过由于扩展属性同样不能修改原始类的代码，因此扩展属性只能通过&lt;code>getter&lt;/code>或&lt;code>setter&lt;/code>&lt;/p>
&lt;p>方法来实现，没法直接扩展&lt;/p>
&lt;p>例如，下面的写法就是错误的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">House&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">number&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="c1">// error: initializers are not allowed for extension properties
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="伴生对象扩展companion-object-extensions">伴生对象扩展(&lt;code>Companion object extensions&lt;/code>)&lt;/h3>
&lt;p>如果一个类里面包含伴生类，那么伴生类同样是可以扩展的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">companion&lt;/span> &lt;span class="k">object&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// will be called &amp;#34;Companion&amp;#34;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 注意伴生对象的recevier写法
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">fun&lt;/span> &lt;span class="nf">MyClass&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Companion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">printCompanion&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;companion&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">MyClass&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">printCompanion&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="将扩展函数作为类成员定义">将扩展函数作为类成员定义&lt;/h4>
&lt;p>一般情况下，我们是直接在包名顶级下定义扩展函数的。同样也可以在类里面定义扩展函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Host&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">hostname&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">printHostname&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hostname&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Connection&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">host&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Host&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">port&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">printPort&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">Host&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">printConnectionString&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printHostname&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// calls Host.printHostname()
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">printPort&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// calls Connection.printPort()
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">connect&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="cm">/*...*/&lt;/span>
&lt;span class="n">host&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">printConnectionString&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// calls the extension function
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">Connection&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Host&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;kotl.in&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="m">443&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">connect&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="c1">//Host(&amp;#34;kotl.in&amp;#34;).printConnectionString(443) // error, the extension function is unavailable outside Connection
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="运算符重载">运算符重载&lt;/h3>
&lt;p>我们可以对&lt;code>+&lt;/code>, &lt;code>-&lt;/code>, &lt;code>*&lt;/code>,&lt;code>/&lt;/code>等运算进行重载，实现将任意两个对象进行相加，相减等操作。&lt;/p>
&lt;p>运算符重载使用的是&lt;code>operator&lt;/code>关键字，只要在&lt;strong>指定的函数&lt;/strong>前面加上&lt;code>operator&lt;/code>关键字，就可以实现运算符的重载了。指定的函数指的是呢?不同的运算符对应的指定函数是不一样，比如加号运算符对应的是&lt;code>plus()&lt;/code>函数,减号运算符对应的是&lt;code>minus()&lt;/code>函数。具体运算符和实际对应的函数关系如下表:&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/1603848776.png" alt="运算符和函数关系表">&lt;/p>
&lt;p>如果想实现让两个类相加的功能，那么它的语法结构为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Obj&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">operator&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">plus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Obj&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Obj&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">//处理相加的逻辑
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上述结构中，关键字&lt;code>operator&lt;/code>和函数名&lt;code>plus&lt;/code>都是固定不变的，而接收的参数和函数返回值可以根据实际逻辑自行设定。上述代码就表示一个&lt;code>Obj&lt;/code>对象与另外一个&lt;code>Obj&lt;/code>对象相加，最终返回一个新的&lt;code>Obj&lt;/code>对象。对应的调用方式如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">obj1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Obj&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">obj2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Obj&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">obj3&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">obj1&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">obj2&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>obj1 + obj2&lt;/code>这种语法看上去很神奇，但其实就是Kotlin给我们提供的一种语法糖，它会在编译的时候转换成&lt;code>obj1.plus(obj2)&lt;/code>的调用方式。&lt;/p>
&lt;p>实际例子&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">class&lt;/span> &lt;span class="nc">Money&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">operator&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">plus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">money&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Money&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Money&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Money&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">money&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">operator&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">plus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">newValue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Money&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">Money&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">newValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">m1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Money&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">m2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Money&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">50&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">m1&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">m2&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">m1&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="m">20&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的例子，通过函数重载和运算符重载，不仅实现了两个&lt;code>Money&lt;/code>对象直接相加，也可以让&lt;code>Money&lt;/code>对象和一个&lt;code>Int&lt;/code>对象直接相加。&lt;/p>
&lt;h3 id="结合扩展函数和运算符重载this作用域声明">结合扩展函数和运算符重载（this作用域声明）&lt;/h3>
&lt;p>实现一个重复字符串乘以数字的效果，类似python中的&lt;code>str * number&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">operator&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">times&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">outerThis&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">this&lt;/span> &lt;span class="c1">// 这里的this表示String对象。将字符串this对象的引用赋值给一个变量，便于在下面引用
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">StringBuilder&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">run&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// append(this) // 这里的this表示StringBuilder()对象，所以这里不能用this,
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outerThis&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">toString&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;abc&amp;#34;&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 输出abcabc
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的例子中用了一个临时变量来保存外部的String对象的引用。实际上在Kotlin中有更简单的写法，直接通过&lt;a href="https://Kotlinlang.org/docs/reference/this-expressions.html">&lt;code>this@label&lt;/code>的方法&lt;/a>指明当前的&lt;code>this&lt;/code>属于哪个作用域。上面的例子即是&lt;code>this@times&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="k">operator&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">times&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">StringBuilder&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">run&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="nd">@times&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">toString&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;abc&amp;#34;&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="m">2&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 输出abcabc
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Kotlin基本数据类型</title><link>https://crazygit.wiseturtles.com/2021/05/28/003-kotlin-basic-types/</link><pubDate>Fri, 28 May 2021 11:50:29 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2021/05/28/003-kotlin-basic-types/</guid><description>&lt;p>在Kotlin语言中，&lt;strong>一切皆对象&lt;/strong>。因此，我们可以调用任意类型变量的属性或方法。比如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="c1">// {}是一个空的Lamba表达式，我们也可以通过它调用标准库中的also函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">({}.&lt;/span>&lt;span class="n">also&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;call function on any variable&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="基本数据类型httpskotlinlangorgdocsbasic-typeshtml">&lt;a href="https://kotlinlang.org/docs/basic-types.html">基本数据类型&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>numbers&lt;/li>
&lt;li>booleans&lt;/li>
&lt;li>characters&lt;/li>
&lt;li>strings&lt;/li>
&lt;li>arrays&lt;/li>
&lt;/ul>
&lt;h2 id="numbers">Numbers&lt;/h2>
&lt;h3 id="integer-types">Integer types&lt;/h3>
&lt;ul>
&lt;li>Byte&lt;/li>
&lt;li>Short&lt;/li>
&lt;li>Int&lt;/li>
&lt;li>Long&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">oneByte&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Byte&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="c1">// Byte
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">oneShort&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Short&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="c1">//Short
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">one&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="c1">// Int
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">oneLong&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1L&lt;/span> &lt;span class="c1">// Long, 后面要接L后缀
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="floating-point-types">Floating-point types﻿&lt;/h3>
&lt;ul>
&lt;li>Float&lt;/li>
&lt;li>Double&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">oneDouble&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1.0&lt;/span> &lt;span class="c1">// Double，小数默认都是Double类型
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">oneFloat&lt;/span>&lt;span class="p">=&lt;/span> &lt;span class="m">1.0f&lt;/span> &lt;span class="c1">// Float, 后面需要跟f后缀(大小写都可以)
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="字面表示方式">字面表示方式&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="c1">// 16进制以0x开头
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">hexTen&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0xA&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hexTen&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 10
&lt;/span>&lt;span class="c1">// 2进制以0b开头
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">binFour&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="n">b100&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">binFour&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 4
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// kotlin不支持8进制
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 可以使用下划线让数据更易读
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">oneMillion&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="n">_000_000&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">creditCardNumber&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1234&lt;/span>&lt;span class="n">_5678_9012_3456L&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">socialSecurityNumber&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">999&lt;/span>&lt;span class="n">_99_9999L&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">hexBytes&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0xFF&lt;/span>&lt;span class="n">_EC_DE_5E&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">bytes&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="n">b11010010_01101001_10010100_10010010&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="数字在jvm中的表现形式">数字在JVM中的表现形式&lt;/h3>
&lt;p>在JVM平台中，数字都是作为原始数据类型,比如&lt;code>int&lt;/code>,&lt;code>double&lt;/code>等保存的。&lt;/p>
&lt;p>但是可空类型，比如&lt;code>Int?&lt;/code> 等则会自动装箱为Java中&lt;code>Integer&lt;/code>类型。&lt;/p>
&lt;p>因此，一些引用同一个可空类型的变量，可能属于不同的对象&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">a&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">100&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">boxedA&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">anotherBoxedA&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">10000&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">boxedB&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">b&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">anotherBoxedB&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">b&lt;/span>
&lt;span class="c1">// JVM中会优化Int类型的使用，所以在-128~127直接的Int会被重复使用，不再创建
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">boxedA&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="n">anotherBoxedA&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;span class="c1">// 超出范围的每次都会判断是否引用同一个对象
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">boxedB&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="n">anotherBoxedB&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// false
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">boxedA&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">anotherBoxedA&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">boxedB&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">anotherBoxedB&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// == 比较两个变量值是否相等
&lt;/span>&lt;span class="c1">// === 比较两个变量是否引用的相同的对象
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="数字类型转换">数字类型转换&lt;/h3>
&lt;p>不像Java，Kotlin中的数字类型不会自动转换，无论是从Int转Long，或者Long转Int，都需要显示指定，转换方法如下&lt;/p>
&lt;ul>
&lt;li>&lt;code>toByte(): Byte&lt;/code>&lt;/li>
&lt;li>&lt;code>toShort(): Short&lt;/code>&lt;/li>
&lt;li>&lt;code>toInt(): Int&lt;/code>&lt;/li>
&lt;li>&lt;code>toLong(): Long&lt;/code>&lt;/li>
&lt;li>&lt;code>toFloat(): Float&lt;/code>&lt;/li>
&lt;li>&lt;code>toDouble(): Double&lt;/code>&lt;/li>
&lt;li>&lt;code>toChar(): Char&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>但是大部分时候，都不需要手动指定转换，算术运算符会自动推断类型,比如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">l&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1L&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="c1">// Long + Int =&amp;gt; Long
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="算术运算符">算术运算符&lt;/h3>
&lt;p>类似其它语言，Kotlin支持的运算符如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>+&lt;/code>&lt;/li>
&lt;li>&lt;code>-&lt;/code>&lt;/li>
&lt;li>&lt;code>*&lt;/code>&lt;/li>
&lt;li>&lt;code>/&lt;/code>&lt;/li>
&lt;li>&lt;code>%&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>当然，也可以&lt;a href="https://kotlinlang.org/docs/operator-overloading.html#increments-and-decrements">重载运算符&lt;/a>,以实现其它的效果。&lt;/p>
&lt;p>除法需要注意的是，使用整型做除法时，返回结果也是整型，小数会被自动去掉&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">5&lt;/span> &lt;span class="p">/&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 2
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="p">/&lt;/span> &lt;span class="m">2f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 2.5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="位运算符">位运算符&lt;/h3>
&lt;ul>
&lt;li>有符号左移: &lt;code>shl(bits)&lt;/code> – signed shift left&lt;/li>
&lt;li>有符号右移: &lt;code>shr(bits)&lt;/code> – signed shift right&lt;/li>
&lt;li>无符号右移:&lt;code>ushr(bits)&lt;/code> – unsigned shift right&lt;/li>
&lt;li>与操作: &lt;code>and(bits)&lt;/code> – bitwise &lt;strong>and&lt;/strong>&lt;/li>
&lt;li>或操作:&lt;code>or(bits)&lt;/code> – bitwise &lt;strong>or&lt;/strong>&lt;/li>
&lt;li>异或操作:&lt;code>xor(bits)&lt;/code> – bitwise &lt;strong>xor&lt;/strong>&lt;/li>
&lt;li>按位取反: &lt;code>inv()&lt;/code> – bitwise inversion&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="n">shl&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 4
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="m">6&lt;/span> &lt;span class="n">shr&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// -3
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="n">shr&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 3
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="n">ushr&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 3
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 4
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="n">or&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 6
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="n">xor&lt;/span> &lt;span class="m">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 2
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="m">6.&lt;/span>&lt;span class="n">inv&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1">// -7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>位运算的详细介绍&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.huaweicloud.com/articles/6a4c5ca906ecf547f038d24b834cd578.html">负数的二进制表示方法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/qq_34996727/article/details/86582705">深入理解位运算操作及使用场景&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="unsigned-integers">Unsigned integers﻿&lt;/h3>
&lt;ul>
&lt;li>&lt;code>UByte&lt;/code>: an unsigned 8-bit integer, ranges from 0 to 255&lt;/li>
&lt;li>&lt;code>UShort&lt;/code>: an unsigned 16-bit integer, ranges from 0 to 65535&lt;/li>
&lt;li>&lt;code>UInt&lt;/code>: an unsigned 32-bit integer, ranges from 0 to 2^32 - 1&lt;/li>
&lt;li>&lt;code>ULong&lt;/code>: an unsigned 64-bit integer, ranges from 0 to 2^64 - 1&lt;/li>
&lt;/ul>
&lt;h2 id="booleans">Booleans&lt;/h2>
&lt;p>boolean类型只有&lt;code>true&lt;/code>和&lt;code>false&lt;/code>两个值&lt;/p>
&lt;p>支持的逻辑运算符有:&lt;/p>
&lt;ul>
&lt;li>&lt;code>||&lt;/code> – disjunction (logical &lt;em>OR&lt;/em>)&lt;/li>
&lt;li>&lt;code>&amp;amp;&amp;amp;&lt;/code> – conjunction (logical &lt;em>AND&lt;/em>)&lt;/li>
&lt;li>&lt;code>!&lt;/code>- negation (logical &lt;em>NOT&lt;/em>)&lt;/li>
&lt;/ul>
&lt;p>&lt;code>||&lt;/code> 和 &lt;code>&amp;amp;&amp;amp;&lt;/code> 都是懒惰运算符号。即当返回值能确定时，后面的表达式则不再计算。&lt;/p>
&lt;p>比如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">condition1&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">Boolean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;call get condition1&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">false&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">condition2&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">Boolean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;call get condition2&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">condition1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">condition2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 由于condition1返回false, condition2不会再被调用
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="characters">Characters﻿&lt;/h2>
&lt;p>字符类型，所有的字符类型都是&lt;code>Char&lt;/code>类型，可以用单引号来表示，比如: &lt;code>'1'&lt;/code>&lt;/p>
&lt;p>特殊字符使用&lt;code>\&lt;/code>转义，比如&lt;code>\t&lt;/code>, &lt;code>\n&lt;/code>, &lt;code>\'&lt;/code>, &lt;code>\&amp;quot;&lt;/code>, &lt;code>\\&lt;/code>, &lt;code>\$&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">aChar&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Char&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">aChar&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//prints an extra newline character
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;&lt;/span>&lt;span class="se">\uFF00&lt;/span>&lt;span class="sc">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 使用digitToInt可以把字符转换成数字
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;5&amp;#39;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">digitToInt&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1">// 5
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">digitToInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">radix&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">8&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">// 3
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">digitToInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">radix&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">16&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">// 10
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;k&amp;#39;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">digitToInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">radix&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">36&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">// 20
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// radix argument should be in 2..36
&lt;/span>&lt;span class="c1">// &amp;#39;0&amp;#39;.digitToInt(radix = 1) // will fail
&lt;/span>&lt;span class="c1">// &amp;#39;1&amp;#39;.digitToInt(radix = 100) // will fail
&lt;/span>&lt;span class="c1">// only 0 and 1 digits are valid for binary numbers
&lt;/span>&lt;span class="c1">// &amp;#39;5&amp;#39;.digitToInt(radix = 2) // will fail
&lt;/span>&lt;span class="c1">// radix = 10 is used by default
&lt;/span>&lt;span class="c1">// &amp;#39;A&amp;#39;.digitToInt() // will fail
&lt;/span>&lt;span class="c1">// symbol &amp;#39;+&amp;#39; is not a digit in any radix
&lt;/span>&lt;span class="c1">// &amp;#39;+&amp;#39;.digitToInt() // will fail
&lt;/span>&lt;span class="c1">// Only Latin letters are valid for digits greater than 9.
&lt;/span>&lt;span class="c1">// &amp;#39;β&amp;#39;.digitToInt(radix = 36) // will fail
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="strings">Strings&lt;/h2>
&lt;p>字符串用双引号&lt;code>&amp;quot;&amp;quot;&lt;/code>表示&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">str&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;abcd 123&amp;#34;&lt;/span>
&lt;span class="c1">// 可以遍历str里的每个Char元素
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1">// &amp;#39;a&amp;#39;
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>字符串一旦创建之后是不可改变的，所有关于字符串的操作都是返回了一个新的字符串对象，原来的字符串保持不变&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">str&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;abcd&amp;#34;&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">uppercase&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1">// Create and print a new String object
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// the original string remains the same
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>+&lt;/code>操作符号可以拼接字符串&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;abc&amp;#34;&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="s2">&amp;#34;def&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Kotlin中字符串有两种形式&lt;/p>
&lt;ol>
&lt;li>
&lt;p>包含转义字符的字符串&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Hello, world!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>包含原始字符的字符串(使用三个引号&lt;code>&amp;quot;&amp;quot;&amp;quot;&lt;/code>)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">text&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s"> for (c in &amp;#34;foo&amp;#34;)
&lt;/span>&lt;span class="s"> print(c)
&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以使用&lt;code>trimMargin()&lt;/code>方法来移除开头的边缘符号,默认使用&lt;code>|&lt;/code>作为边缘分隔符&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">withoutMargin1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&amp;#34;ABC
&lt;/span>&lt;span class="s"> |123
&lt;/span>&lt;span class="s"> |456&amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">trimMargin&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">withoutMargin1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// ABC\n123\n456
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// 自定义#符号
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">withoutMargin2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s"> #XYZ
&lt;/span>&lt;span class="s"> #foo
&lt;/span>&lt;span class="s"> #bar
&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">trimMargin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">withoutMargin2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// XYZ\nfoo\nbar
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="字符串模板">字符串模板&lt;/h4>
&lt;p>使用&lt;code>$&lt;/code>可以在字符串中引用变量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">i&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">10&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;i = &lt;/span>&lt;span class="si">$i&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// prints &amp;#34;i = 10&amp;#34;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;abc&amp;#34;&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$s&lt;/span>&lt;span class="s2">.length is &lt;/span>&lt;span class="si">${s.length}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// prints &amp;#34;abc.length is 3&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="arrays">Arrays&lt;/h2>
&lt;p>Kotlin中使用&lt;code>Array&lt;/code>类表示数组类型，重载了&lt;code>[]&lt;/code>来调用&lt;code>Array&lt;/code>类的&lt;code>get&lt;/code>和&lt;code>set&lt;/code>方法，获取数组元素个数可以使用&lt;code>size&lt;/code>属性获取&lt;/p>
&lt;p>可以使用&lt;code>arryOf&lt;/code>和&lt;code>arrayOfNulls&lt;/code>方法来创建数组, 也可以使用&lt;code>Array&lt;/code>类的构造函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">val&lt;/span> &lt;span class="py">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">arrayOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// [1, 2, 3]
&lt;/span>&lt;span class="c1">// 通过索引访问元素
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1">// 2
&lt;/span>&lt;span class="c1">// 通过索引修改元素
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">4&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1">// 4
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 3
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">val&lt;/span> &lt;span class="py">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">arrayOfNulls&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// [null, null, null]
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// Creates an Array&amp;lt;String&amp;gt; with values [&amp;#34;0&amp;#34;, &amp;#34;1&amp;#34;, &amp;#34;4&amp;#34;, &amp;#34;9&amp;#34;, &amp;#34;16&amp;#34;]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">asc&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="n">asc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">forEach&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="primitive-type-arrayshttpskotlinlangorgdocsbasic-typeshtmlprimitive-type-arrays">&lt;a href="https://kotlinlang.org/docs/basic-types.html#primitive-type-arrays">Primitive type arrays﻿&lt;/a>&lt;/h4>
&lt;blockquote>
&lt;p>Kotlin also has classes that represent arrays of primitive types without boxing overhead: &lt;code>ByteArray&lt;/code>, &lt;code>ShortArray&lt;/code>, &lt;code>IntArray&lt;/code>, and so on. These classes have no inheritance relation to the &lt;code>Array&lt;/code> class, but they have the same set of methods and properties. Each of them also has a corresponding factory function:&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="c1">// Array of int of size 5 with values [0, 0, 0, 0, 0]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">arr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">IntArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// e.g. initialise the values in the array with a constant
&lt;/span>&lt;span class="c1">// Array of int of size 5 with values [42, 42, 42, 42, 42]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">arr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">IntArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="m">42&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1">// e.g. initialise the values in the array using a lambda
&lt;/span>&lt;span class="c1">// Array of int of size 5 with values [0, 1, 2, 3, 4] (values initialised to their index value)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">var&lt;/span> &lt;span class="py">arr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">IntArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">it&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Kotlin开发环境搭建</title><link>https://crazygit.wiseturtles.com/2021/05/26/002-kotlin-development-env-setup/</link><pubDate>Wed, 26 May 2021 13:50:29 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2021/05/26/002-kotlin-development-env-setup/</guid><description>&lt;p>kotlin的使用非常方便，只需要下载IntelliJ Idea 或者Android Studio,安装好之后默认就可以直接使用kotlin语言进行开发了。Eclipse也可以安装kotlin插件来使用kotlin做开发。&lt;/p>
&lt;p>IDE的使用虽然方便，但是往往也隐藏了很多技术细节，假如没有IDE,我们该怎么开发呢？&lt;/p>
&lt;p>因此让我们先抛开那些IDE，从最原始的方式开始， 自己独立安装kotlin编译器。&lt;/p>
&lt;h2 id="kotlin编译器安装">Kotlin编译器安装&lt;/h2>
&lt;p>kotlin编译器的安装方式有几种，下面依次介绍一下&lt;/p>
&lt;h3 id="1-手动安装">1. 手动安装&lt;/h3>
&lt;p>从&lt;a href="https://github.com/JetBrains/kotlin/releases/latest">Github Release&lt;/a>页面下载kotlion编译器,解压后放到&lt;code>bin&lt;/code>目录下既可使用&lt;/p>
&lt;h3 id="2-使用sdkman安装适合os-x-linux-cygwin-freebsd-and-solaris系统">2. 使用&lt;code>sdkman&lt;/code>安装(适合OS X, Linux, Cygwin, FreeBSD, and Solaris系统)&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ sdk install kotlin
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3使用homebrew安装适合os-x">3.使用&lt;code>Homebrew&lt;/code>安装((适合OS X)&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ brew update
$ brew install kotlin
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4使用snap安装适合-ubuntu-1604">4.使用snap安装(适合 Ubuntu 16.04+)&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ sudo snap install --classic kotlin
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="验证是否安装成功">验证是否安装成功&lt;/h4>
&lt;p>执行下面命令,能看到正常输出说明安装没有问题，否则请检查安装过程&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ kotlin -version
Kotlin version 1.5.10-release-890 &lt;span class="o">(&lt;/span>JRE 11.0.9+11&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="创建第一个kotlin程序">创建第一个Kotlin程序&lt;/h2>
&lt;p>按照国际惯例，让我们先使用kotlin向世界问好。&lt;/p>
&lt;p>首先创建一个&lt;code>hello.kt&lt;/code>的文件，输入如下内容:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编译&lt;code>hello.kt&lt;/code>文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 类似javac编译&lt;/span>
$ kotlinc hello.kt -include-runtime -d hello.jar
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行那个脚本&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 运行&lt;/span>
$ kotlin hello.jar
&lt;span class="c1"># 或者&lt;/span>
$ java -jar hello.jar
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="使用交互模式repl">使用交互模式REPL&lt;/h2>
&lt;p>直接输入命令&lt;code>kotlin&lt;/code>或者&lt;code>kotlinc-jvm&lt;/code>,进入交互模式。(两个命令效果一样)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ kotlin
Welcome to Kotlin version 1.5.10 &lt;span class="o">(&lt;/span>JRE 11.0.9+11&lt;span class="o">)&lt;/span>
Type :help &lt;span class="k">for&lt;/span> help, :quit &lt;span class="k">for&lt;/span> quit
&amp;gt;&amp;gt;&amp;gt; println&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
Hello World
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="直接作为脚本直接运行">直接作为脚本直接运行&lt;/h2>
&lt;p>作为脚本直接使用有两个条件:&lt;/p>
&lt;ol>
&lt;li>使用&lt;code>kts&lt;/code>作为脚本文件的扩展名&lt;/li>
&lt;li>脚本最顶层必须包含可以执行的语句&lt;/li>
&lt;/ol>
&lt;p>创建一个kotlin的脚本&lt;code>foo.kts&lt;/code>，直接运行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="k">fun&lt;/span> &lt;span class="nf">tricky&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MutableList&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">mutableListOf&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">tricky&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">tricky&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">tricky&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="运行脚本">运行脚本&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ kotlin foo.kts
&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>
&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>
&lt;span class="o">[&lt;/span>3&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="增强的交互工具kihttpsgithubcomkotlinkotlin-interactive-shell">&lt;a href="https://github.com/Kotlin/kotlin-interactive-shell">增强的交互工具KI&lt;/a>&lt;/h2>
&lt;p>默认使用kotlin进入交互模式之后，是没有代码补全，语法高亮等特性的的，这里介绍一个新的工具KI,支持代码补全，语法高亮等特性。&lt;/p>
&lt;p>ki和kotlin之间的关系就好比&lt;code>python&lt;/code>和&lt;code>ipython&lt;/code>的关系&lt;/p>
&lt;h3 id="手动安装">手动安装&lt;/h3>
&lt;p>从&lt;a href="https://github.com/Kotlin/kotlin-interactive-shell/releases">github release&lt;/a> 页面下载安装&lt;/p>
&lt;p>mac系统可以直接使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ brew install ki
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>关于它的使用，可以参考下面的文章&lt;/p>
&lt;p>&lt;a href="https://blog.jetbrains.com/kotlin/2021/04/ki-the-next-interactive-shell-for-kotlin/">ki: The Next Interactive Shell for Kotlin&lt;/a>&lt;/p>
&lt;h2 id="使用ide开发运行代码片段">使用IDE开发运行代码片段&lt;/h2>
&lt;p>当我们使用IDE InteliJ或者Android Studio时，向要快速测试一些代码片段时，可以用下面的方式&lt;/p>
&lt;ul>
&lt;li>
&lt;h3 id="使用草稿scratches">使用草稿（Scratches）&lt;/h3>
&lt;p>IDE 中 &lt;strong>File | New | Scratch file&lt;/strong> and select the &lt;strong>Kotlin&lt;/strong> type.&lt;/p>
&lt;/li>
&lt;li>
&lt;h3 id="工单kotlin-worksheet">工单(kotlin worksheet)&lt;/h3>
&lt;p>right-click the directory in the project tree and select &lt;strong>New | Kotlin Worksheet&lt;/strong>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="使用gradle创建一个kotlin的命令行应用程序">使用Gradle创建一个Kotlin的命令行应用程序&lt;/h2>
&lt;p>&lt;a href="https://docs.gradle.org/current/samples/sample_building_kotlin_applications.html">Building Kotlin Applications Sample&lt;/a>&lt;/p></description></item><item><title>Kotlin学习资料整理</title><link>https://crazygit.wiseturtles.com/2021/05/26/001-kotlin-learning-materials/</link><pubDate>Wed, 26 May 2021 13:48:29 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2021/05/26/001-kotlin-learning-materials/</guid><description>&lt;ul>
&lt;li>
&lt;h2 id="快速入门指南httpskotlinlangorgdocstutorials">&lt;a href="https://kotlinlang.org/docs/tutorials/">快速入门指南&lt;/a>&lt;/h2>
&lt;p>介绍了使用kotlin在各种场景下的开发环境搭建过程，如配合各种IDE使用Kotlin,&lt;/p>
&lt;p>混合&lt;code>Java&lt;/code>开发， 以及结合&lt;code>Javascript&lt;/code>, &lt;code>Android&lt;/code>平台，&lt;code>Navtive&lt;/code>开发，&lt;code>Web&lt;/code>开发等。&lt;/p>
&lt;/li>
&lt;li>
&lt;h3 id="语法学习资料">语法学习资料&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.kotlincn.net/docs/tutorials/kotlin-for-py/introduction.html">写给Python程序员的Kotlin教程&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kotlinlang.org/docs/basic-syntax.html">官方文档&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tech.meituan.com/2018/07/05/kotlin-code-inspect.html">Kotlin代码检查在美团的探索与实践&lt;/a>&lt;/li>
&lt;li>微信读书《Kotlin从 基础到实战》&lt;/li>
&lt;li>微信读书《kotlin核心编程》&lt;/li>
&lt;li>&lt;a href="https://kotlinlang.org/docs/coding-conventions.html">Kotlin编码风格&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h2 id="在线练习">在线练习&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://play.kotlinlang.org/hands-on/overview">Kotlin Hands-On&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://play.kotlinlang.org/byExample/overview">Learn Kotlin by Example&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://play.kotlinlang.org/koans/overview">Kotlin Koans&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul></description></item><item><title>fluentd教程(含实例)</title><link>https://crazygit.wiseturtles.com/2019/11/29/fluentd-tutorial/</link><pubDate>Fri, 29 Nov 2019 15:29:29 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2019/11/29/fluentd-tutorial/</guid><description>&lt;p>fluentd是一个开源的日志收集系统，能够收集各式各样的日志, 并将日志转换成方便机器处理的json格式。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/1574818088.png" alt="fluentd日志架构">&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>不同操作系统的安装方式不同，具体可以参考:&lt;/p>
&lt;p>&lt;a href="https://docs.fluentd.org/installation">官方文档: Installation&lt;/a>&lt;/p>
&lt;p>另外在生产环境中安装Fluentd之前，也需要对操作系统做一些配置，如:&lt;/p>
&lt;ul>
&lt;li>设置好NTP时间同步&lt;/li>
&lt;li>调整允许操作的文件符最大个数&lt;/li>
&lt;li>优化内核中与网络相关的参数等&lt;/li>
&lt;/ul>
&lt;p>具体配置可以参考:&lt;/p>
&lt;p>&lt;a href="https://docs.fluentd.org/installation/before-install">官方文档: Before Installation&lt;/a>&lt;/p>
&lt;p>本文为了便于快速测试，直接使用fluentd的docker镜像来启动fluentd服务。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 下载fluentd镜像&lt;/span>
$ docker pull fluent/fluentd:v1.7-1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="准备配置文件">准备配置文件&lt;/h3>
&lt;p>首先创建一些简单的文件方便测试。本文所有使用到的配置文件都已经上传到github,可以直接下载使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ git clone https://github.com/crazygit/fluentd_demo
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然也可以自己动手完成&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ mkdir fluentd_demo
&lt;span class="c1"># 注意: 本文后续所有命令都在fluentd_demo目录下执行&lt;/span>
$ &lt;span class="nb">cd&lt;/span> fluentd_demo
&lt;span class="c1"># 创建用于保存fluentd的配置文件的etc目录和保存日志文件的log目录&lt;/span>
$ mkdir -p etc log
&lt;span class="c1"># 再创建一个简单的配置文件&lt;/span>
$ cat etc/fluentd_basic_setup.conf
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;lt;source&amp;gt;
@type http
port &lt;span class="m">8888&lt;/span>
&lt;span class="nb">bind&lt;/span> 0.0.0.0
&amp;lt;/source&amp;gt;
&amp;lt;match test.cycle&amp;gt;
@type stdout
&amp;lt;/match&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置文件解释:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>source&lt;/code>部分使用了&lt;code>http&lt;/code>输入插件，在&lt;code>8888&lt;/code>端口启动一个web服务用于收集日志&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>match&lt;/code>部分定义只要日志匹配&lt;code>test.cycle&lt;/code>标签，就将日志输出到标准输出&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>目前不用太关心配置文件的格式，后面会有详细的介绍。&lt;/p>
&lt;p>创建好的目录结构如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ tree
.
├── etc
│   └── fluentd_basic_setup.conf
└── log
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="启动容器">启动容器&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ docker run -p 8888:8888 --rm -v &lt;span class="k">$(&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="k">)&lt;/span>/etc:/fluentd/etc -v &lt;span class="k">$(&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="k">)&lt;/span>/log:/fluentd/log fluent/fluentd:v1.7-1 -c /fluentd/etc/fluentd_basic_setup.conf -v
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>命令参数解释如下:&lt;/p>
&lt;ul>
&lt;li>&lt;code>-p&lt;/code>参数映射容器的&lt;code>8888&lt;/code>端口到宿主机的&lt;code>8888&lt;/code>端口，方便我们直接从宿主机直接访问容器&lt;/li>
&lt;li>第一个&lt;code>-v&lt;/code>参数用于挂载本地的&lt;code>etc&lt;/code>目录到容器内的&lt;code>etc&lt;/code>目录，让容器能够使用本地的配置文件&lt;/li>
&lt;li>第二个&lt;code>-v&lt;/code>参数用于挂载本地的&lt;code>log&lt;/code>目录到容器内的&lt;code>log&lt;/code>目录，便于保存输出的日志文件&lt;/li>
&lt;li>&lt;code>-c&lt;/code>参数用于设置容器内的&lt;code>fluentd&lt;/code>时候启动的使用&lt;code>/fluentd/etc/fluentd_basic_setup.conf&lt;/code>配置文件&lt;/li>
&lt;li>最后一个参数&lt;code>-v&lt;/code>用于设置容器内的&lt;code>fluentd&lt;/code>时候启动的开启&lt;code>verbose&lt;/code>模式，便于调试发现问题。&lt;/li>
&lt;/ul>
&lt;p>正常启动后，能看到如下输出&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">fluentd -c /fluentd/etc/fluentd_basic_setup.conf -v
2019-11-27 02:03:22 +0000 [info]: fluent/log.rb:322:info: parsing config file is succeeded path=&amp;#34;/fluentd/etc/fluentd_basic_setup.conf&amp;#34;
2019-11-27 02:03:22 +0000 [info]: fluent/log.rb:322:info: using configuration file: &amp;lt;ROOT&amp;gt;
&amp;lt;source&amp;gt;
@type http
port 8888
bind &amp;#34;0.0.0.0&amp;#34;
&amp;lt;/source&amp;gt;
&amp;lt;match test.cycle&amp;gt;
@type stdout
&amp;lt;/match&amp;gt;
&amp;lt;/ROOT&amp;gt;
2019-11-27 02:03:22 +0000 [info]: fluent/log.rb:322:info: starting fluentd-1.7.4 pid=6 ruby=&amp;#34;2.5.7&amp;#34;
2019-11-27 02:03:22 +0000 [info]: fluent/log.rb:322:info: spawn command to main: cmdline=[&amp;#34;/usr/bin/ruby&amp;#34;, &amp;#34;-Eascii-8bit:ascii-8bit&amp;#34;, &amp;#34;/usr/bin/fluentd&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;/fluentd/etc/fluentd_basic_setup.conf&amp;#34;, &amp;#34;-v&amp;#34;, &amp;#34;-p&amp;#34;, &amp;#34;/fluentd/plugins&amp;#34;, &amp;#34;--under-supervisor&amp;#34;]
2019-11-27 02:03:23 +0000 [info]: fluent/log.rb:322:info: gem &amp;#39;fluentd&amp;#39; version &amp;#39;1.7.4&amp;#39;
2019-11-27 02:03:23 +0000 [info]: fluent/log.rb:322:info: adding match pattern=&amp;#34;test.cycle&amp;#34; type=&amp;#34;stdout&amp;#34;
2019-11-27 02:03:23 +0000 [info]: fluent/log.rb:322:info: adding source type=&amp;#34;http&amp;#34;
2019-11-27 02:03:23 +0000 [info]: #0 fluent/log.rb:322:info: starting fluentd worker pid=14 ppid=6 worker=0
2019-11-27 02:03:23 +0000 [debug]: #0 fluent/log.rb:302:debug: listening http bind=&amp;#34;0.0.0.0&amp;#34; port=8888
2019-11-27 02:03:23 +0000 [info]: #0 fluent/log.rb:322:info: fluentd worker is now running worker=0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另外，也可以通过环境变量&lt;code>FLUENTD_CONF&lt;/code>设置需要使用的配置文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 下面的命令和上面的是等效的&lt;/span>
$ docker run -p 8888:8888 --rm -v &lt;span class="k">$(&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="k">)&lt;/span>/etc:/fluentd/etc/ -e &lt;span class="nv">FLUENTD_CONF&lt;/span>&lt;span class="o">=&lt;/span>fluentd_basic_setup.conf fluent/fluentd:v1.7-1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="测试">测试&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 任意伪造一个用户登录的日志，向fluentd服务提交日志&lt;/span>
$ curl -i -X POST -d &lt;span class="s1">&amp;#39;json={&amp;#34;action&amp;#34;:&amp;#34;login&amp;#34;,&amp;#34;user&amp;#34;:2}&amp;#39;&lt;/span> http://localhost:8888/test.cycle
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Content-Type: text/plain
Connection: Keep-Alive
Content-Length: &lt;span class="m">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在&lt;code>fluentd&lt;/code>的容器里能看到如下输出&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">2019-11-27 02:05:16.583154500 +0000 test.cycle: {&amp;#34;action&amp;#34;:&amp;#34;login&amp;#34;,&amp;#34;user&amp;#34;:2}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="fluentd事件的生命周期">Fluentd事件的生命周期&lt;/h2>
&lt;h3 id="什么是事件event">什么是事件(Event)&lt;/h3>
&lt;p>正如开篇提到过，Fluentd是一个日志收集系统，那么一条日志消息，在Fluentd里就认为是一个事件(&lt;code>Event&lt;/code>)。&lt;/p>
&lt;h3 id="事件结构">事件结构&lt;/h3>
&lt;p>Fluentd的事件由下面三部分组成&lt;/p>
&lt;ul>
&lt;li>标签(&lt;code>tag&lt;/code>): 用于说明这个事件是哪里产生的，可用于后面的事件路由&lt;/li>
&lt;li>时间(&lt;code>time&lt;/code>): 事件是什么时候发生的，时间格式为: &lt;a href="https://en.wikipedia.org/wiki/Unix_time">Epoch time&lt;/a>, 即Unix时间戳&lt;/li>
&lt;li>记录(&lt;code>record&lt;/code>): 事件内容本身，JSON格式&lt;/li>
&lt;/ul>
&lt;p>所有的输入插件都需要解析原始日志，生成满足上面结构的事件字段，比如，一条Apache的访问日志:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">192.168.0.1 - - [28/Feb/2013:12:00:00 +0900] &amp;#34;GET / HTTP/1.1&amp;#34; 200 777
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过&lt;code>in_tail&lt;/code>输入插件处理之后，将会得到下面的输出&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">tag: apache.access &lt;span class="c1"># 由配置文件指定&lt;/span>
time: &lt;span class="m">1362020400&lt;/span> &lt;span class="c1"># 28/Feb/2013:12:00:00 +0900&lt;/span>
record: &lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;user&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;-&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;method&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;GET&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;code&amp;#34;&lt;/span>:200,&lt;span class="s2">&amp;#34;size&amp;#34;&lt;/span>:777,&lt;span class="s2">&amp;#34;host&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;192.168.0.1&amp;#34;&lt;/span>,&lt;span class="s2">&amp;#34;path&amp;#34;&lt;/span>:&lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="事件的处理流程">事件的处理流程&lt;/h3>
&lt;p>当fluentd收到一个事件之后，会经过一系列的处理流程:&lt;/p>
&lt;ol>
&lt;li>如修改事件的相关字段&lt;/li>
&lt;li>过滤掉一些不关心的事件&lt;/li>
&lt;li>路由事件输出到不同的地方&lt;/li>
&lt;/ol>
&lt;p>下面将一一介绍介绍事件的处理流程&lt;/p>
&lt;h4 id="过滤器filter">过滤器(Filter）&lt;/h4>
&lt;p>Filter用于定义一个事件是该被接受或者是被过滤掉(抛弃掉)。使用示例如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ cat etc/fluentd_filter_demo.conf
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;lt;source&amp;gt;
@type http
port &lt;span class="m">8888&lt;/span>
&lt;span class="nb">bind&lt;/span> 0.0.0.0
&amp;lt;/source&amp;gt;
&amp;lt;filter test.cycle&amp;gt;
@type grep
&amp;lt;exclude&amp;gt;
key action
pattern ^logout$
&amp;lt;/exclude&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;match test.cycle&amp;gt;
@type stdout
&amp;lt;/match&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的示例配置了让我们直接过滤掉用户&lt;code>logout&lt;/code>的事件。&lt;/p>
&lt;p>重启fluentd,使用上面的定义的配置文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ docker run -p 8888:8888 --rm -v &lt;span class="k">$(&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="k">)&lt;/span>/etc:/fluentd/etc -v &lt;span class="k">$(&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="k">)&lt;/span>/log:/fluentd/log fluent/fluentd:v1.7-1 -c /fluentd/etc/fluentd_filter_demo.conf -v
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -i -X POST -d &lt;span class="s1">&amp;#39;json={&amp;#34;action&amp;#34;:&amp;#34;login&amp;#34;,&amp;#34;user&amp;#34;:2}&amp;#39;&lt;/span> http://localhost:8888/test.cycle
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Content-type: text/plain
Connection: Keep-Alive
Content-length: &lt;span class="m">0&lt;/span>
$ curl -i -X POST -d &lt;span class="s1">&amp;#39;json={&amp;#34;action&amp;#34;:&amp;#34;logout&amp;#34;,&amp;#34;user&amp;#34;:2}&amp;#39;&lt;/span> http://localhost:8888/test.cycle
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Content-type: text/plain
Connection: Keep-Alive
Content-length: &lt;span class="m">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们向fluentd发送了两个事件，分别是用户&lt;code>login&lt;/code>和&lt;code>logout&lt;/code>的事件。&lt;/p>
&lt;p>检查&lt;code>fluend&lt;/code>的输出&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">2019-11-27 03:38:28.973757600 +0000 test.cycle: {&amp;#34;action&amp;#34;:&amp;#34;login&amp;#34;,&amp;#34;user&amp;#34;:2}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到只输出了用户&lt;code>login&lt;/code>的事件，&lt;code>logout&lt;/code>事件被过滤掉了。&lt;/p>
&lt;h4 id="标识符labels">标识符(Labels)&lt;/h4>
&lt;p>从前面的例子里，我们可以看到，&lt;code>fluentd&lt;/code>的处理流程是根据我们在配置文件中的定义，从上到下依次执行的。假如我们在配置文件里定义了比较多输入源，不同的输入源需要使用不同的filters时，如果仍然按照从上到下执行的顺序的话，由于不同的处理需求，我们的配置文件可能变得非常复杂。&lt;/p>
&lt;p>通过&lt;code>label&lt;/code>，我们可以为不同的输入源指定不同的处理流程，示例如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ cat etc/fluentd_labels.conf
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;lt;source&amp;gt;
@type http
&lt;span class="nb">bind&lt;/span> 0.0.0.0
port &lt;span class="m">8888&lt;/span>
@label @STAGING &lt;span class="c1"># 注意这里我们添加了label&lt;/span>
&amp;lt;/source&amp;gt;
&amp;lt;filter test.cycle&amp;gt;
@type grep
&amp;lt;exclude&amp;gt;
key action
pattern ^login$
&amp;lt;/exclude&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;label @STAGING&amp;gt;
&amp;lt;filter test.cycle&amp;gt;
@type grep
&amp;lt;exclude&amp;gt;
key action
pattern ^logout$
&amp;lt;/exclude&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;match test.cycle&amp;gt;
@type stdout
&amp;lt;/match&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的示例文件里，我们首先定义了一个filter过滤掉&lt;code>login&lt;/code>事件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;filter test.cycle&amp;gt;
@type grep
&amp;lt;exclude&amp;gt;
key action
pattern ^login$
&amp;lt;/exclude&amp;gt;
&amp;lt;/filter&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着又在&lt;code>label&lt;/code>块里面过滤掉了&lt;code>logout&lt;/code>事件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;filter test.cycle&amp;gt;
@type grep
&amp;lt;exclude&amp;gt;
key action
pattern ^login$
&amp;lt;/exclude&amp;gt;
&amp;lt;/filter&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果按照从上到下的顺序执行，那么我们将看不到任何&lt;code>login&lt;/code>和&lt;code>logout&lt;/code>的事件。但是实际结果如何呢？让我们来测试一下。&lt;/p>
&lt;p>使用上面定义的配置文件启动fluentd&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ docker run -p 8888:8888 --rm -v &lt;span class="k">$(&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="k">)&lt;/span>/etc:/fluentd/etc -v &lt;span class="k">$(&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="k">)&lt;/span>/log:/fluentd/log fluent/fluentd:v1.7-1 -c /fluentd/etc/fluentd_labels.conf -v
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>提交事件来测试, 同样向fluentd发送两个事件，分别是用户&lt;code>login&lt;/code>和&lt;code>logout&lt;/code>的事件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -i -X POST -d &lt;span class="s1">&amp;#39;json={&amp;#34;action&amp;#34;:&amp;#34;login&amp;#34;,&amp;#34;user&amp;#34;:2}&amp;#39;&lt;/span> http://localhost:8888/test.cycle
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Content-Type: text/plain
Connection: Keep-Alive
Content-Length: &lt;span class="m">0&lt;/span>
$ curl -i -X POST -d &lt;span class="s1">&amp;#39;json={&amp;#34;action&amp;#34;:&amp;#34;logout&amp;#34;,&amp;#34;user&amp;#34;:2}&amp;#39;&lt;/span> http://localhost:8888/test.cycle
HTTP/1.1 &lt;span class="m">200&lt;/span> OK
Content-Type: text/plain
Connection: Keep-Alive
Content-Length: &lt;span class="m">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看fluentd输出&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">2019-11-27 03:51:45.088464900 +0000 test.cycle: {&amp;#34;action&amp;#34;:&amp;#34;login&amp;#34;,&amp;#34;user&amp;#34;:2}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到，只有&lt;code>logout&lt;/code>事件被过滤了，原因是我们为输入设置了label&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;source&amp;gt;
@type http
bind 0.0.0.0
port 8888
@label @STAGING # 注意这里我们添加了label
&amp;lt;/source&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因此跳过中间设置的一些filter，只运行了&lt;code>&amp;lt;label @STAGING&amp;gt;...&amp;lt;/lable&amp;gt;&lt;/code>标签块里的&lt;code>filter&lt;/code>&lt;/p>
&lt;h4 id="缓冲区buffers">缓冲区(Buffers)&lt;/h4>
&lt;p>在前面的例子中，我们使用的都是&lt;code>stdout&lt;/code>这样一个没有缓冲区的输出，在生产环境中，我们用到的输出基本都是有缓冲区
的,比如&lt;code>s3&lt;/code>, &lt;code>forward&lt;/code>,&lt;code>mongodb&lt;/code>等，这些输出插件在收到事件之后，会将事件先保存到缓冲区，然后等满足特定条件之后，再将事件输出到目标输出。&lt;/p>
&lt;h2 id="配置文件语法">配置文件语法&lt;/h2>
&lt;p>配置文件由一下几部分组成&lt;/p>
&lt;h3 id="配置文件中的术语">配置文件中的术语&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>source&lt;/code>: 指定输入源&lt;/p>
&lt;p>例如:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 在24224端口接受TCP事件&lt;/span>
&amp;lt;source&amp;gt;
@type forward
port &lt;span class="m">24224&lt;/span>
&amp;lt;/source&amp;gt;
&amp;lt;source&amp;gt;
@type http
port &lt;span class="m">9880&lt;/span>
&amp;lt;/source&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输入源可以一次指定多个， &lt;code>@type&lt;/code>参数指定使用哪一个输入插件。
fluentd支持各种输入插件, 比如:&lt;/p>
&lt;ul>
&lt;li>in_tail&lt;/li>
&lt;li>in_forward&lt;/li>
&lt;li>in_udp&lt;/li>
&lt;li>in_tcp&lt;/li>
&lt;li>in_unix&lt;/li>
&lt;li>in_http&lt;/li>
&lt;li>in_syslog&lt;/li>
&lt;li>in_exec&lt;/li>
&lt;li>in_dummy&lt;/li>
&lt;li>in_windows_eventlog&lt;/li>
&lt;/ul>
&lt;p>插件的具体使用可以参考文档:
&lt;a href="https://docs.fluentd.org/input">https://docs.fluentd.org/input&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>match&lt;/code>: 指定输出的目的地&lt;/p>
&lt;p>例如:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 将满足myapp.acccess标签的事件全部输出到&lt;/span>
&lt;span class="c1"># /var/log/fluent/access.%Y-%m-%d&lt;/span>
&amp;lt;match myapp.access&amp;gt;
@type file
path /var/log/fluent/access
&amp;lt;/match&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出也可以一次指定多个， &lt;code>@type&lt;/code>参数指定使用哪一个输出插件。
fluentd支持各种输出插件, 比如:&lt;/p>
&lt;ul>
&lt;li>out_copy&lt;/li>
&lt;li>out_null&lt;/li>
&lt;li>out_roundrobin&lt;/li>
&lt;li>out_stdout&lt;/li>
&lt;li>out_exec_filter&lt;/li>
&lt;li>out_forward&lt;/li>
&lt;li>out_mongo or out_mongo_replset&lt;/li>
&lt;li>out_exec&lt;/li>
&lt;li>out_file&lt;/li>
&lt;li>out_s3&lt;/li>
&lt;li>out_webhdfs&lt;/li>
&lt;/ul>
&lt;p>插件的具体使用可以参考文档:
&lt;a href="https://docs.fluentd.org/output">https://docs.fluentd.org/output&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>filter&lt;/code>: 指定事件的处理流程&lt;/p>
&lt;p>可以多个filter串联起来，比如:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">Input -&amp;gt; filter 1 -&amp;gt; ... -&amp;gt; filter N -&amp;gt; Output
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>例如:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;filter myapp.access&amp;gt;
@type record_transformer
&amp;lt;record&amp;gt;
host_param &amp;#34;#{Socket.gethostname}&amp;#34;
&amp;lt;/record&amp;gt;
&amp;lt;/filter&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的&lt;code>filter&lt;/code>会添加&lt;code>host_param&lt;/code>参数到事件&lt;/p>
&lt;p>fluentd也内置了各种&lt;code>filter&lt;/code>, 比如:&lt;/p>
&lt;ul>
&lt;li>grep&lt;/li>
&lt;li>record-transformer&lt;/li>
&lt;li>filter_stdout&lt;/li>
&lt;li>geoip&lt;/li>
&lt;li>parser&lt;/li>
&lt;/ul>
&lt;p>filter的具体使用可以参考文档:&lt;/p>
&lt;p>&lt;a href="https://docs.fluentd.org/filter">https://docs.fluentd.org/filter&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>system&lt;/code>: 指定系统级别的配置&lt;/p>
&lt;p>可以设置的参数有&lt;/p>
&lt;ul>
&lt;li>log_level&lt;/li>
&lt;li>suppress_repeated_stacktrace&lt;/li>
&lt;li>emit_error_log_interval&lt;/li>
&lt;li>suppress_config_dump&lt;/li>
&lt;li>without_source&lt;/li>
&lt;li>process_name (only available in system directive. No fluentd option)&lt;/li>
&lt;/ul>
&lt;p>例如:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;lt;system&amp;gt;
&lt;span class="c1"># equal to -qq option&lt;/span>
log_level error
&lt;span class="c1"># equal to --without-source option&lt;/span>
without_source
&lt;span class="c1"># ...&lt;/span>
&amp;lt;/system&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>label&lt;/code>: 用于分组特定的filter和match&lt;/p>
&lt;p>例如:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;lt;source&amp;gt;
@type forward
&amp;lt;/source&amp;gt;
&amp;lt;source&amp;gt;
@type tail
@label @SYSTEM
&amp;lt;/source&amp;gt;
&amp;lt;filter access.**&amp;gt;
@type record_transformer
&amp;lt;record&amp;gt;
&lt;span class="c1"># ...&lt;/span>
&amp;lt;/record&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;match **&amp;gt;
@type elasticsearch
&lt;span class="c1"># ...&lt;/span>
&amp;lt;/match&amp;gt;
&amp;lt;label @SYSTEM&amp;gt;
&amp;lt;filter var.log.middleware.**&amp;gt;
@type grep
&lt;span class="c1"># ...&lt;/span>
&amp;lt;/filter&amp;gt;
&amp;lt;match **&amp;gt;
@type s3
&lt;span class="c1"># ...&lt;/span>
&amp;lt;/match&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的配置文件中:&lt;/p>
&lt;p>&lt;code>in_forward&lt;/code>的事件将经过&lt;code>record_transformer&lt;/code> 过滤器和&lt;code>elasticsearch&lt;/code>输出。&lt;/p>
&lt;p>&lt;code>in_tail&lt;/code>输入的事件将经过&lt;code>grep&lt;/code>过滤器和&lt;code>s3&lt;/code>输出。&lt;/p>
&lt;p>另外: &lt;code>&amp;lt;label @ERROR&amp;gt;&lt;/code>属于内置的配置，用于保存内部错误，比如:
缓冲区已经满了或者无效的事件等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>@include&lt;/code>: 引入其它的配置文件。可以将配置文件拆分为多个，便于复用。当要使用的时候，直接使用&lt;code>@include&lt;/code>引入即可，例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 通过绝对路径引入&lt;/span>
@include /path/to/config.conf
&lt;span class="c1"># 通过相对路径引入，相对于当前配置文件的路径&lt;/span>
@include extra.conf
&lt;span class="c1"># 模糊匹配，所有符合条件的会根据文件名的字母顺序依次导入&lt;/span>
&lt;span class="c1"># 比如: a.conf, b.conf, ..., z.conf&lt;/span>
&lt;span class="c1"># 因此, 要注意各个配置文件不应该有顺#序依赖，如果有顺序依赖，请明确指出导入的文件名&lt;/span>
@include config.d/*.conf
&lt;span class="c1"># 使用在线的配置&lt;/span>
@include http://example.com/fluent.conf
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>@include&lt;/code>指定也可以用于导入相关的参数信息，比如:&lt;/p>
&lt;p>有如下配置文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;lt;match pattern&amp;gt;
@type forward
&lt;span class="c1"># other parameters...&lt;/span>
&amp;lt;buffer&amp;gt;
@type file
path /path/to/buffer/forward
@include /path/to/out_buf_params.conf
&amp;lt;/buffer&amp;gt;
&amp;lt;/match&amp;gt;
&amp;lt;match pattern&amp;gt;
@type elasticsearch
&lt;span class="c1"># other parameters...&lt;/span>
&amp;lt;buffer&amp;gt;
@type file
path /path/to/buffer/es
@include /path/to/out_buf_params.conf
&amp;lt;/buffer&amp;gt;
&amp;lt;/match&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参数配置文件&lt;code>/path/to/out_buf_params.conf&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">flush_interval 5s
total_limit_size 100m
chunk_limit_size 1m
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="配置文件的模式匹配patterns">配置文件的模式匹配(patterns)&lt;/h3>
&lt;h4 id="通配符">通配符&lt;/h4>
&lt;p>如前面的示例可以看到，fluented主要根据事件的tag来分区不同的处理流程&lt;/p>
&lt;p>虽然我们可以明确指定需要处理的tag，比如:&lt;code>&amp;lt;filter app.log&amp;gt;&lt;/code>来指定只处理tag为&lt;code>app.log&lt;/code>的事件。我们也可以在&lt;code>filter&lt;/code>和&lt;code>match&lt;/code>中通过通配符，来处理同一类tag的事件&lt;/p>
&lt;p>tag通常是一个字符串，由&lt;code>.&lt;/code>分隔，比如&lt;code>myapp.access&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>*&lt;/code>: 匹配满足一个tag部分的事件, 比如: &lt;code>a.*&lt;/code>, 它将匹配&lt;code>a.b&lt;/code>这样的tag, 但是不会处理&lt;code>a&lt;/code>或者&lt;code>a.b.c&lt;/code>这类tag&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>**&lt;/code>: 匹配满足0个或多个tag部分，比如: &lt;code>a.**&lt;/code>, 它将匹配&lt;code>a&lt;/code>, &lt;code>a.b&lt;/code>, &lt;code>a.b.c&lt;/code>这三种tag&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>{X, Y, Z}&lt;/code>: 匹配满足&lt;code>X&lt;/code>,&lt;code>Y&lt;/code>或者&lt;code>Z&lt;/code>的tag, 比如: &lt;code>{a, b}&lt;/code>将匹配&lt;code>a&lt;/code>或者&lt;code>b&lt;/code>,但是不会匹配&lt;code>c&lt;/code>。&lt;/p>
&lt;p>这种格式也可以和通配符组合使用,比如&lt;code>a.{b.c}.*&lt;/code>或&lt;code>a.{b.c}.**&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>#{...}&lt;/code> 会把花括号内的字符串当做是&lt;code>ruby&lt;/code>的表达式处理。比如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;match &amp;#34;app.#{ENV[&amp;#39;FLUENTD_TAG&amp;#39;]}&amp;#34;&amp;gt;
@type stdout
&amp;lt;/match&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果设置了环境变量&lt;code>FLUENTD_TAG&lt;/code>为&lt;code>dev&lt;/code>,那上面等价于&lt;code>app.dev&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当指定了多个模式时（使用一个或多个空格分开）,只要满足其中任意一个就行。&lt;/p>
&lt;p>比如:
&lt;code>&amp;lt;match a b&amp;gt;&lt;/code>匹配&lt;code>a&lt;/code>和&lt;code>b&lt;/code>
&lt;code>&amp;lt;match a.** b.*&amp;gt;&lt;/code>匹配&lt;code>a&lt;/code>, &lt;code>a.b&lt;/code>, &lt;code>a.b.c&lt;/code>, &lt;code>b.d&lt;/code>等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="多个match之间的顺序注意">多个match之间的顺序注意&lt;/h4>
&lt;p>当有多个match, 需要注意一下它们的顺序， 如下面的例子，第二个match永远也不会生效&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># ** matches all tags. Bad :(
&amp;lt;match **&amp;gt;
@type blackhole_plugin
&amp;lt;/match&amp;gt;
&amp;lt;match myapp.access&amp;gt;
@type file
path /var/log/fluent/access
&amp;lt;/match&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正确的写发应该是将确定的tag尽量写在前面，模糊匹配的写在后面。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;lt;match myapp.access&amp;gt;
@type file
path /var/log/fluent/access
&amp;lt;/match&amp;gt;
&lt;span class="c1"># Capture all unmatched tags. Good :)&lt;/span>
&amp;lt;match **&amp;gt;
@type blackhole_plugin
&amp;lt;/match&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果需要将输出到多个match,需要使用&lt;code>out_copy&lt;/code>插件。&lt;/p>
&lt;p>另外需要注意顺序的是&lt;code>filter&lt;/code>和&lt;code>match&lt;/code>, 如果将&lt;code>filter&lt;/code>放在&lt;code>match&lt;/code>之后，那么它也永远不会生效，正确的用法如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># You should NOT put this &amp;lt;filter&amp;gt; block after the &amp;lt;match&amp;gt; block below.&lt;/span>
&lt;span class="c1"># If you do, Fluentd will just emit events without applying the filter.&lt;/span>
&amp;lt;filter myapp.access&amp;gt;
@type record_transformer
...
&amp;lt;/filter&amp;gt;
&amp;lt;match myapp.access&amp;gt;
@type file
path /var/log/fluent/access
&amp;lt;/match&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="常见的配置文件示例">常见的配置文件示例&lt;/h3>
&lt;p>下面给出了一些常见的使用场景的配置文件写法&lt;/p>
&lt;h4 id="简单的输入过滤输出">简单的输入，过滤，输出&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;lt;source&amp;gt;
@type forward
&amp;lt;/source&amp;gt;
&amp;lt;filter app.**&amp;gt;
@type record_transformer
&amp;lt;record&amp;gt;
hostname &lt;span class="s2">&amp;#34;#{Socket.gethostname}&amp;#34;&lt;/span>
&amp;lt;/record&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;match app.**&amp;gt;
@type file
&lt;span class="c1"># ...&lt;/span>
&amp;lt;/match&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="多个输入">多个输入&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;lt;source&amp;gt;
@type forward
&amp;lt;/source&amp;gt;
&amp;lt;source&amp;gt;
@type tail
tag system.logs
&lt;span class="c1"># ...&lt;/span>
&amp;lt;/source&amp;gt;
&amp;lt;filter app.**&amp;gt;
@type record_transformer
&amp;lt;record&amp;gt;
hostname &lt;span class="s2">&amp;#34;#{Socket.gethostname}&amp;#34;&lt;/span>
&amp;lt;/record&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;match &lt;span class="o">{&lt;/span>app.**,system.logs&lt;span class="o">}&lt;/span>&amp;gt;
@type file
&lt;span class="c1"># ...&lt;/span>
&amp;lt;/match&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="使用label的输出">使用Label的输出&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;lt;source&amp;gt;
@type forward
&amp;lt;/source&amp;gt;
&amp;lt;source&amp;gt;
@type dstat
@label @METRICS &lt;span class="c1"># dstat events are routed to &amp;lt;label @METRICS&amp;gt;&lt;/span>
&lt;span class="c1"># ...&lt;/span>
&amp;lt;/source&amp;gt;
&amp;lt;filter app.**&amp;gt;
@type record_transformer
&amp;lt;record&amp;gt;
&lt;span class="c1"># ...&lt;/span>
&amp;lt;/record&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;match app.**&amp;gt;
@type file
&lt;span class="c1"># ...&lt;/span>
&amp;lt;/match&amp;gt;
&amp;lt;label @METRICS&amp;gt;
&amp;lt;match **&amp;gt;
@type elasticsearch
&lt;span class="c1"># ...&lt;/span>
&amp;lt;/match&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="重新设置标签并重新路由fluent-plugin-routehttpsgithubcomtagomorisfluent-plugin-route-插件的使用">重新设置标签并重新路由(&lt;a href="https://github.com/tagomoris/fluent-plugin-route">fluent-plugin-route&lt;/a>插件的使用)&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;lt;match worker.**&amp;gt;
@type route
remove_tag_prefix worker
add_tag_prefix metrics.event
&amp;lt;route **&amp;gt;
copy &lt;span class="c1"># For fall-through. Without copy, routing is stopped here.&lt;/span>
&amp;lt;/route&amp;gt;
&amp;lt;route **&amp;gt;
copy
@label @BACKUP
&amp;lt;/route&amp;gt;
&amp;lt;/match&amp;gt;
&amp;lt;match metrics.event.**&amp;gt;
@type stdout
&amp;lt;/match&amp;gt;
&amp;lt;label @BACKUP&amp;gt;
&amp;lt;match metrics.event.**&amp;gt;
@type file
path /var/log/fluent/bakcup
&amp;lt;/match&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="根据事件内容重新路由fluent-plugin-rewrite-tag-filterhttpsgithubcomfluentfluent-plugin-rewrite-tag-filter插件的使用">根据事件内容重新路由(&lt;a href="https://github.com/fluent/fluent-plugin-rewrite-tag-filter">fluent-plugin-rewrite-tag-filter&lt;/a>插件的使用)&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;lt;source&amp;gt;
@type forward
&amp;lt;/source&amp;gt;
&lt;span class="c1"># event example: app.logs {&amp;#34;message&amp;#34;:&amp;#34;[info]: ...&amp;#34;}&lt;/span>
&amp;lt;match app.**&amp;gt;
@type rewrite_tag_filter
&amp;lt;rule&amp;gt;
key message
pattern ^&lt;span class="se">\[&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="se">\w&lt;/span>+&lt;span class="o">)&lt;/span>&lt;span class="se">\]&lt;/span>
tag &lt;span class="nv">$1&lt;/span>.&lt;span class="si">${&lt;/span>&lt;span class="nv">tag&lt;/span>&lt;span class="si">}&lt;/span>
&amp;lt;/rule&amp;gt;
&lt;span class="c1"># you can put more &amp;lt;rule&amp;gt;&lt;/span>
&amp;lt;/match&amp;gt;
&lt;span class="c1"># send mail when receives alert level logs&lt;/span>
&amp;lt;match alert.app.**&amp;gt;
@type mail
&lt;span class="c1"># ...&lt;/span>
&amp;lt;/match&amp;gt;
&lt;span class="c1"># other logs are stored into file&lt;/span>
&amp;lt;match *.app.**&amp;gt;
@type file
&lt;span class="c1"># ...&lt;/span>
&amp;lt;/match&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="重新路由事件到其它的labelout_relabelhttpsdocsfluentdorgoutputrelabel插件的使用">重新路由事件到其它的Label(&lt;a href="https://docs.fluentd.org/output/relabel">out_relabel&lt;/a>插件的使用)&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;lt;source&amp;gt;
@type forward
&amp;lt;/source&amp;gt;
&amp;lt;match app.**&amp;gt;
@type copy
&amp;lt;store&amp;gt;
@type forward
&lt;span class="c1"># ...&lt;/span>
&amp;lt;/store&amp;gt;
&amp;lt;store&amp;gt;
@type relabel
@label @NOTIFICATION
&amp;lt;/store&amp;gt;
&amp;lt;/match&amp;gt;
&amp;lt;label @NOTIFICATION&amp;gt;
&amp;lt;filter app.**&amp;gt;
@type grep
regexp1 message ERROR
&amp;lt;/filter&amp;gt;
&amp;lt;match app.**&amp;gt;
@type mail
&amp;lt;/match&amp;gt;
&amp;lt;/label&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="配置文件中的参数类型">配置文件中的参数类型&lt;/h3>
&lt;p>在配置文件中使用的插件，大部分都可以接受1个或多个参数，也可以指定参数类型&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>string&lt;/code>: 字符串类型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>integer&lt;/code>: 整型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>float&lt;/code>: 浮点型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>size&lt;/code>: 字节(bytes)类型.为了便于阅读，它的值有几种常见的写法&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;INTEGER&amp;gt;k&lt;/code>或&lt;code>&amp;lt;INTEGER&amp;gt;K&lt;/code> 表示使用单位&lt;code>KB&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;INTEGER&amp;gt;m&lt;/code>或&lt;code>&amp;lt;INTEGER&amp;gt;M&lt;/code> 表示使用单位&lt;code>M&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;INTEGER&amp;gt;g&lt;/code>或&lt;code>&amp;lt;INTEGER&amp;gt;G&lt;/code> 表示使用单位&lt;code>G&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;INTEGER&amp;gt;t&lt;/code>或&lt;code>&amp;lt;INTEGER&amp;gt;T&lt;/code> 表示使用单位&lt;code>T&lt;/code>&lt;/li>
&lt;li>纯数字时表示使用默认单位为&lt;code>B&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>time&lt;/code>: 时间类型，默认单位为秒， 同样为了便于阅读，它的值也有几种常见的写法&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;INTEGER&amp;gt;s&lt;/code>, 表示使用单位&lt;code>秒&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;INTEGER&amp;gt;m&lt;/code>, 表示使用单位&lt;code>分钟&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;INTEGER&amp;gt;h&lt;/code>, 表示使用单位&lt;code>小时&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;INTEGER&amp;gt;d&lt;/code>, 表示使用单位&lt;code>天&lt;/code>&lt;/li>
&lt;li>纯数字时表示使用默认单位为&lt;code>秒&lt;/code>， &lt;code>0.1&lt;/code>表示&lt;code>100ms&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>array&lt;/code>: 数组类型。有两种写法:&lt;/p>
&lt;ul>
&lt;li>完整格式的写法: &lt;code>[&amp;quot;key1&amp;quot;, &amp;quot;key2&amp;quot;]&lt;/code>&lt;/li>
&lt;li>简写: &lt;code>key1,key2&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>hash&lt;/code>: 字典类型。也有两种写法:&lt;/p>
&lt;ul>
&lt;li>完整格式的写法: &lt;code>{&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;, &amp;quot;key2&amp;quot;:&amp;quot;value2&amp;quot;}&lt;/code>&lt;/li>
&lt;li>简写: &lt;code>key1:value1,key2:value2&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="常见的参数">常见的参数&lt;/h3>
&lt;p>以&lt;code>@&lt;/code>开始的参数表示fluented的保留参数&lt;/p>
&lt;ul>
&lt;li>&lt;code>@type&lt;/code>: 指定使用的参加类型&lt;/li>
&lt;li>&lt;code>@id&lt;/code>: 指定插件的ID&lt;/li>
&lt;li>&lt;code>@label&lt;/code>: 指定事件的标识符&lt;/li>
&lt;li>&lt;code>@log_level&lt;/code>: 指定类型&lt;/li>
&lt;/ul>
&lt;h3 id="模块section支持">模块(section)支持&lt;/h3>
&lt;p>下面的模块并不是所有的插件都支持，具体使用请结合使用的插件查看&lt;/p>
&lt;ul>
&lt;li>&lt;code>parse&lt;/code>: 指明如何解析原始内容，如解析nginx, apache日志等&lt;/li>
&lt;li>&lt;code>buffer&lt;/code>: 配置如何缓冲输出&lt;/li>
&lt;li>&lt;code>format&lt;/code>: 配置如何格式化事件&lt;/li>
&lt;li>&lt;code>extract&lt;/code>: 从事件中提取值&lt;/li>
&lt;li>&lt;code>inject&lt;/code>: 向事件注入一些属性&lt;/li>
&lt;li>&lt;code>transport&lt;/code>: 用于指定某些插件的输入输出时&lt;code>server&lt;/code>的连接信息&lt;/li>
&lt;li>&lt;code>storage&lt;/code>: 指定如何保存插件本身的状态&lt;/li>
&lt;/ul>
&lt;p>每个模块都有对应的插件，使用详情可以查看官方文档&lt;/p>
&lt;h3 id="检查配置文件的格式">检查配置文件的格式&lt;/h3>
&lt;p>可以使用下面的命令检查配置文件的格式是否正确&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ docker run --rm -v &lt;span class="k">$(&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="k">)&lt;/span>/etc:/fluentd/etc/ fluent/fluentd:v1.7-1 --dry-run -c /fluentd/etc/fluentd_basic_setup.conf
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="使用fluentd收集docker容器的日志">使用Fluentd收集docker容器的日志&lt;/h2>
&lt;h3 id="docker容器日志格式">docker容器日志格式&lt;/h3>
&lt;p>在使用fluentd收集docker日志时，默认会将日志分成4个部分:&lt;/p>
&lt;p>分别是:&lt;/p>
&lt;ul>
&lt;li>&lt;code>container_id&lt;/code>: 容器的ID&lt;/li>
&lt;li>&lt;code>container_name&lt;/code>:容器的名字&lt;/li>
&lt;li>&lt;code>source&lt;/code>: 日志的类型，&lt;code>stdout&lt;/code>或&lt;code>stderr&lt;/code>&lt;/li>
&lt;li>&lt;code>log&lt;/code>: 日志本身&lt;/li>
&lt;/ul>
&lt;h3 id="收集docker容器的日志示例">收集Docker容器的日志示例&lt;/h3>
&lt;ol>
&lt;li>首先创建一个配置文件&lt;code>etc/fluentd_docker.conf&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;lt;source&amp;gt;
@type forward
port &lt;span class="m">24224&lt;/span>
&lt;span class="nb">bind&lt;/span> 0.0.0.0
&amp;lt;/source&amp;gt;
&amp;lt;match **&amp;gt;
@type stdout
&amp;lt;/match&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 启动一个fluentd服务&lt;/span>
$ docker run -it -p 24224:24224 -v &lt;span class="k">$(&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="k">)&lt;/span>/etc:/fluentd/etc/ -e &lt;span class="nv">FLUENTD_CONF&lt;/span>&lt;span class="o">=&lt;/span>fluentd_docker.conf fluent/fluentd:v1.7-1
&lt;span class="c1"># 启动一个docker容器并使用fluentd收集日志&lt;/span>
$ docker run --log-driver&lt;span class="o">=&lt;/span>fluentd -p 5000:80 httpd
&lt;span class="c1"># 访问服务产生日志&lt;/span>
$ curl http://127.0.0.1:5000
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在fluentd的容器日志里，能看到下面的输出&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">2019-11-28 01:43:23.000000000 +0000 8da5b8365552: {&amp;#34;container_id&amp;#34;:&amp;#34;8da5b8365552b4c0c610ff5df3dc28509bfc5781ec580628143b00cf997d5b72&amp;#34;,&amp;#34;container_name&amp;#34;:&amp;#34;/confident_curie&amp;#34;,&amp;#34;source&amp;#34;:&amp;#34;stdout&amp;#34;,&amp;#34;log&amp;#34;:&amp;#34;172.17.0.1 - - [28/Nov/2019:01:43:23 +0000] \&amp;#34;GET / HTTP/1.1\&amp;#34; 200 45&amp;#34;}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="在docker-compose中使用示例">在docker-compose中使用示例&lt;/h3>
&lt;p>为了介绍下对日志常用的处理场景，这里将收集的日志分成三部分:&lt;/p>
&lt;ul>
&lt;li>输出到fluentd的容器的标准输出，方便直接查看&lt;/li>
&lt;li>保存一份到文件，按照日期自动切割日志&lt;/li>
&lt;li>保存一份到Elasticsearch，方便通过Kibana面板直接查看&lt;/li>
&lt;/ul>
&lt;p>同时为了方便人查看，输出到fluentd标准输出和保存到日志文件的，只显示log字段的信息(不用&lt;code>contanier_id&lt;/code>, &lt;code>container_name&lt;/code>等暂时不关心的信息)，保存到Elastisearch的日志保存完整的结构。&lt;/p>
&lt;p>首先，根据我们上面的需求，创建fluentd配置文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ cat etc/fluentd_docker_compose.conf
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&amp;lt;source&amp;gt;
@type forward
port &lt;span class="m">24224&lt;/span>
&lt;span class="nb">bind&lt;/span> 0.0.0.0
&amp;lt;/source&amp;gt;
&lt;span class="c1"># docker相关的日志处理&lt;/span>
&amp;lt;match docker.**&amp;gt;
&lt;span class="c1"># docker相关的日志输出三份，一份输出到fluentd容器的标准输出，便于实时查看，另一份保存到文件, 还有一份保存到Elasticsearch&lt;/span>
@type copy
&lt;span class="c1"># 输出到标准输出&lt;/span>
&amp;lt;store&amp;gt;
@type stdout
&lt;span class="c1"># 默认输出的格式是json格式，由于docker生成的日志，包含了容器信息等其他信息，不是很方便人去阅读。&lt;/span>
&lt;span class="c1"># 这里只输出我们关心的log字段&lt;/span>
&lt;span class="c1"># 使用stdout作为主format，single_value为子format，这样可以在输出log的同时保留直接tag和time信息&lt;/span>
&amp;lt;format&amp;gt;
@type stdout
output_type single_value
message_key log
add_newline &lt;span class="nb">true&lt;/span>
&amp;lt;/format&amp;gt;
&amp;lt;/store&amp;gt;
&lt;span class="c1"># 输出到文件&lt;/span>
&amp;lt;store&amp;gt;
@type file
&lt;span class="c1"># 使用tag和日期作为保存日志的文件名&lt;/span>
path /fluentd/log/&lt;span class="si">${&lt;/span>&lt;span class="nv">tag&lt;/span>&lt;span class="si">}&lt;/span>/%Y%m%d
&lt;span class="c1"># 合并多个flush chunk块到一个文件&lt;/span>
append &lt;span class="nb">true&lt;/span>
&lt;span class="c1"># 使用gzip压缩生成的日志文件&lt;/span>
compress gzip
&amp;lt;format&amp;gt;
@type stdout
output_type single_value
message_key log
add_newline &lt;span class="nb">true&lt;/span>
&amp;lt;/format&amp;gt;
&lt;span class="c1"># 使用文件作为缓冲区&lt;/span>
&amp;lt;buffer tag, time&amp;gt;
@type file
chunk_limit_size 1M
&lt;span class="c1"># 每隔1分钟写一次日志&lt;/span>
flush_interval 1m
flush_at_shutdown &lt;span class="nb">true&lt;/span>
flush_mode interval
&amp;lt;/buffer&amp;gt;
&amp;lt;/store&amp;gt;
&lt;span class="c1"># 输出到Eleastichsearch&lt;/span>
&amp;lt;store&amp;gt;
@type elasticsearch
host elasticsearch
port &lt;span class="m">9200&lt;/span>
logstash_format &lt;span class="nb">true&lt;/span>
logstash_prefix fluentd
logstash_dateformat %Y%m%d
include_tag_key &lt;span class="nb">true&lt;/span>
type_name access_log
tag_key @log_name
&amp;lt;/store&amp;gt;
&amp;lt;/match&amp;gt;
&lt;span class="c1"># 其它日志处理&lt;/span>
&amp;lt;match **&amp;gt;
@type copy
&amp;lt;store&amp;gt;
@type stdout
&amp;lt;/store&amp;gt;
&lt;span class="c1"># 输出到others目录&lt;/span>
&amp;lt;store&amp;gt;
@type file
path /fluentd/log/others/&lt;span class="si">${&lt;/span>&lt;span class="nv">tag&lt;/span>&lt;span class="si">}&lt;/span>/%Y%m%d
append &lt;span class="nb">true&lt;/span>
&amp;lt;buffer tag, time&amp;gt;
@type file
chunk_limit_size 1M
flush_interval 1m
flush_at_shutdown &lt;span class="nb">true&lt;/span>
flush_mode interval
&amp;lt;/buffer&amp;gt;
&amp;lt;/store&amp;gt;
&amp;lt;/match&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于使用到了elasticsearch输出插件，而默认的fluentd中并没有安装这个插件，因此，我们需要自己定义&lt;code>Dockfile&lt;/code>来安装elasticsearch插件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ cat fluentd/Dockerfile
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> fluent/fluentd:v1.7-1&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">USER&lt;/span>&lt;span class="s"> root&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;fluent-gem&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;install&amp;#34;&lt;/span>, &lt;span class="s2">&amp;#34;fluent-plugin-elasticsearch&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="k">USER&lt;/span>&lt;span class="s"> fluent&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后创建&lt;code>docker-compose.yaml&lt;/code>文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ cat docker-compose.yaml
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">httpd&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">httpd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;5000:80&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">networks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">webnet&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">fluentd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">logging&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">driver&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">fluentd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">options&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fluentd-address&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;localhost:24224&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fluentd-retry-wait&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1s&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fluentd-max-retries&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;10&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tag&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker.httpd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">fluentd&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./fluentd/&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">./etc/:/fluentd/etc&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">./log/:/fluentd/log&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;24224:24224&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;24224:24224/udp&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">FLUENTD_CONF=fluentd_docker_compose.conf&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">networks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">webnet&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">elasticsearch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">kibana&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">elasticsearch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker.elastic.co/elasticsearch/elasticsearch-oss:6.2.3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;9200:9200&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">networks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">webnet&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;9200:9200&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;9300:9300&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">discovery.type=single-node&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">cluster.name=docker-cluster&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">bootstrap.memory_lock=true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">http.host=0.0.0.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">transport.host=127.0.0.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;ES_JAVA_OPTS=-Xms512m -Xmx512m&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ulimits&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">memlock&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">soft&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hard&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">es_data:/usr/share/elasticsearch/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kibana&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker.elastic.co/kibana/kibana-oss:6.2.3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">SERVER_NAME&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kibana-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ELASTICSEARCH_URL&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://elasticsearch:9200&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;5601:5601&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">elasticsearch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">networks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">webnet&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">networks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">webnet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">es_data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">driver&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">local&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后启动服务&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ docker-compose up --build
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实际使用中发现，采用上面的方式启动服务后，有时间fluentd没法收集到httpd服务的日志，最后发现原因是如果在fluentd服务还没准备就绪的情况下就启动httpd服务，就会产生这种现象。因此，建议的做法是先启动fluentd, 再启动httpd&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ docker-compose up --build fluentd
&lt;span class="c1"># 等fluentd服务就绪后，再启动httpd服务&lt;/span>
$ docker-compose up httpd
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然更优雅点的做法是控制docker-compose中服务的启动顺序，具体可以参考:&lt;/p>
&lt;p>&lt;a href="https://docs.docker.com/compose/startup-order/">https://docs.docker.com/compose/startup-order/&lt;/a>&lt;/p>
&lt;p>测试，访问 httpd服务&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 可以多执行几次，产生多一些访问记录&lt;/span>
$ curl http://127.0.0.1/5000
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后可以分别在fluentd的容器的终端，log目录，以及elasticsearch中看到保存的访问记录信息了。如下是通过Kibana面板看到的请求情况&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/1575000628.png" alt="Kibana面板">&lt;/p>
&lt;h2 id="更多">更多&lt;/h2>
&lt;p>更多关于Fluentd的使用方式可以参考官方文档&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.fluentd.org/how-to-guides">各种使用fluentd收集日志的场景&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Java实用第三方库之Lombok使用入门</title><link>https://crazygit.wiseturtles.com/2019/09/18/java-libraries-lombok/</link><pubDate>Wed, 18 Sep 2019 10:44:29 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2019/09/18/java-libraries-lombok/</guid><description>&lt;p>平时定义类时，难免会写很多&lt;code>Getter&lt;/code>, &lt;code>Setter&lt;/code>，&lt;code>toString&lt;/code>, &lt;code>Constructor &lt;/code>等方法。虽然可以用IDE自带的代码生成，但是生成的代码仍然很多，看起来特别臃肿。有了&lt;a href="https://projectlombok.org">&lt;code>Lombok&lt;/code>&lt;/a>这个库，用一个注解就能自动搞定这个问题。&lt;/p>
&lt;h3 id="使用效果">使用效果&lt;/h3>
&lt;p>没有对比就没有伤害。通过定义一个类，让我们来感受下&lt;code>Lombok&lt;/code>的带来的便利。&lt;/p>
&lt;p>不使用&lt;code>Lombok&lt;/code>定义一个类&lt;code>PersonWithoutLombok.java&lt;/code>, 虽然大部分代码都是IDE自动生成的，但是看起来仍然特别臃肿。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PersonWithoutLombok&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">toString&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;PersonWithoutLombok{&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="s">&amp;#34;name=&amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sc">&amp;#39;\&amp;#39;&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="s">&amp;#34;, age=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">+&lt;/span>
&lt;span class="sc">&amp;#39;}&amp;#39;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hashCode&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hashCode&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getAge&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setAge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">PersonWithoutLombok&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>Lombok&lt;/code>之后，让我们来看看&lt;code>PersonWithLombok.java&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.Data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Data&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PersonWithLombok&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看看类结构&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/1568769332.png" alt="看看类结构">&lt;/p>
&lt;p>一样的效果，使用&lt;code>Lombok&lt;/code>之后，整个代码看起来是不是更加清爽了呢?&lt;/p>
&lt;p>除了&lt;code>Data&lt;/code>之外。&lt;code>Lombok&lt;/code>还提供了很多其它很多实用的注解，可以参考&lt;a href="https://projectlombok.org/features/all">官方文档&lt;/a>，每个注解的使用都配有使用示例，以及不使用注解的情况下，原始的Java代码该如何写，一对比非常容易理解。&lt;/p>
&lt;h3 id="安装配置">安装配置&lt;/h3>
&lt;p>&lt;code>Lombok&lt;/code>的使用也非常方便，可以直接在&lt;code>命令行&lt;/code>，&lt;code>Eclipse&lt;/code>, &lt;code>IntelliJ&lt;/code>中使用。也方便和&lt;code>Maven&lt;/code>, &lt;code>Gradle&lt;/code>集成，&lt;code>Android&lt;/code>开发中同样适用。具体支持如下：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/1568769867.png" alt="Setup">&lt;/p>
&lt;p>下面主要介绍下在命令行中和&lt;code>IntelliJ&lt;/code>中的使用方式，其它的可以直接参考&lt;a href="https://projectlombok.org/">官方文档&lt;/a>，都有非常详细的介绍&lt;/p>
&lt;h4 id="命令行中使用">命令行中使用&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>下载最新版本的&lt;a href="https://projectlombok.org/downloads/lombok.jar">lombock.jar&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建&lt;code>PersonWithLombok.java&lt;/code>类文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ cat PersonWithLombok.java
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.Data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Data&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PersonWithLombok&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>编译&lt;code>PersonWithLombok.java&lt;/code>类文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ javac -cp /path/to/lombok.jar PersonWithLombok.java
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看生成的&lt;code>class&lt;/code>文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ javap PersonWithLombok.class
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Compiled&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="s">&amp;#34;PersonWithLombok.java&amp;#34;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PersonWithLombok&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">PersonWithLombok&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">String&lt;/span> &lt;span class="nf">getName&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getAge&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">String&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setAge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Object&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">canEqual&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Object&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hashCode&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">String&lt;/span> &lt;span class="nf">toString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到自动生成了相关代码&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="intellij中使用httpsgithubcommplushnikovlombok-intellij-plugin">&lt;a href="https://github.com/mplushnikov/lombok-intellij-plugin">IntelliJ中使用&lt;/a>&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>安装插件&lt;/p>
&lt;p>&lt;code>Preferences&lt;/code> &amp;gt; &lt;code>Settings&lt;/code> &amp;gt; &lt;code>Plugins&lt;/code> &amp;gt; &lt;code>Browse repositories...&lt;/code> &amp;gt; &lt;code>Search for &amp;quot;lombok&amp;quot;&lt;/code> &amp;gt; &lt;code>Install Plugin&lt;/code>&lt;/p>
&lt;p>然后重启IDE&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/1568770578.png" alt="安装插件">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置IDE的编译器，开启&lt;/p>
&lt;p>&lt;code>Preferences&lt;/code> -&amp;gt; &lt;code>Build, Execution, Deployment&lt;/code> -&amp;gt; &lt;code>Compiler, Annotation Processors&lt;/code>. 点击&lt;code>Enable Annotation Processing&lt;/code>，并勾选&lt;code>Obtain processors from project classpath&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/1568770670.png" alt="配置IDE，启用Annotation Processing">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加&lt;code>Lombok&lt;/code>到项目依赖。这里根据使用的构建工具不同，操作也不同。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果使用的是&lt;code>Gradle&lt;/code>, 在&lt;code>build.gradle&lt;/code>中添加如下内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-groovy" data-lang="groovy">&lt;span class="c1">// &amp;#39;compile&amp;#39; can be changed to &amp;#39;compileOnly&amp;#39; for Gradle 2.12+
&lt;/span>&lt;span class="c1">// or &amp;#39;provided&amp;#39; if using &amp;#39;propdeps&amp;#39; plugin from SpringSource
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">compile&lt;/span> &lt;span class="s2">&amp;#34;org.projectlombok:lombok:1.18.8&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>如果使用的是&lt;code>Maven&lt;/code>，直接在&lt;code>pom.xml&lt;/code>中添加如下内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.projectlombok&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>lombok&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.18.8&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>provided&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>如果使用的是&lt;code>Ivy&lt;/code>, 在&lt;code>ivy.xml&lt;/code>中添加如下内容&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&lt;/span> &lt;span class="na">org=&lt;/span>&lt;span class="s">&amp;#34;org.projectlombok&amp;#34;&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;lombok&amp;#34;&lt;/span> &lt;span class="na">rev=&lt;/span>&lt;span class="s">&amp;#34;1.18.8&amp;#34;&lt;/span> &lt;span class="na">conf=&lt;/span>&lt;span class="s">&amp;#34;build&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>如果没有使用任何构建工具，那需要手动下载&lt;a href="https://projectlombok.org/downloads/lombok.jar">lombock.jar&lt;/a>, 然后在&lt;code>项目结构&lt;/code>中，把下载的&lt;code>lombok.jar&lt;/code>添加到项目依赖的&lt;code>Libraries&lt;/code>中&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/1568771143.png" alt="添加lombok.jar到项目的classpath中">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>创建一个类&lt;code>PersonWithLombok.java&lt;/code>，测试效果,如下图，从类结构中可以看到，IDE已经自动识别出使用&lt;code>Lombok&lt;/code>后生成的代码&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/1568771270.png" alt="效果图">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="常用注解介绍">常用注解介绍&lt;/h3>
&lt;h4 id="val">&lt;code>val&lt;/code>&lt;/h4>
&lt;p>作用在局部变量，用于定义一个局部变量，并将它声明为&lt;code>final&lt;/code>, 不用声明变量类型，它会根据初始赋值自动推动变量类型。&lt;strong>只能用于局部变量或loop循环中，不能用于类的属性&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.ArrayList&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.HashMap&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.val&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ValExample&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">example&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">val&lt;/span> &lt;span class="n">example&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">val&lt;/span> &lt;span class="n">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toLowerCase&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">example2&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">val&lt;/span> &lt;span class="n">map&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;span class="n">map&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;zero&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">map&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;five&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">val&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">map&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">entrySet&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%d: %s\n&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>等效于&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.ArrayList&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.HashMap&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Map&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ValExample&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">example&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">example&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">example&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toLowerCase&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">example2&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">map&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;span class="n">map&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;zero&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">map&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;five&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Entry&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">entry&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">map&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">entrySet&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%d: %s\n&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getKey&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getValue&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="var">&lt;code>var&lt;/code>&lt;/h4>
&lt;p>与&lt;code>val&lt;/code>功能类似，除了变量不会标记为&lt;code>final&lt;/code>&lt;/p>
&lt;h4 id="nonnull">&lt;code>@NonNull&lt;/code>&lt;/h4>
&lt;p>非空检查&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.NonNull&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">NonNullExample&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Something&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">NonNullExample&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@NonNull&lt;/span> &lt;span class="n">Person&lt;/span> &lt;span class="n">person&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">person&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>等效于&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">
&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.NonNull&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">NonNullExample&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Something&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">NonNullExample&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@NonNull&lt;/span> &lt;span class="n">Person&lt;/span> &lt;span class="n">person&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">person&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NullPointerException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;person is marked @NonNull but is null&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">person&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="cleanup">&lt;code>@Cleanup&lt;/code>&lt;/h4>
&lt;p>资源管理，自动调用&lt;code>close()&lt;/code>方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.Cleanup&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CleanupExample&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Cleanup&lt;/span> &lt;span class="n">InputStream&lt;/span> &lt;span class="n">in&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FileInputStream&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;span class="nd">@Cleanup&lt;/span> &lt;span class="n">OutputStream&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FileOutputStream&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">10000&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">read&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">write&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>等价于&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CleanupExample&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">InputStream&lt;/span> &lt;span class="n">in&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FileInputStream&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">OutputStream&lt;/span> &lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FileOutputStream&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">]);&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">byte&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">10000&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">read&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">write&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">in&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">in&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="getter-setter">&lt;code>@Getter @Setter&lt;/code>&lt;/h4>
&lt;p>自动生成&lt;code>Getter&lt;/code>和&lt;code>Setter&lt;/code>代码&lt;/p>
&lt;ul>
&lt;li>
&lt;p>默认情况下，生成的getter/setter方法被标记为&lt;code>public&lt;/code>,除非指定了&lt;code>AccessLevel&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>同样可以加&lt;code>@Getter&lt;/code>和&lt;code>@Setter&lt;/code>注解作用到类上， 那样类中所有的非静态属性都会自动生成getter/setter代码&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果不想给某个属性自动生成getter/setter代码，可以标记类属性为&lt;code>AccessLevel.NONE&lt;/code>。这样可以覆盖给类添加&lt;code>@Getter&lt;/code>, &lt;code>@Setter&lt;/code> &lt;code>@Data&lt;/code>产生的行为。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.AccessLevel&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.Getter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.Setter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">GetterSetterExample&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Age of the person. Water is wet.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param age New value for this person&amp;#39;s age. Sky is blue.
&lt;/span>&lt;span class="cm"> * @return The current value of this person&amp;#39;s age. Circles are round.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Getter&lt;/span> &lt;span class="nd">@Setter&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Name of the person.
&lt;/span>&lt;span class="cm"> * -- SETTER --
&lt;/span>&lt;span class="cm"> * Changes the name of this person.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param name The new value.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Setter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AccessLevel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">PROTECTED&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Override&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">toString&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%s (age: %d)&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>等价于&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">GetterSetterExample&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Age of the person. Water is wet.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Name of the person.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Override&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">toString&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;%s (age: %d)&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Age of the person. Water is wet.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @return The current value of this person&amp;#39;s age. Circles are round.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getAge&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Age of the person. Water is wet.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param age New value for this person&amp;#39;s age. Sky is blue.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setAge&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Changes the name of this person.
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param name The new value.
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="tostring">&lt;code>@ToString&lt;/code>&lt;/h4>
&lt;p>自动添加&lt;code>toSting()&lt;/code>方法，默认使用类名 + 所有的非静态属性值。&lt;/p>
&lt;p>可以通过&lt;code>@ToString.Exclude&lt;/code>来排除一些不想添加到toString()中的属性&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.ToString&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@ToString&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ToStringExample&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">STATIC_VAR&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Shape&lt;/span> &lt;span class="n">shape&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Square&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">tags&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@ToString.Exclude&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@ToString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">callSuper&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">includeFieldNames&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Square&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Shape&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">Square&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>等价于&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Arrays&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ToStringExample&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">STATIC_VAR&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Shape&lt;/span> &lt;span class="n">shape&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Square&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">tags&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Square&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Shape&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">Square&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">toString&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Square(super=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, width=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">width&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, height=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">height&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;)&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">toString&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;ToStringExample(&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">shape&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">deepToString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">tags&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;)&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="data">&lt;code>@Data&lt;/code>&lt;/h4>
&lt;p>相当于&lt;code>@ToString&lt;/code>, &lt;code>@EqualsAndHashCode&lt;/code>, &lt;code>@Getter&lt;/code>,&lt;code>@Setter&lt;/code>,&lt;code>@RequiredArgsConstructor&lt;/code>的组合&lt;/p>
&lt;h4 id="log">&lt;code>@Log&lt;/code>&lt;/h4>
&lt;p>自动为类添加&lt;code>log&lt;/code>属性，方便直接使用log&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.extern.java.Log&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.extern.slf4j.Slf4j&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Log&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LogExample&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">severe&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Something&amp;#39;s wrong here&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LogExampleOther&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Something else is wrong here&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@CommonsLog&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">topic&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;CounterLog&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LogExampleCategory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Calling the &amp;#39;CounterLog&amp;#39; with a message&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>等价于&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LogExample&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">util&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Logger&lt;/span> &lt;span class="n">log&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">util&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLogger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">LogExample&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">severe&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Something&amp;#39;s wrong here&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LogExampleOther&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">slf4j&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Logger&lt;/span> &lt;span class="n">log&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">slf4j&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LoggerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLogger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">LogExampleOther&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Something else is wrong here&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LogExampleCategory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">commons&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Log&lt;/span> &lt;span class="n">log&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">org&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">apache&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">commons&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LogFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLog&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;CounterLog&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">...&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Calling the &amp;#39;CounterLog&amp;#39; with a message&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面注解的使用，可以&lt;a href="https://projectlombok.org/features/all">参考官方文档&lt;/a>&lt;/p>
&lt;h4 id="value">&lt;code>@Value&lt;/code>&lt;/h4>
&lt;h4 id="builder">&lt;code>@Builder&lt;/code>&lt;/h4>
&lt;h4 id="synchronized">&lt;code>@Synchronized&lt;/code>&lt;/h4>
&lt;h4 id="sneakythrows">&lt;code>@SneakyThrows&lt;/code>&lt;/h4>
&lt;h4 id="with">&lt;code>@With&lt;/code>&lt;/h4>
&lt;h4 id="equalsandhashcode">&lt;code>@EqualsAndHashCode&lt;/code>&lt;/h4>
&lt;h4 id="noargsconstructor-requiredargsconstructor-allargsconstructor">&lt;code>@NoArgsConstructor @RequiredArgsConstructor @AllArgsConstructor&lt;/code>&lt;/h4>
&lt;h4 id="getterlazytrue">&lt;code>@Getter(lazy=true)&lt;/code>&lt;/h4>
&lt;p>赶紧拿起你的电脑试试吧！&lt;/p></description></item><item><title>流程控制和函数</title><link>https://crazygit.wiseturtles.com/2019/01/07/control-flow-and-functions/</link><pubDate>Mon, 07 Jan 2019 15:19:54 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2019/01/07/control-flow-and-functions/</guid><description>&lt;h2 id="流程控制">流程控制&lt;/h2>
&lt;p>流程控制的关键字&lt;/p>
&lt;ul>
&lt;li>&lt;code>while&lt;/code>&lt;/li>
&lt;li>&lt;code>if&lt;/code>&lt;/li>
&lt;li>&lt;code>guard&lt;/code>&lt;/li>
&lt;li>&lt;code>switch&lt;/code>&lt;/li>
&lt;li>&lt;code>for-in&lt;/code>&lt;/li>
&lt;li>&lt;code>continue&lt;/code>&lt;/li>
&lt;li>&lt;code>break&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="for-in">For-In&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">minutes&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">60&lt;/span>
&lt;span class="c1">// 半开区间&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">tickMark&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="mf">0.&lt;/span>&lt;span class="p">.&amp;lt;&lt;/span>&lt;span class="n">minutes&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tickMark&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 打印从0到59&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>stride(from:to:by)&lt;/code>实现设置步长的效果，半开区间&lt;/p>
&lt;p>使用&lt;code>stride(from:through:by)&lt;/code>实现设置步长的效果，全闭区别&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">minutesInterval&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">tickMark&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="bp">stride&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">from&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">to&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">minutes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">by&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">minutesInterval&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tickMark&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//打印0,5,10...55&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">tickMark&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="bp">stride&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">from&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">through&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">minutes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">by&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">minutesInterval&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tickMark&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//打印0,5,10...55,60&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="while">While&lt;/h3>
&lt;p>white循环有两种形式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// 可能不会执行循环&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">condition&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">statements&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 至少执行一次循环&lt;/span>
&lt;span class="k">repeat&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">statements&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="n">condition&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="switch">switch&lt;/h3>
&lt;p>switch语法如下图所示:&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/2018-12-26-swift-switch-syntax.png" alt="swich synatx">&lt;/p>
&lt;p>&lt;code>switch&lt;/code>中条件的判断必须是详细的，必须考虑到每一种可能存在的情况，不然&lt;code>default&lt;/code>语句是不能省略的。如下面的语句加入去掉&lt;code>default&lt;/code>语句，在运行的时候会报错。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="k">switch&lt;/span> &lt;span class="n">someCharacter&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The first letter of the alphabet&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;z&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The last letter of the alphabet&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//default:&lt;/span>
&lt;span class="c1">// print(&amp;#34;Some other charater&amp;#34;)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>默认情况下, &lt;code>swicth&lt;/code>语句的&lt;code>case&lt;/code>部分不再需要明确指定&lt;code>break&lt;/code>, 当多个case语句需要同样的逻辑时，可以使用逗号将&lt;code>case&lt;/code>语句区分&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">caseInSensitiveCharacter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="n">caseInSensitiveCharacter&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;A&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The first letter of alphabet&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// break&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;z&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Z&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The last letter of the alphabet&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// break&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Some other charater&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>case&lt;/code>语句同样可以检查是否满足一个区间的匹配&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">approximateCount&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">62&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">countedThings&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;moons orbiting Saturn&amp;#34;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">naturalCount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="n">approximateCount&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">naturalCount&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;no&amp;#34;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mf">1.&lt;/span>&lt;span class="p">.&amp;lt;&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">naturalCount&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;a few&amp;#34;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mf">5.&lt;/span>&lt;span class="p">.&amp;lt;&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">naturalCount&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;several&amp;#34;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mf">12.&lt;/span>&lt;span class="p">.&amp;lt;&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">naturalCount&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;dozens of&amp;#34;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mf">100.&lt;/span>&lt;span class="p">.&amp;lt;&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">naturalCount&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;hundreds of&amp;#34;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">naturalCount&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;many&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;There are &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">naturalCount&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">countedThings&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用元组，可以在&lt;code>switch&lt;/code>语句的&lt;code>case&lt;/code>条件中同时比较多个值，下划线&lt;code>_&lt;/code>表示匹配任意值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">somePoint&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="n">somePoint&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">somePoint&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> is at the origin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">somePoint&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> is on the x-axis&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">_&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">somePoint&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> is on the y-axis&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">2.&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">2.&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">somePoint&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> is inside the box&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">somePoint&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> is outside the box&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当条件匹配多个case语句时，只有第一个匹配的case语句会被执行，上面的例子中, &lt;code>(0, 0)&lt;/code>是满足每个条件的，但是只有第一个case语句会执行，后面的都直接被忽略了。&lt;/p>
&lt;p>&lt;code>switch&lt;/code>语句可以将匹配的&lt;code>case&lt;/code>语句赋值到一个临时变量，方便在&lt;code>case&lt;/code>语句的代码部分使用.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">anotherPoint&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="n">anotherPoint&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;on the x-axis with an x value &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;on the y-axis with an y value &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;somewhere else at (&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">, &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">)&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>switch&lt;/code>语句还可以拥有&lt;code>where&lt;/code>语句检查额外的条件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">yetAnotherPoint&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="n">yetAnotherPoint&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="kd">let&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;(&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">, &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">) is on the line x=y&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="kd">let&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;(&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">, &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">) is on the line x=-y&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="kd">let&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;(&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">, &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">) is just some arbitray&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>switch语句中，每个满足条件的case语句执行后，就结束了，不像有些语言必须在每个case后面跟上break语句，否则接下来的case语句同样会执行，如果想在switch中实现这种效果，可以使用fallthrough&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">integerToDescribe&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">description&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;The number &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">integerToDescribe&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> is&amp;#34;&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="n">integerToDescribe&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">17&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">19&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">description&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s">&amp;#34; a prime number, and also&amp;#34;&lt;/span>
&lt;span class="k">fallthrough&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">description&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s">&amp;#34; an integer.&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// The number 5 is a prime number, and also an integer.&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>PS&lt;/strong>&lt;/p>
&lt;p>&lt;code>fallthrough&lt;/code>不会检查后面的case语句条件是否满足，会直接执行&lt;/p>
&lt;p>带标签的语句语法如下， 在循环语句前设置标签即可&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/2018-12-28-swift-lable-statement.png" alt="Labeled Statements">&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="n">outter_loop&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="mf">1.&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">inner_loop&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="mf">6.&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">continue&lt;/span> &lt;span class="n">outter_loop&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">break&lt;/span> &lt;span class="n">outter_loop&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">, &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 输出&lt;/span>
&lt;span class="c1">// 1, 6&lt;/span>
&lt;span class="c1">// 1, 7&lt;/span>
&lt;span class="c1">// 1, 8&lt;/span>
&lt;span class="c1">// 1, 9&lt;/span>
&lt;span class="c1">// 1, 10&lt;/span>
&lt;span class="c1">// 3, 6&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="guard">guard&lt;/h3>
&lt;p>&lt;code>guard&lt;/code>语句和&lt;code>if&lt;/code>语句类型，根据条件的真假执行语句，与&lt;code>if&lt;/code>不同的是，&lt;code>guard&lt;/code>后必须跟&lt;code>else&lt;/code>条件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">greet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">guard&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">person&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">guard&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">location&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">person&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;location&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;I hope the weather is nice near you.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;I hope the weather is nice in &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">location&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">greet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="c1">//Hello John&lt;/span>
&lt;span class="c1">//I hope the weather is nice near you.&lt;/span>
&lt;span class="n">greet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Jane&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;location&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Cupertino&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="c1">//Hello Jane&lt;/span>
&lt;span class="c1">//I hope the weather is nice in Cupertino.&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="函数">函数&lt;/h2>
&lt;p>swift中，函数既可以作为函数的参数，也可以作为返回值存在，函数也可以嵌套函数&lt;/p>
&lt;h3 id="默认参数">默认参数&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">someFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parameterWithoutDefault&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">parameterWithDefault&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// If you omit the second argument when calling this function, then&lt;/span>
&lt;span class="c1">// the value of parameterWithDefault is 12 inside the function body.&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="不定参数">不定参数&lt;/h3>
&lt;p>在参数类型后面跟&lt;code>...&lt;/code>表示这个参数是不定的，它可以结束0个或者多个参数， 一个函数最多一个不定参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">arithmeticMean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span>&lt;span class="p">...)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Double&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">total&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">numbers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">total&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">number&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nb">Double&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">count&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">arithmeticMean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// returns 3.0, which is the arithmetic mean of these five numbers&lt;/span>
&lt;span class="n">arithmeticMean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">8.25&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">18.75&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// returns 10.0, which is the arithmetic mean of these three numbers&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="输入输出参数in-out参数">输入输出参数(In-Out参数)&lt;/h3>
&lt;p>默认情况下，函数的参数都是常量类型，当尝试从函数体内修改参数时，都会报编译错误。如果想修改参数的值，就必须使用In-Out参数，通过在参数名前使用关键字&lt;code>inout&lt;/code>。我们只能使用变量作为in-out参数，不能使用常量作为参数，因为常量是不能被修改的。在参数去使用&lt;code>&amp;amp;&lt;/code>符号，当传递in-out参数时，in-out参数不能有默认值，可变参数不能被标记为in-out参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">var&lt;/span> &lt;span class="nv">someInt&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">anotherInt&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">107&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">tesetSwapTwoInts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">_&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">temporaryA&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">b&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">temporaryA&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">swapTwoInts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">someInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">anotherInt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 会报编译错误&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">swapTwoInts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kr">inout&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">_&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kr">inout&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">temporaryA&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="n">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">b&lt;/span>
&lt;span class="n">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">temporaryA&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">swapTwoInts&lt;/span>&lt;span class="p">(&amp;amp;&lt;/span>&lt;span class="n">someInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">&amp;amp;&lt;/span>&lt;span class="n">anotherInt&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;someInt is now &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">someInt&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">, and another is now &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">anotherInt&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// someInt is now 107, and another is now 3&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="函数类型">函数类型&lt;/h3>
&lt;p>每个函数都有函数类型，它是由函数参数类型和函数返回值类型构成的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">addTwoInts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">_&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">multiplyTwoInts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">_&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">b&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面两个函数类型都是&lt;code>(Int, Int) -&amp;gt; Int&lt;/code>&lt;/p>
&lt;p>没有参数和返回值的函数类型&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">printHelloWorld&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello, world&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的函数类型是&lt;code>() -&amp;gt; Void&lt;/code>&lt;/p>
&lt;h3 id="使用函数类型">使用函数类型&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>我们可以像使用普通类型的变量一样使用函数类型。例如，将一个函数赋值为变量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">var&lt;/span> &lt;span class="nv">mathFunction&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">addTwoInts&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>将函数作为参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">printMathResult&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">mathFunction&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">_&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">_&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Result: &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">mathFunction&lt;/span>&lt;span class="si">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="si">))&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printMathResult&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">addTwoInts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>将函数作为返回值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">stepForward&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">input&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">stepBackward&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">input&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">chooseStepFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">backward&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">backward&lt;/span> &lt;span class="p">?&lt;/span> &lt;span class="n">stepBackward&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">stepForward&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">currentValue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">moveNearerToZero&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">chooseStepFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">backward&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">currentValue&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Counting to zero:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Counting to zero:&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">currentValue&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">currentValue&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">... &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">currentValue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">moveNearerToZero&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">currentValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;zero!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="函数嵌套">函数嵌套&lt;/h3>
&lt;p>一个函数可以包含另一个函数的定义，或者将嵌套的函数作为返回值返回&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">chooseStepFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">backward&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">stepForward&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">input&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">stepBackward&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">input&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">backward&lt;/span> &lt;span class="p">?&lt;/span> &lt;span class="n">stepBackward&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">stepForward&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">currentValue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">4&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">moveNearerToZero&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">chooseStepFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">backward&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">currentValue&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Counting to zero:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Counting to zero:&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">currentValue&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">currentValue&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">... &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">currentValue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">moveNearerToZero&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">currentValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;zero!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>集合类型</title><link>https://crazygit.wiseturtles.com/2018/12/26/collection-types/</link><pubDate>Wed, 26 Dec 2018 23:11:51 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2018/12/26/collection-types/</guid><description>&lt;p>Swift有三种主要的集合类型，分别是:&lt;/p>
&lt;ul>
&lt;li>Arrays&lt;/li>
&lt;li>Sets&lt;/li>
&lt;li>dictionaries&lt;/li>
&lt;/ul>
&lt;h2 id="数组arrays">数组（Arrays）&lt;/h2>
&lt;p>数组是包含&lt;strong>相同数据类型&lt;/strong>的&lt;strong>有序&lt;/strong>数据集合，&lt;strong>允许相同的数据&lt;/strong>出现在不同的位置。&lt;/p>
&lt;h3 id="创建一个空数组">创建一个空数组&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// 两种不同的写法&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">someInts&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">]()&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">anotherInts&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">someInts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 0&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">anotherInts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 0&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;h3 id="创建有值的数组">创建有值的数组&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">var&lt;/span> &lt;span class="nv">shoppingList&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Eggs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Milk&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="创建含有默认值的数组">创建含有默认值的数组&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">var&lt;/span> &lt;span class="nv">threeDoubles&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repeating&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">count&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">threeDoubles&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// [0.0, 0.0, 0.0]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="通过相加数组创建新的数组">通过相加数组创建新的数组&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">var&lt;/span> &lt;span class="nv">threeDoubles&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repeating&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">count&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">threeDoubles&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">anotherTrheeDoubles&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repeating&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">2.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">count&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">sixDoubles&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">threeDoubles&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">anotherTrheeDoubles&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sixDoubles&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="数组常用的属性和方法">数组常用的属性和方法&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>跟字符串类型类似，使用&lt;code>count&lt;/code>属性获取数组元素的个数， 使用&lt;code>isEmpty&lt;/code>属性可以检查数组是否为空。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;code>append&lt;/code>方法可以添加一个元素到数组&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;code>+=&lt;/code>可以添加一个数组到另一个数组&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">var&lt;/span> &lt;span class="nv">shoppingList&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Eggs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Milk&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">shoppingList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Flour&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">shoppingList&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Baking&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Powder&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用下标可以修改数组元素&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="n">shoppingList&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Six Eggs&amp;#34;&lt;/span>
&lt;span class="c1">// 下标指定的元素个数和赋值的元素个数不一定要相同&lt;/span>
&lt;span class="n">shoppingList&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mf">1.&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Bananas&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Apples&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>插入/删除一个元素&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="n">shoppingList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Maple Syrup&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">at&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 删除指定位置的元素&lt;/span>
&lt;span class="n">shoppingList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 删除最后一个元素&lt;/span>
&lt;span class="n">shoppingList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">removeLast&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>遍历数组&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="k">for&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">shoppingList&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="集合sets">集合(Sets)&lt;/h2>
&lt;p>集合就是&lt;strong>无序&lt;/strong>， &lt;strong>唯一&lt;/strong>， &lt;strong>相同数据类型&lt;/strong>的集合&lt;/p>
&lt;h3 id="集合的中的数据类型必须是hashble">集合的中的数据类型必须是&lt;code>hashble&lt;/code>&lt;/h3>
&lt;p>为了实现唯一性，集合中的元素必须是&lt;code>hashble&lt;/code>的，比较两个元素是否相同时，比较的其实就是hash值，比如&lt;code>a&lt;/code> == &lt;code>b&lt;/code> 就是比较&lt;code>a.hashValue&lt;/code> == &lt;code>b.hashValue&lt;/code>。&lt;/p>
&lt;p>所有的Swift基础类型(&lt;code>String&lt;/code>, &lt;code>Int&lt;/code>, &lt;code>Double&lt;/code>和&lt;code>Bool&lt;/code>)默认都是&lt;code>hashble&lt;/code>的。当自定义类型需要加入到Sets时，需要自己实现&lt;code>Hashable&lt;/code>协议。&lt;/p>
&lt;h3 id="创建集合">创建集合&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// 创建一个空集合&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">letters&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">Character&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">anohterletters&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">Character&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="c1">// 创建初始有值的集合&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">favoriteGenres&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Rock&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Classical&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Hip hop&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1">// 简写形式&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">favoriteGenres&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Set&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Rock&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Classical&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Hip hop&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="集合常用的属性和方法">集合常用的属性和方法&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>跟字符串类型类似，使用&lt;code>count&lt;/code>属性获取集合元素的个数， 使用&lt;code>isEmpty&lt;/code>属性可以检查集合是否为空。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>往集合添加元素可以使用&lt;code>insert(_:)&lt;/code>方法， 删除元素使用&lt;code>remove(_:)&lt;/code> 方法, 检查是否包含某个元素可以使用&lt;code>contains(_:)&lt;/code>方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">var&lt;/span> &lt;span class="nv">fruits&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Set&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Pear&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Orange&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">fruits&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Banana&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">fruits&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Apple&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">fruits&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Pear&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 遍及集合&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">fruit&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">fruits&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fruit&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="集合操作">集合操作&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/2018-12-03-swift_set_operations.png" alt="Set Opearations">&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">oddDigits&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Set&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">evenDigits&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Set&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">singleDigitPrimerNumbers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Set&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1">// 两个集合的交集&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">oddDigits&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">intersection&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">evenDigits&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="bp">sorted&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1">// []&lt;/span>
&lt;span class="c1">// 两个集合交集以外的集合&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">oddDigits&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">symmetricDifference&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">singleDigitPrimerNumbers&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="bp">sorted&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1">// [1, 2, 9]&lt;/span>
&lt;span class="c1">// 两个集合的并集&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">oddDigits&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">union&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">evenDigits&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="bp">sorted&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/span>
&lt;span class="c1">// 属于集合a, 但是不属于集合b&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">oddDigits&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">subtracting&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">singleDigitPrimerNumbers&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="bp">sorted&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1">// [1, 9]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="集合关系">集合关系&lt;/h3>
&lt;p>假如有三个集合&lt;code>a&lt;/code>, &lt;code>b&lt;/code>, &lt;code>c&lt;/code>的关系如下图所示:&lt;/p>
&lt;ul>
&lt;li>&lt;code>a&lt;/code>是&lt;code>b&lt;/code>的父集，&lt;code>a&lt;/code>包含所有&lt;code>b&lt;/code>中的元素&lt;/li>
&lt;li>&lt;code>b&lt;/code>是&lt;code>a&lt;/code>的自己，&lt;code>b&lt;/code>中的元素&lt;code>a&lt;/code>中都有&lt;/li>
&lt;li>&lt;code>b&lt;/code>和&lt;code>c&lt;/code>没有相交，它们之间没有相同的元素&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/2018-12-03-swift_set_membership.png" alt="set membership">&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">houseAnimals&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Set&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;🐶&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;🐱&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">farmAnimals&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Set&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;🐮&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;🐔&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;🐑&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;🐶&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;🐱&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">cityAnimals&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Set&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;🐦&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;🐭&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1">// 用&amp;#34;==&amp;#34;判断两个集合是否相同&lt;/span>
&lt;span class="n">houseAnimals&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="n">cityAnimals&lt;/span> &lt;span class="c1">// false&lt;/span>
&lt;span class="c1">// 是否是子集(两个集合可能相等)&lt;/span>
&lt;span class="n">houseAnimals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isSubset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">farmAnimals&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// true&lt;/span>
&lt;span class="c1">// 是否是父集&lt;/span>
&lt;span class="n">farmAnimals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isSuperset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">houseAnimals&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// true&lt;/span>
&lt;span class="c1">// 是否不相交&lt;/span>
&lt;span class="n">farmAnimals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isDisjoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">with&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">cityAnimals&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// true&lt;/span>
&lt;span class="c1">// 判断是否是子集或父集(两个集合不相等)&lt;/span>
&lt;span class="n">houseAnimals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isStrictSubset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">farmAnimals&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// true&lt;/span>
&lt;span class="n">farmAnimals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isStrictSuperset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">houseAnimals&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// true&lt;/span>
&lt;span class="n">houseAnimals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isSubset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">houseAnimals&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// true&lt;/span>
&lt;span class="n">houseAnimals&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isStrictSubset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">houseAnimals&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// false&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="字典dictionaries">字典(Dictionaries)&lt;/h2>
&lt;p>字典就是键值对的集合，跟Set类型一样，字典的键也必须是&lt;code>hashble&lt;/code>的，字段中的元素都是无序的&lt;/p>
&lt;h3 id="创建一个空字典">创建一个空字典&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">var&lt;/span> &lt;span class="nv">namesOfIntegers&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">]()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="使用字典语法创建字典">使用字典语法创建字典&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">var&lt;/span> &lt;span class="nv">airports&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;XYZ&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Toronto Pearson&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;DUB&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Dublin&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="数组常用的属性和方法-1">数组常用的属性和方法&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>跟数组一样，可以使用&lt;em>只读&lt;/em>属性&lt;code>count&lt;/code>获取字典中的元素个数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;code>isEmpty&lt;/code>属性检查字典元素格式是否为0&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以直接使用下标访问字典&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="n">airports&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;LHR&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;London&amp;#34;&lt;/span>
&lt;span class="n">airports&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;LHR&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;London Heathrow&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>除了上面通过下标的方式修改元素的值之外，也可以使用&lt;code>updateValue(_:forKey:)&lt;/code>来修改元素的值，与使用下标方式不同的值，如果指定的key存在的话，它除了改变key的值之外，还会返回key之前的值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="n">airports&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Name&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;John&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">oldValue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">airports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">updateValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Crazygit&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">forKey&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Name&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">oldValue&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// print &amp;#34;John&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>通过下标访问字段的时候，返回的值也是可选值类型, 当key不存在时，直接返回&lt;code>nil&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="k">if&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">airports&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Name&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;No Name&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>删除元素有两种方式，一种是使用下标的方式，将元素赋值为&lt;code>nil&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="n">airports&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Name&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">airports&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Name键已经从字典中移除&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另一种方式是使用&lt;code>removeValue(forkey:)&lt;/code>方法，与通过下标访问的不同的是，它会返回被移除的值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="k">if&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">removedValue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">airports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">removeValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">forKey&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;DUB&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Remove key DUB from airports dict&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;airport dict dose not contain a value for DUB&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>遍历字典&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// 遍历键和值&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">airports&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> =&amp;gt; &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 遍历键&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">airports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">keys&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 遍历值&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">airports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">values&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>Swift基本运算符</title><link>https://crazygit.wiseturtles.com/2018/12/03/basic-operators/</link><pubDate>Mon, 03 Dec 2018 12:01:55 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2018/12/03/basic-operators/</guid><description>&lt;h3 id="比较运算符">比较运算符&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Swift中提供了检查两个对象是否同引用同一个示例的操作符&lt;code>===&lt;/code>和&lt;code>!==&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当两个元祖有相同的元素类型和个数时，可以直接比较两个元祖。从左到右，直到找到不相等的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;zebra&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// true because 1 is less than 2; &amp;#34;zebra&amp;#34; and &amp;#34;apple&amp;#34; are not compared&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bird&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// true because 3 is equal to 3, and &amp;#34;apple&amp;#34; is less than &amp;#34;bird&amp;#34;&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;dog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;dog&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// true because 4 is equal to 4, and &amp;#34;dog&amp;#34; is equal to &amp;#34;dog”&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="nil-coalescing">Nil-Coalescing&lt;/h3>
&lt;p>用法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="n">a&lt;/span> &lt;span class="p">??&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当可选值&lt;code>a&lt;/code>包含值的时候，上面的表达式返回&lt;code>a&lt;/code>的值，当&lt;code>a&lt;/code>为&lt;code>nil&lt;/code>时，否则返回&lt;code>b&lt;/code>，&lt;/p>
&lt;p>等价于三目运算符&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="n">a&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">?&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">!:&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用这个运算符的好处就是在处理可选值时，不用强制拆包&lt;/p>
&lt;p>例如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">defaultColorName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;red&amp;#34;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">userDefinedColorName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">?&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">colorNameToUse&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">userDefinedColorName&lt;/span> &lt;span class="p">??&lt;/span> &lt;span class="n">defaultColorName&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">colorNameToUse&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// red&lt;/span>
&lt;span class="n">userDefinedColorName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;green&amp;#34;&lt;/span>
&lt;span class="n">colorNameToUse&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">userDefinedColorName&lt;/span> &lt;span class="p">??&lt;/span> &lt;span class="n">defaultColorName&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">colorNameToUse&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// green&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="范围运算符">范围运算符&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// Closed Range Operator&lt;/span>
&lt;span class="c1">// 全闭包，包含`a`和`b`, 必须满足`a`&amp;lt;=`b`&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// Half-Open Range Operator&lt;/span>
&lt;span class="c1">//半闭包，包含`a`, 但是不包含`b`&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">..&amp;lt;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//one-sided range&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// Closed Range Operator&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="mf">1.&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">terminator&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 1,2,3,4,5,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">names&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Anna&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Alex&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Brian&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Jack&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">count&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">names&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">count&lt;/span>
&lt;span class="c1">// Half-Open Range Operator&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="mf">0.&lt;/span>&lt;span class="p">.&amp;lt;&lt;/span>&lt;span class="bp">count&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">names&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">terminator&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Anna,Alex,Brian,Jack,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// one-sided range&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">names&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mf">2.&lt;/span>&lt;span class="p">..]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">terminator&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Brian,Jack,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">names&lt;/span>&lt;span class="p">[..&amp;lt;&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">terminator&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Anna,Alex,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 检查是否包含特定的值&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">range&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="mi">5&lt;/span>
&lt;span class="n">range&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="逻辑运算符">逻辑运算符&lt;/h3>
&lt;ul>
&lt;li>&lt;code>&amp;amp;&amp;amp;&lt;/code> 逻辑与，短路运算，钱一个值为&lt;code>false&lt;/code>时，直接返回&lt;code>false&lt;/code>, 不会计算后面的表达式&lt;/li>
&lt;li>&lt;code>||&lt;/code> 逻辑或&lt;/li>
&lt;li>&lt;code>!a&lt;/code> 非运算&lt;/li>
&lt;/ul>
&lt;p>当有多个&lt;code>&amp;amp;&amp;amp;&lt;/code>和&lt;code>||&lt;/code>运算时，他们的优先级是从左到右的。这种情况下最好使用括号来明确优先级顺序&lt;/p>
&lt;h3 id="字符characters和字符串string">字符(Characters)和字符串(String)&lt;/h3>
&lt;ul>
&lt;li>字符串只能使用双引号&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/li>
&lt;li>多行字符串可以用三引号&lt;code>&amp;quot;&amp;quot;&amp;quot;&lt;/code>&lt;/li>
&lt;li>多行字符串缩进效果如下图所示&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/2018-11-30-string_indent.png" alt="">&lt;/p>
&lt;ul>
&lt;li>&lt;code>isEmpty&lt;/code>属性可以判断一个字符串是否为空&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// 注意是属性，不是方法&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">emptyString&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">emptyString&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">isEmpty&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Nothing to see here&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>声明字符&lt;/li>
&lt;/ul>
&lt;p>通过&lt;code>Character&lt;/code>类型声明字符&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">character&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Character&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>字符串也可以由字符串数组来声明&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">catCharacter&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">Character&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;C&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;t&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;!&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">catString&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">catCharacter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">catString&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// &amp;#34;Cat!&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>字符和字符串拼接&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// 用 + 号拼接字符串&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">string1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Hello &amp;#34;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">string2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">welcome&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">string1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">string2&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">welcome&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// &amp;#34;Hello World&amp;#34;&lt;/span>
&lt;span class="c1">// 用append方法添加字符到字符串&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">exclamationMark&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">Character&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;!&amp;#34;&lt;/span>
&lt;span class="n">welcome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exclamationMark&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">welcome&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// &amp;#34;Hello World!&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>统计字符的个数&lt;/li>
&lt;/ul>
&lt;p>使用&lt;code>count&lt;/code>属性，可以求一个字符串中的字符个数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">foo&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;ABCDEFG&amp;#34;&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 7&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>字符串索引&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">foo&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;ABCDEFGHIJKLMN&amp;#34;&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">startIndex&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1">// A&lt;/span>
&lt;span class="c1">// 从这里看出swift是否支持函数重载，两个函数只是参数名字不一样&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">before&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">endIndex&lt;/span>&lt;span class="p">)])&lt;/span> &lt;span class="c1">// N&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">after&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">startIndex&lt;/span>&lt;span class="p">)])&lt;/span> &lt;span class="c1">// B&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">index&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">startIndex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">offsetBy&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1">// H&lt;/span>
&lt;span class="c1">// 通过indices属性可以遍历每个字符&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">indices&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">terminator&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// ABCDEFGHIJKLMN&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>字符串插入和删除操作&lt;/li>
&lt;/ul>
&lt;p>使用&lt;code>insert(_:at:)&lt;/code>和&lt;code>insert(contentsOf:at:)&lt;/code>插入字符和字符串
使用&lt;code>remove(at:)&lt;/code>和&lt;code>removeSubrange(_:)&lt;/code>删除字符和字符串&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">var&lt;/span> &lt;span class="nv">welcome&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>
&lt;span class="n">welcome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">at&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">welcome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">endIndex&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// welcome变成 &amp;#34;hello!&amp;#34;&lt;/span>
&lt;span class="n">welcome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">contentsOf&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34; there&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">at&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">welcome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">before&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">welcome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">endIndex&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">// welcome变成&amp;#34;hello there!&amp;#34;&lt;/span>
&lt;span class="c1">// remove方法会返回被移除的字符&lt;/span>
&lt;span class="n">welcome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">at&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">welcome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">before&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">welcome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">endIndex&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">// 返回值是&amp;#34;!&amp;#34;，welcome变成 &amp;#34;hello there&amp;#34;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">range&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">welcome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">welcome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">endIndex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">offsetBy&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)..&amp;lt;&lt;/span>&lt;span class="n">welcome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">endIndex&lt;/span>
&lt;span class="n">welcome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">removeSubrange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">range&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// welcome变成 &amp;#34;hello&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>子字符串&lt;/li>
&lt;/ul>
&lt;p>在Swift中，当从一个字符串中获取字符串时，得到的是一个&lt;code>Substring&lt;/code>类型，并不是一个新的字符串，&lt;code>Substring&lt;/code>和字符串类型的方法完全相同，唯一的区别就是子字符串只会在操作字符串时短暂保存，当需要长期使用子字符串时，应该将它转换为字符串类型&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">greeting&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Hello, world!&amp;#34;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">index&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">greeting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">firstIndex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;,&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">??&lt;/span> &lt;span class="n">greeting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">endIndex&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">beginning&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">greeting&lt;/span>&lt;span class="p">[..&amp;lt;&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1">// beginning is &amp;#34;Hello&amp;#34;&lt;/span>
&lt;span class="c1">// convert the result to string for long-term storage.&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">newString&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">beginning&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因此子字符中类型并不适合长期保存。&lt;/p>
&lt;ul>
&lt;li>字符串前缀和后缀&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">msg&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;span class="n">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">hasPrefix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// true&lt;/span>
&lt;span class="n">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">hasSuffix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// true&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Swift基本语法</title><link>https://crazygit.wiseturtles.com/2018/10/30/swfit-the-basics/</link><pubDate>Tue, 30 Oct 2018 11:58:55 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2018/10/30/swfit-the-basics/</guid><description>&lt;h3 id="常量和变量">常量和变量&lt;/h3>
&lt;p>一次声明多个变量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">var&lt;/span> &lt;span class="nv">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mf">0.0&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">red&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">green&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">blue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="变量名">变量名&lt;/h3>
&lt;p>Swift的变量名&lt;strong>可以是&lt;/strong>任何的Unicode字符, 如: 中文, Emoji表情等都可以是变量名。&lt;/p>
&lt;p>常量与变量名不能包含空格符,数学符号,箭头,保留的(或者非法的)Unicode 码位,连线与制表符。也不能以数字开头, 但是可以在常量与变量名的其他地方包含数字。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="err">π&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mf">3.14159&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="err">你好&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;你好世界&amp;#34;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="err">🐶🐮&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;dogcow”
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="print函数">print函数&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">,&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;John&amp;#34;&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 可以一次传入多个参数&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">separator&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 指定分隔符&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">separator&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">terminator&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//指定行尾截止符号，默认是回车&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;My name is &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 变量替换&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="注释">注释&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// 单行注释&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm">多行注释
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="分号">分号&lt;/h3>
&lt;p>swift语法中，每行代码结尾的分号是可以省略的，但是如果一行包含多个语句时，分号则不能省略&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">cat&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">cat&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cat&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="整型">整型&lt;/h3>
&lt;p>一些整型常量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// 有符号数最大值和最小值&lt;/span>
&lt;span class="nb">Int&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">max&lt;/span>
&lt;span class="nb">Int&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">min&lt;/span>
&lt;span class="c1">// 无符号数最大值和最小值&lt;/span>
&lt;span class="nb">UInt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">max&lt;/span>
&lt;span class="n">Uint&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">min&lt;/span>
&lt;span class="c1">// 指定机器位数&lt;/span>
&lt;span class="nb">Int8&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">max&lt;/span>
&lt;span class="nb">Int8&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">min&lt;/span>
&lt;span class="c1">// 二级制表示17&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">binaryInt&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mb">0b10001&lt;/span>
&lt;span class="c1">// 八进制表示17&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">octalInt&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mo">0o21&lt;/span>
&lt;span class="c1">// 十六进制表示17&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">hexInt&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mh">0x11&lt;/span>
&lt;span class="c1">// 小技巧: 整型赋值时的小技巧，可以用下划线分隔，方便阅读&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1_000_1000&lt;/span> &lt;span class="c1">// 一百万&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">decimalInteger&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">17&lt;/span>
&lt;span class="c1">// 二进制的17 “0b”&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">binaryInteger&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mb">0b10001&lt;/span>
&lt;span class="c1">// 八进制的17 &amp;#34;0o&amp;#34;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">octalInteger&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mo">0o21&lt;/span>
&lt;span class="c1">// 十六进制的17 &amp;#34;0x&amp;#34;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">hexadecimalInteger&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mh">0x11&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一般建议直接使用&lt;code>Int&lt;/code>类型，它的位数默认与当前使用的操作平台相关:&lt;/p>
&lt;ul>
&lt;li>在32位的平台上，等效于&lt;code>Int32&lt;/code>&lt;/li>
&lt;li>在64位的平台上，等效于&lt;code>Int64&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="浮点型">浮点型&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// 单精度和双精度浮点数&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Float&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mf">3.1415926&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mf">3.1415926&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="类型别名">类型别名&lt;/h3>
&lt;p>可以使用 &lt;code>typealias&lt;/code> 关键字来定义类型别名&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">typealias&lt;/span> &lt;span class="n">AudioSample&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">UInt16&lt;/span>
&lt;span class="c1">//AudioSample.min 实际上是 UInt16.min ,所以会给 maxAmplitudeFound 赋一个初值 0&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">maxAmplitudeFound&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">AudioSample&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">min&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="布尔类型和if语句">布尔类型和if语句&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// bool值都是小写&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">imTrue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Bool&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">imFalse&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Bool&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">imTrue&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;I am True&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;3+4 == 7&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;I am false&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 不能用非0值作为为真的条件，如下面的语句会报语法错误&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;I am true&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="元组">元组&lt;/h3>
&lt;ul>
&lt;li>将多个不同的值集合成一个数据&lt;/li>
&lt;li>可以有任意多个值&lt;/li>
&lt;li>不同的值可以是不同的类型&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">var&lt;/span> &lt;span class="nv">point&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">httpResponse&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">404&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Not Found&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">point2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 元组赋值&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">point&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 与pythn中不一样，赋值时等号左右的圆括号不能省略&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">point&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">status_code&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">status_message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">http404Error&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 通过下标访问元组元素, 与python中使用下标的方式不太一样&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">point&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">point&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 通过元素名称访问，有点python字典的感觉&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">point3&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">point3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>
&lt;span class="n">point3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>
&lt;span class="c1">// 声明时指定元素名称&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">point4&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">point4&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>
&lt;span class="n">point4&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>
&lt;span class="c1">// 使用&amp;#34;_&amp;#34;忽略一些元素&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">logingResult&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;xxxxx&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">isLoginSuccess&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">_&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">logingResult&lt;/span>
&lt;span class="n">isLoginSuccess&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="可选值">可选值&lt;/h3>
&lt;p>当可以确定一个可选值包含有值时，可以使用&lt;code>!&lt;/code>来强制使用值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">possibleNumber&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;123&amp;#34;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">convertedNumber&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">possibleNumber&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">convertedNumber&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;convertedNumber contains some integer value.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">convertedNumber&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;convertedNumber has an integer value of &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">convertedNumber&lt;/span>&lt;span class="p">!&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>if&lt;/code>语句中可以同时绑定多个可选值（用&lt;code>,&lt;/code>分隔）。只有当所有的值都真实有值时，&lt;code>if&lt;/code>条件才成立。&lt;/p>
&lt;p>下面两个if语句是等效的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="k">if&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">firstNumber&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;4&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">secondNumber&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;42&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">firstNumber&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">secondNumber&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">secondNumber&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">firstNumber&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> &amp;lt; &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">secondNumber&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> &amp;lt; 100&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//等效&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">firstNumber&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;4&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">secondNumber&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;42&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">firstNumber&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">secondNumber&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">secondNumber&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">firstNumber&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> &amp;lt; &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">secondNumber&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> &amp;lt; 100&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>if语句绑定的可选值有效范围仅在if语句内部&lt;/p>
&lt;h3 id="断言assertions和先决条件preconditons">断言(Assertions)和先决条件(Preconditons)&lt;/h3>
&lt;p>Assertions和Preconditions的区别在于Assertions只在debug build中生效，
而Precondtions在debug build和production build中都生效。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">
&lt;span class="kd">let&lt;/span> &lt;span class="nv">age&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="bp">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;A person&amp;#39;s age can&amp;#39;t be less than zero.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//省略断言消息&lt;/span>
&lt;span class="bp">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//使用assertionFailure直接抛出断言异常&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;You can ride the rollercoaster or the ferris wheel.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;You can ride the ferris wheel.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">assertionFailure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A person&amp;#39;s age can&amp;#39;t be less than zero.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">index&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="bp">precondition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Index must greater than zero.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//使用preconditionFailure直接抛出异常&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">age&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;You can ride the rollercoaster or the ferris wheel.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;You can ride the ferris wheel.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">preconditionFailure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A person&amp;#39;s age can&amp;#39;t be less than zero.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>PS&lt;/strong>:&lt;/p>
&lt;p>当在编译的时候用的是&lt;code>unchecked mode&lt;/code>(&lt;code>-Ounckecked&lt;/code>), precondition是不会被执行的，默认它们的条件都是成立的，返回&lt;code>true&lt;/code>。但是，使&lt;code>fatalError(_:file:line:)&lt;/code>是会生效的，无论编译参数是什么。&lt;/p></description></item><item><title>Developing iOS 11 Apps with Swift视频下载</title><link>https://crazygit.wiseturtles.com/2018/10/29/developing_ios11_apps_with_swift/</link><pubDate>Mon, 29 Oct 2018 16:15:15 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2018/10/29/developing_ios11_apps_with_swift/</guid><description>&lt;p>从Mac版的iTunes里找到课程，通过分享链接，获取下面的地址，
其实就是一个xml文件&lt;/p>
&lt;p>&lt;a href="http://podcasts.apple.com/stanford/developing_ios11_apps.xml">iTunes podcasts 视频解析地址&lt;/a>&lt;/p>
&lt;p>解析出所有的下载地址&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">xml.etree.ElementTree&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">ET&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">requests&lt;/span>
&lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ET&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fromstring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http://podcasts.apple.com/stanford/developing_ios11_apps.xml&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">enclosure&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">findall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.//enclosure&amp;#39;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">enclosure&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;url&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="解析结果">解析结果&lt;/h2>
&lt;h3 id="视频下载地址视频里内置了英文字幕要播放器支持才能看到也可以用字幕提取工具ccextractorhttpswwwccextractororg提取字幕">视频下载地址(视频里内置了英文字幕，要播放器支持才能看到。也可以用字幕提取工具&lt;a href="https://www.ccextractor.org/">CCExtractor&lt;/a>提取字幕)&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/1_Introduction_to_iOS_11_Xcode_9_and_Swift_4_311-6554896743492737986-01_9_25_17_1080p_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/1_Introduction_to_iOS_11_Xcode_9_and_Swift_4_311-6554896743492737986-01_9_25_17_1080p_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/2_MVC_309-2503760600607007728-02_9_27_17_CS193p_720p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/2_MVC_309-2503760600607007728-02_9_27_17_CS193p_720p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/504-8815564797834236275-Friday_01_9_29_17_WIP02_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/504-8815564797834236275-Friday_01_9_29_17_WIP02_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/3_Swift_Programming_Language_319-2557083044702627203-03_10_02_17_prores_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/3_Swift_Programming_Language_319-2557083044702627203-03_10_02_17_prores_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/4_More_Swift_336-3848977901446740876-04_10_04_17_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/4_More_Swift_336-3848977901446740876-04_10_04_17_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/5_Drawing_317-8878116075149346380-05_10_09_17_prores_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/5_Drawing_317-8878116075149346380-05_10_09_17_prores_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/6_Multitouch_321-6728107643679048758-06_10_11_17_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/6_Multitouch_321-6728107643679048758-06_10_11_17_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/309-96054835436878188-07_10_16_17_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/309-96054835436878188-07_10_16_17_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/327-7793456677118526749-08_10_18_17_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/327-7793456677118526749-08_10_18_17_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/533-6252825471341223932-Friday_02_WIP02_1080p_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/533-6252825471341223932-Friday_02_WIP02_1080p_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/335-8360806109958293556-09_10_23_17_prores_CS193p_1080p_3mb_cc2.m4v">http://podcasts.apple.com/stanford/media/335-8360806109958293556-09_10_23_17_prores_CS193p_1080p_3mb_cc2.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/311-695518005627000002-10_10_25_17_prores_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/311-695518005627000002-10_10_25_17_prores_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/531-9139141023410630962-Friday_03_10_27_17_WIP02_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/531-9139141023410630962-Friday_03_10_27_17_WIP02_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/335-5035465745252410791-11_10_30_17_prores_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/335-5035465745252410791-11_10_30_17_prores_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/303-5025198319972677062-12_11_01_17_prores_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/303-5025198319972677062-12_11_01_17_prores_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/312-9097236878835223246-13_11_06_17_prores_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/312-9097236878835223246-13_11_06_17_prores_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/305-1366423083051400424-14_11_08_17_prores_1_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/305-1366423083051400424-14_11_08_17_prores_1_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/532-3346936006580998385-15_11_13_17_prores_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/532-3346936006580998385-15_11_13_17_prores_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/511-8983128522622077657-16_11_15_17_prores_CS193p_1080p_3mb.m4v">http://podcasts.apple.com/stanford/media/511-8983128522622077657-16_11_15_17_prores_CS193p_1080p_3mb.m4v&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/506-4176003801724267012-17_11_29_17_WIP02_CS193p_1080p_3mb_cc.m4v">http://podcasts.apple.com/stanford/media/506-4176003801724267012-17_11_29_17_WIP02_CS193p_1080p_3mb_cc.m4v&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="pdf课件下载地址">PDF课件下载地址&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/Lecture_1_Slides.pdf">http://podcasts.apple.com/stanford/media/Lecture_1_Slides.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/Reading_1_Intro_to_Swift.pdf">http://podcasts.apple.com/stanford/media/Reading_1_Intro_to_Swift.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/Lecture_2_Slides.pdf">http://podcasts.apple.com/stanford/media/Lecture_2_Slides.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/Programming_Project_1_Concentration.pdf">http://podcasts.apple.com/stanford/Programming_Project_1_Concentration.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/Lecture_3_Slides.pdf">http://podcasts.apple.com/stanford/media/Lecture_3_Slides.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/Reading_2_Intro_to_Swift.pdf">http://podcasts.apple.com/stanford/media/Reading_2_Intro_to_Swift.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/Lecture_4_Slides.pdf">http://podcasts.apple.com/stanford/media/Lecture_4_Slides.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/Programming_Project%202_Set.pdf">http://podcasts.apple.com/stanford/Programming_Project%202_Set.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/Lecture_5_Slides.pdf">http://podcasts.apple.com/stanford/media/Lecture_5_Slides.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/336-3367719085568248138-CS193P_F17_Reading_3.pdf">http://podcasts.apple.com/stanford/media/336-3367719085568248138-CS193P_F17_Reading_3.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/Lecture_6_Slides.pdf">http://podcasts.apple.com/stanford/media/Lecture_6_Slides.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/309-1475895300459033080-CS193P_F17_Assignment_3.pdf">http://podcasts.apple.com/stanford/media/309-1475895300459033080-CS193P_F17_Assignment_3.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/320-5503734535583450465-CS193P_F17_Lecture_7.pdf">http://podcasts.apple.com/stanford/media/320-5503734535583450465-CS193P_F17_Lecture_7.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/335-3416648937156657194-CS193P_F17_Lecture_8.pdf">http://podcasts.apple.com/stanford/media/335-3416648937156657194-CS193P_F17_Lecture_8.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/309-2441628197055099936-CS193P_F17_Assignment_4.pdf">http://podcasts.apple.com/stanford/media/309-2441628197055099936-CS193P_F17_Assignment_4.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/332-3154341613995510587-CS193P_F17_Lecture_9.pdf">http://podcasts.apple.com/stanford/media/332-3154341613995510587-CS193P_F17_Lecture_9.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/322-6515997048783028736-CS193P_F17_Lecture_10.pdf">http://podcasts.apple.com/stanford/media/322-6515997048783028736-CS193P_F17_Lecture_10.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/317-8823617114003497609-CS193P_F17_Lecture_11.pdf">http://podcasts.apple.com/stanford/media/317-8823617114003497609-CS193P_F17_Lecture_11.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/306-4082649130340532415-CS193P_F17_Lecture_12.pdf">http://podcasts.apple.com/stanford/media/306-4082649130340532415-CS193P_F17_Lecture_12.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/308-8518403617003934463-CS193P_F17_Assignment_5.pdf">http://podcasts.apple.com/stanford/media/308-8518403617003934463-CS193P_F17_Assignment_5.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/323-4247208383177102782-CS193P_F17_Lecture_13.pdf">http://podcasts.apple.com/stanford/media/323-4247208383177102782-CS193P_F17_Lecture_13.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/322-5794459892624250293-CS193P_F17_Lecture_14.pdf">http://podcasts.apple.com/stanford/media/322-5794459892624250293-CS193P_F17_Lecture_14.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/307-9138746427331321981-CS193P_F17_Assignment_6.pdf">http://podcasts.apple.com/stanford/media/307-9138746427331321981-CS193P_F17_Assignment_6.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/522-830176750758320683-CS193P_F17_Lecture_15.pdf">http://podcasts.apple.com/stanford/media/522-830176750758320683-CS193P_F17_Lecture_15.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/512-802352814004650525-CS193P_F17_Lecture_16.pdf">http://podcasts.apple.com/stanford/media/512-802352814004650525-CS193P_F17_Lecture_16.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://podcasts.apple.com/stanford/media/520-5280642336803569160-CS193P_F17_Lecture_17_Slides.pdf">http://podcasts.apple.com/stanford/media/520-5280642336803569160-CS193P_F17_Lecture_17_Slides.pdf&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="中文字幕">中文字幕&lt;/h2>
&lt;p>网上找到的中文字幕&lt;/p>
&lt;p>&lt;a href="https://github.com/ApolloZhu/Developing-iOS-11-Apps-with-Swift">https://github.com/ApolloZhu/Developing-iOS-11-Apps-with-Swift&lt;/a>&lt;/p></description></item><item><title>Swift入门指南二</title><link>https://crazygit.wiseturtles.com/2018/10/27/swift-tour-002/</link><pubDate>Sat, 27 Oct 2018 22:55:22 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2018/10/27/swift-tour-002/</guid><description>&lt;h2 id="对象和类">对象和类&lt;/h2>
&lt;p>创建类&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Shape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">numberOfSides&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">simpleDescription&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;A shape with &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">numberOfSides&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> sides.&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">shape&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Shape&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">shape&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">numberOfSides&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">7&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">shapeDescription&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">shape&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">simpleDescription&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>init&lt;/code>构造函数，&lt;code>deinit&lt;/code>析构函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">class&lt;/span> &lt;span class="nc">NamedShape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">numberOfSides&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">name&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">simpleDescription&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;A shape whit &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">numberOfSides&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> sides&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>类属性必须要设置一个值，要么在声明属性的时候指定，要么在&lt;code>init&lt;/code>函数中指定。&lt;/p>
&lt;p>继承类, 使用&lt;code>:&lt;/code>， 覆写父类的方法&lt;strong>必须&lt;/strong>使用&lt;code>override&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Square&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NamedShape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">sideLength&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span>
&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sideLength&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sideLength&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">sideLength&lt;/span>
&lt;span class="c1">// 调用父类的方法&lt;/span>
&lt;span class="kc">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">numberOfSides&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">area&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Double&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">sideLength&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">sideLength&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 覆写父类的方法&lt;/span>
&lt;span class="kr">override&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="nf">simpleDescription&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;A square with sides of length &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">sideLength&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">.&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>属性的&lt;code>getter&lt;/code>和&lt;code>setter&lt;/code>方法，&lt;code>set&lt;/code>没有指定参数名时，默认用&lt;code>newValue&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">
&lt;span class="kd">class&lt;/span> &lt;span class="nc">EquilateralTriangle&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NamedShape&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">sideLength&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mf">0.0&lt;/span>
&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sideLength&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sideLength&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">sideLength&lt;/span>
&lt;span class="kc">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">numberOfSides&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">perimeter&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">get&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mf">3.0&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">sideLength&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">set&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sideLength&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">newValue&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mf">3.0&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//var perimeter: Double {&lt;/span>
&lt;span class="c1">// get {&lt;/span>
&lt;span class="c1">// return 3.0 * sideLength&lt;/span>
&lt;span class="c1">// }&lt;/span>
&lt;span class="c1">// set(newPerimeter) {&lt;/span>
&lt;span class="c1">// sideLength = newPerimeter / 3.0&lt;/span>
&lt;span class="c1">// }&lt;/span>
&lt;span class="c1">//}&lt;/span>
&lt;span class="kr">override&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="nf">simpleDescription&lt;/span> &lt;span class="p">()-&amp;gt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;An equilateral triangle with sides of length &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">sideLength&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>willSet&lt;/code>和&lt;code>didSet&lt;/code>实现属性观察&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">class&lt;/span> &lt;span class="nc">TriangleAndSquare&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">triangle&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">EquilateralTriangle&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">willSet&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">square&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sideLength&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">newValue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sideLength&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">square&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Square&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">willSet&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">triangle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sideLength&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">newValue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sideLength&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="n">square&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sideLength&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">triangle&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">EquilateralTriangle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sideLength&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">triganleAndSquare&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">TriangleAndSquare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;another test shape&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 10.0&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">triganleAndSquare&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">square&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sideLength&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 10.0&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">triganleAndSquare&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">triangle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sideLength&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">triganleAndSquare&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">square&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sideLength&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Larger square&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 50.0&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">triganleAndSquare&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">triangle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sideLength&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当使用可选值时，可以写个&lt;code>?&lt;/code>在运行符前面，如果&lt;code>?&lt;/code>前面的值是&lt;code>nil&lt;/code>, 所有在&lt;code>?&lt;/code>后面的值都是&lt;code>nil&lt;/code>,&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">optionalSquare&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Square&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sideLength&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">2.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;optional square&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">sideLength&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">optionalSquare&lt;/span>&lt;span class="p">?.&lt;/span>&lt;span class="n">sideLength&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="枚举enum">枚举&lt;code>enum&lt;/code>&lt;/h2>
&lt;p>枚举&lt;code>enum&lt;/code>类型跟类&lt;code>class&lt;/code>一样也可以有方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">enum&lt;/span> &lt;span class="nc">Rank&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">ace&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">two&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">three&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">four&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">five&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sixe&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">seven&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">eight&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nine&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ten&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">jack&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">queen&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">king&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">simpleDescription&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="kc">self&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">ace&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;ace&amp;#34;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">jack&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;jack&amp;#34;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">queen&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;queen&amp;#34;&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rawValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">ace&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Rank&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ace&lt;/span>
&lt;span class="c1">// 1&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">aceRawValue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ace&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rawValue&lt;/span>
&lt;span class="c1">// 2&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Rank&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">two&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">rawValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ace&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">simpleDescription&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>默认情况下，枚举类型的原始值是从0开始的，然后依次加1，但是可以通过明确赋值，可以改变这个行为。
比如上面的例子，&lt;code>ace&lt;/code>就是从1开始，后面的值也依次加1，同时，也可以给枚举类型赋值为字符串或浮点数。&lt;/p>
&lt;p>使用&lt;code>init?(rawValue:)&lt;/code>初始化一个枚举类型，当这个值是enum类型的值时，就返回枚举类型，否则返回&lt;code>nil&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">
&lt;span class="c1">// 13刚好对应king&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">convertedRank&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Rank&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rawValue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">threeDescription&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">convertedRank&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">simpleDescription&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 13&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// convertedRank 为nil, if语句不会执行&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">convertedRank&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Rank&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rawValue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">threeDescription&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">convertedRank&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">simpleDescription&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果结构体有原始值的话，可以在初始化时决定它的类型&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">enum&lt;/span> &lt;span class="nc">ServerResponse&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">failure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">success&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ServerResponse&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;6:00 am&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;8:09 pm&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">failure&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ServerResponse&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">failure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Out of cheese.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">success&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="n">success&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sunrise&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sunset&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Sun rise at &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">sunrise&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">, Sun set at &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">sunset&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">failure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Failure &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="结构体struct">结构体&lt;code>struct&lt;/code>&lt;/h2>
&lt;p>&lt;code>struct&lt;/code>和类一样，支持初始化和方法，不同之处在于:&lt;/p>
&lt;p>struct在代码里总是复制一份(值传参)，而类是被引用的(引用传参)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">struct&lt;/span> &lt;span class="nc">Card&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">rank&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Rank&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">suit&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Suit&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">simpleDescription&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;The &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">rank&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">simpleDescription&lt;/span>&lt;span class="si">())&lt;/span>&lt;span class="s"> of &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">suit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">simpleDescription&lt;/span>&lt;span class="si">())&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//枚举传参数&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">threeOfSpades&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Card&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rank&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">three&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">suit&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">spades&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">threeOfSpades&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">simpleDescription&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="protocols和extensions">Protocols和Extensions&lt;/h2>
&lt;p>有点类似&lt;code>java&lt;/code>的&lt;code>interface&lt;/code>，但是也有&lt;a href="https://stackoverflow.com/questions/30859334/compare-protocol-in-swift-vs-interface-in-java">不同之处&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">protocol&lt;/span> &lt;span class="nc">ExampleProtocol&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">simpleDescription&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kr">get&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1">// 注意关键字mutating&lt;/span>
&lt;span class="kr">mutating&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="nf">adjust&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>类，枚举和结构体都可以适配协议&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">class&lt;/span> &lt;span class="nc">SimpleClass&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ExampleProtocol&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">simpleDescription&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;A very simple class.&amp;#34;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">anotherProperty&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">69105&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">adjust&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">simpleDescription&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s">&amp;#34; Now 100% adjusted.&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">SimpleClass&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">adjust&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">simpleDescription&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">struct&lt;/span> &lt;span class="nc">SimpleStruct&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ExampleProtocol&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">simpleDescription&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;A very simple struct.&amp;#34;&lt;/span>
&lt;span class="c1">//注意 mutating 关键字&lt;/span>
&lt;span class="kr">mutating&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="nf">adjust&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">simpleDescription&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s">&amp;#34; (adjusted)&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">SimpleStruct&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">adjust&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">simpleDescription&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意上面在结构体中声明&lt;code>adjust()&lt;/code>方法时，使用了关键字&lt;code>mutating&lt;/code>,而在类中并没有使用， 是因为在类中，方法是可以直接修改的。&lt;/p>
&lt;p>使用&lt;code>extension&lt;/code>可以往已经存在的类型添加方法和计算属性，哪怕是Swift内置的类&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">extension&lt;/span> &lt;span class="nc">Int&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ExampleProtocol&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">simpleDescription&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;The number &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="kc">self&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">mutating&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="nf">adjust&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="kc">self&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">42&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 修改内置Int类的行为&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">7.&lt;/span>&lt;span class="n">simpleDescription&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们也可以使用protocol名字来访问实现了这个&lt;code>protocol&lt;/code>的方法，但是不在&lt;code>protocol&lt;/code>里定义的就不能访问。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">protocolValue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ExampleProtocol&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">SimpleClass&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">protocolValue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">simpleDescription&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//anotherProperty属性虽然在SimpleClass里有，但是它不属于ExampleProtocol, protocolValue访问依然会报错&lt;/span>
&lt;span class="c1">//print(protocolValue.anotherProperty)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="异常处理">异常处理&lt;/h2>
&lt;p>可以通过适配&lt;code>Error&lt;/code>的protocol来定义错误， 通过&lt;code>throw&lt;/code>抛出异常，通过&lt;code>throws&lt;/code>标记可能产生异常的方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">enum&lt;/span> &lt;span class="nc">PrinterError&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">outOfPaper&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">noToner&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">onFire&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">unKown&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">job&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">toPrinter&lt;/span> &lt;span class="n">printerName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">throws&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">printerName&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="s">&amp;#34;Never Has Toner&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">PrinterError&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">noToner&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">printerName&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="s">&amp;#34;outOfPaper&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">PrinterError&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">outOfPaper&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">printerName&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="s">&amp;#34;OnFire&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">PrinterError&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">onFire&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">printerName&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="s">&amp;#34;UnKown&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="n">PrinterError&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unKown&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;job sent&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有几种方式处理异常，一种是使用&lt;code>do-catch&lt;/code>, &lt;code>try&lt;/code>写在可能产生异常的代码前面，&lt;code>catch&lt;/code>代码块里，如果不指定名字的话，默认用&lt;code>error&lt;/code>代表错误。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">printerResponse&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">job&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1040&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">toPrinter&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Never Has Toner&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">printerResponse&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">printerResponse&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">job&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1440&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">toPrinter&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;UnKown&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">printerResponse&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="n">PrinterError&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">onFire&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;I&amp;#39;ll just put this over here, with the rest of the fire.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">printerError&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">PrinterError&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Printer error: &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">printerError&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另一种处理异常的方式是使用&lt;code>try?&lt;/code>。把结果转变为可选值，当有异常出现的时候，异常会被直接忽略，并把结果赋值为&lt;code>nil&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">printerSuccess&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">job&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1884&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">toPrinter&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Mergenthaler&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">printerFailure&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">job&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1885&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">toPrinter&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Never Has Toner&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>defer&lt;/code>，可以在函数返回前，执行一段代码，无论函数是正常执行或抛出异常，可以在多个函数之间使用&lt;code>defer&lt;/code>写一些初始化或清理工作的代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">var&lt;/span> &lt;span class="nv">fridgeIsOpen&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">fridgeContent&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;milk&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;eggs&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;leftovers&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">fridgeContains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">food&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Bool&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">fridgeIsOpen&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;call defer&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">fridgeIsOpen&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">fridgeContent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">food&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">fridgeContains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;banana&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fridgeIsOpen&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="泛型">泛型&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">makeArray&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Item&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">repeating&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numberOfTimes&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Item&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Item&lt;/span>&lt;span class="p">]()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="kc">_&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="mf">0.&lt;/span>&lt;span class="p">.&amp;lt;&lt;/span>&lt;span class="n">numberOfTimes&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">makeArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repeating&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;knock&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numberOfTimes&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>泛型不光可以用于函数和方法，还可以用在类，枚举，结构体上面，下面是利用泛型实现Swift标准库里的可选类型&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">enum&lt;/span> &lt;span class="nc">OptionalValue&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Wrapped&lt;/span>&lt;span class="p">&amp;gt;{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="kr">none&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="n">some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Wrapped&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">possibleInteger&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">OptionalValue&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="kr">none&lt;/span>
&lt;span class="n">possibleInteger&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>where&lt;/code>关键字在语句前可以限定一些条件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">anyCommonElements&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Sequence&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">U&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Sequence&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">lhs&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">_&lt;/span> &lt;span class="n">rhs&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">U&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Bool&lt;/span>
&lt;span class="k">where&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Element&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Equatable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Element&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="n">U&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Element&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">lhsItem&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">lhs&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">thsItem&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">rhs&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">lhsItem&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="n">thsItem&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">anyCommonElements&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Swift入门指南一</title><link>https://crazygit.wiseturtles.com/2018/10/27/swift-tour-001/</link><pubDate>Sat, 27 Oct 2018 09:34:03 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2018/10/27/swift-tour-001/</guid><description>&lt;h2 id="hello-world">Hello World&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, world!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>“Hello world”的写法与&lt;code>python&lt;/code>的语法, 不需要分号结尾&lt;/p>
&lt;h2 id="常量和变量">常量和变量&lt;/h2>
&lt;p>使用&lt;code>let&lt;/code>声明常量，使用&lt;code>var&lt;/code>声明变量。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// 常量let&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">maxNum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">100&lt;/span>
&lt;span class="c1">// 变量var&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">index&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">str&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Hello, playground&amp;#34;&lt;/span>
&lt;span class="c1">// 一次定义多个变量&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">x&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;span class="c1">// 常量在编译的时候才确定它的值，但是只能赋值一次，不允许再修改&lt;/span>
&lt;span class="c1">// 如下面的常量c&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1000&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">50&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">c&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>
&lt;span class="c1">// 指定常量类型&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;xxx&amp;#34;&lt;/span>
&lt;span class="c1">// 批量指定变量类型&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">l&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">label&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;The width is &amp;#34;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">width&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">94&lt;/span>
&lt;span class="c1">// 类型转换&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">widthLabel&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">label&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 字符串格式化&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">apples&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">oranges&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">appSumary&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;I have &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">apples&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> apples.&amp;#34;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">fruitSummary&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;I have &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">apples&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">oranges&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> pieces of fruit&amp;#34;&lt;/span>
&lt;span class="c1">// 使用三引号（&amp;#34;&amp;#34;&amp;#34;）可以起到一次使用跨行声明变量&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s">line one
&lt;/span>&lt;span class="s">line two
&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="字符串">字符串&lt;/h3>
&lt;p>Swift中字符串只能使用双引号&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">str&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Hello world&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="数组和字典">数组和字典&lt;/h2>
&lt;p>与&lt;code>python&lt;/code>不同，Swift数组和字典都是用方括号表示&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// 数组&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;c&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="c1">// 字典&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;crazygit&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">28&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="c1">// 创建元素类型为String类型的空数组&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">emptyArray&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">]()&lt;/span>
&lt;span class="c1">// 创建key为String，Value为Float类型的空字典&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">emptyDictionary&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Float&lt;/span>&lt;span class="p">]()&lt;/span>
&lt;span class="c1">// 不明确类型的&lt;/span>
&lt;span class="n">shoppingList&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="n">occupations&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[:]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="流程控制">流程控制&lt;/h2>
&lt;p>关键字有:&lt;/p>
&lt;p>&lt;code>if&lt;/code>, &lt;code>switch&lt;/code>, &lt;code>for-in&lt;/code>,&lt;code>while&lt;/code>, &lt;code>repeat-while&lt;/code>&lt;/p>
&lt;p>判断条件和循环变量外层的圆括号是可选的。
但是循环体外层的花括号是必须的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">individualScore&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">75&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">43&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">103&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">87&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">teamScore&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">score&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">individualScore&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">score&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">50&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">teamScore&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">teamScore&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">teamScore&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>if&lt;/code>语句后面必须是&lt;code>Boolean&lt;/code>表达式, &lt;code>if score {}&lt;/code> 会直接报语法错误，不是像&lt;code>python&lt;/code>中暗含把&lt;code>score&lt;/code>和&lt;code>0&lt;/code>相比较。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">swift&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="err">&amp;#39;&lt;/span> &lt;span class="k">is&lt;/span> &lt;span class="n">not&lt;/span> &lt;span class="n">convertible&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="nb">Bool&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">score&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">^~~~~&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>变量类型后面如果有&lt;code>?&lt;/code>号， 表示变量是个可选值&lt;/p>
&lt;h3 id="if-语句">if 语句&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// 可选值&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">optionalString&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">optionalString&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">optionalName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;xx&amp;#34;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">greeting&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>
&lt;span class="c1">// 如果变量的可选值是nil，条件会判断为false，大括号中的代码会被跳过。&lt;/span>
&lt;span class="c1">// 如果不是nil，会将值赋给let后面的常量，这样代码块中就可以使用这个值了。&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">optionalName&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">greeting&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Hello, &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;else&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 使用??可以提供一个默认值，当nickName为nil时，使用fullName&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">nickName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">fullName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;John Appleseed&amp;#34;&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">informalGreeting&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Hi &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">nickName&lt;/span> &lt;span class="p">??&lt;/span> &lt;span class="n">fullName&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="switch">switch&lt;/h3>
&lt;p>switch支持&lt;strong>任意类型&lt;/strong>的数据比较操作。&lt;/p>
&lt;p>运行switch中匹配到的子句之后，程序会退出switch语句，并不会继续向下运行，所以&lt;strong>不需要&lt;/strong>在每个子句结尾写break。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">vegetable&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;red pepper&amp;#34;&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="n">vegetable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;celery&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Add som raisins and make ants on a log.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;cucumber&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;watercress&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;That would make a good tea sandwich.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">x&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">hasSuffix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;pepper&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Is is a spicy &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">?&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Everything tastes good in soup.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意上面&lt;code>let&lt;/code>的用法&lt;/p>
&lt;h3 id="for-in">for-in&lt;/h3>
&lt;p>在遍历字典字典数据时，遍历结果是无序的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">let&lt;/span> &lt;span class="nv">interestingNumbers&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s">&amp;#34;Price&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="s">&amp;#34;Fibonacci&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="s">&amp;#34;Square&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">25&lt;/span>&lt;span class="p">],&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">largest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">interestingNumbers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">numbers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">largest&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">largest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">number&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">largest&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>for (_, numbers) &lt;/code>的括号不能省略&lt;/p>
&lt;h3 id="while">while&lt;/h3>
&lt;p>两种写法，一种先判断条件再执行，一种先执行再判断条件(保证至少运行一次)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// 先判断再执行（不一定会执行）&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">n&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">n&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 先执行再判断（至少执行一次）&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">m&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="k">repeat&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">m&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="for-循环">for 循环&lt;/h3>
&lt;p>&lt;code>..&amp;lt;&lt;/code>表示循环索引，不包含最大值&lt;/p>
&lt;p>&lt;code>...&lt;/code>表示循环索引，包含最大值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">var&lt;/span> &lt;span class="nv">firstForLoop&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="c1">// 等价于for i=0; i&amp;lt;4; i++&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="mf">0.&lt;/span>&lt;span class="p">.&amp;lt;&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">firstForLoop&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">i&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">firstForLoop&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">secondForLoop&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="c1">// 等价于for i=0; i&amp;lt;=4; i++&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="mf">0.&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">secondForLoop&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">i&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">secondForLoop&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="函数和闭包">函数和闭包&lt;/h3>
&lt;p>使用 &lt;code>func&lt;/code> 来声明一个函数, 使用名字和参数来调用函数。使用 &lt;code>-&amp;gt;&lt;/code> 来指定函数返回值的类型。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">// 定义一个函数&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">greet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">day&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Hello &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">, today is &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">day&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">.&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">//调用函数&lt;/span>
&lt;span class="n">greet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">day&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Tuesday&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 传入第二个参数的day标签不能省略&lt;/span>
&lt;span class="n">greet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">day&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">&amp;#34;Tuesday&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>默认情况下，函数使用参数名作为参数标签，可以在参数名前写个自定义的标签，或者使用&lt;code>_&lt;/code>来表示没有标签&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">greet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">person&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">on&lt;/span> &lt;span class="n">day&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;Hello &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">, today is &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">day&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">.&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">greet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">on&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Tuesday&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面&lt;code>person&lt;/code>参数没有设置参数标签， &lt;code>day&lt;/code>的参数标签是&lt;code>on&lt;/code>&lt;/p>
&lt;p>使用元祖可以返回多个值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">caculateStatistics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">scores&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="bp">min&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">max&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">min&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">scores&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">max&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">scores&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">sum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">score&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">scores&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">score&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="bp">max&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">max&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">score&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">score&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="bp">min&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="bp">min&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">score&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">score&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="bp">min&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">max&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">statistics&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">caculateStatistics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">scores&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="c1">// 使用名称获取返回的sum&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">statistics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 使用下标获取返回的sum&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">statistics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>函数可以嵌套，内部的函数可以访问外部函数定义的变量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">returnFifteen&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">add&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">y&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">returnFifteen&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>函数的返回值也可以是一个函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="c1">//返回值是函数，注意返回值的写法&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">makeIncrementer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">addOne&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">number&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">addOne&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">increment&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">makeIncrementer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">increment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>函数的参数也可以是一个函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">hasAnyMatch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">condtion&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Bool&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">list&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">condtion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">lessThanTen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Bool&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">numbers&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">19&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="n">hasAnyMatch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">condtion&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">lessThanTen&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>闭包的写法，闭包时可以省略掉函数名，用&lt;code>{}&lt;/code>表示，在函数体内用&lt;code>in&lt;/code>来区分参数，返回值和函数体&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="n">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">map&lt;/span>&lt;span class="p">({(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="k">in&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">number&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="c1">// 省略参数类型，返回值类型的写法&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nv">mappedNumbers&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">map&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">number&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">number&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mappedNumbers&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可变参数&lt;code>...&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="kd">func&lt;/span> &lt;span class="nf">sumOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">...)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nv">sum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">numbers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">number&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">sum&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sumOf&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sumOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">597&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>iOS学习目标制定及开发环境搭建</title><link>https://crazygit.wiseturtles.com/2018/10/26/ios-learn-001/</link><pubDate>Fri, 26 Oct 2018 23:13:46 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2018/10/26/ios-learn-001/</guid><description>&lt;p>本系列是从零开始学习iOS开发的学习日记的第一篇，主要用于记录和整理学习笔记和心得，由于也是第一次学习，内容中不免有错误的地方，如有发现，欢迎指出。&lt;/p>
&lt;h2 id="学习目标">学习目标&lt;/h2>
&lt;ul>
&lt;li>经过学习，能开发出一个让自己认可的APP并发布到App Store&lt;/li>
&lt;li>习惯养成: 保证每天投入至少1个小时学习新知识&lt;/li>
&lt;/ul>
&lt;h2 id="学习资源">学习资源&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://swift.org">官网&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.apple.com/swift/resources/">Swift学习官方学习资源(含文档，视频，示例代码等)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/numbbbbb/the-swift-programming-language-in-chinese">Swift官方文档中文版&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ipader/SwiftGuide">GitHub上别人整理的Swift语言主流学习资源&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.hackingwithswift.com/">Hacking With Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.imooc.com/learn/635">慕课网视频教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="建议学习顺序">建议学习顺序&lt;/h2>
&lt;ol>
&lt;li>阅读文档&lt;a href="https://docs.swift.org/swift-book/index.html">the swift programming language&lt;/a>，了解Swift语法&lt;/li>
&lt;li>斯坦福大学视频教程: Developing iOS 10 Apps with Swift &lt;a href="http://www.swift51.com/video/1057.html">中文字幕版&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.v2ex.com/t/457681">Developing iOS 11 Apps with Swift&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="swift安装">Swift安装&lt;/h2>
&lt;p>要学习iOS开发，前提就是要学习&lt;code>Swift&lt;/code>或&lt;code>Object-C&lt;/code>语言。就像如果要学习Android开发的话，必须先掌握 &lt;del>&lt;code>Java&lt;/code>&lt;/del> &lt;code>Kotlin&lt;/code>语言一样。&lt;/p>
&lt;p>由于现在苹果公司主推&lt;code>Swift&lt;/code>语言，所以我也选择了&lt;code>Swift&lt;/code>语言下手。&lt;code>Object-C&lt;/code>有需要的话，以后再学习了。&lt;/p>
&lt;p>Swift语言被开源后，单独放了一个&lt;a href="https://swift.org/">网站&lt;/a>上面，现在Swift不仅可以在Mac系统上运行，也可以在Linux上运行。&lt;/p>
&lt;p>根据自己的操作系统，在&lt;a href="https://swift.org/download/#releases">下载页面&lt;/a>选择合适的安装包安装即可。&lt;/p>
&lt;p>以&lt;code>macOS 10.14&lt;/code>为例，只需要在App Store商店里安装Xcode即可。&lt;/p>
&lt;h3 id="检查是否安装成功">检查是否安装成功&lt;/h3>
&lt;p>安装好以后，在终端下执行如下命令即可检查是否安装成功。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ swift -version
Apple Swift version 4.2 &lt;span class="o">(&lt;/span>swiftlang-1000.11.37.1 clang-1000.11.45.1&lt;span class="o">)&lt;/span>
Target: x86_64-apple-darwin18.0.0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当前学习是Swift 4.1版本，后面所有的例子也会基于这个版本。&lt;/p>
&lt;h3 id="交互模式">交互模式&lt;/h3>
&lt;p>在终端直接输入&lt;code>swift&lt;/code>，即可进入交互模式，类似在终端输入&lt;code>python&lt;/code>一样&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ swift
Welcome to Apple Swift version 4.2 &lt;span class="o">(&lt;/span>swiftlang-1000.11.37.1 clang-1000.11.45.1&lt;span class="o">)&lt;/span>. Type :help &lt;span class="k">for&lt;/span> assistance.
1&amp;gt; print&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
Hello World
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="swift代码格式化工具">Swift代码格式化工具&lt;/h3>
&lt;p>&lt;a href="https://github.com/Jintin/Swimat">Swimat&lt;/a>&lt;/p>
&lt;p>安装&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ brew cask install swimat
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>设置，依次打开&lt;code>系统偏好设置&lt;/code>-&amp;gt;&lt;code>扩展&lt;/code>-&amp;gt;&lt;code>Xcode&lt;/code>里勾选上&lt;code>swimat&lt;/code>,如下图所示&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/1550673424.png" alt="启动swimat">&lt;/p>
&lt;p>最后在Xcode里设置使用的&lt;code>Swimat&lt;/code>快捷键,打开&lt;code>Xcode&lt;/code>,依次找到&lt;code>Preference&lt;/code> -&amp;gt; &lt;code>Key Bindings&lt;/code> -&amp;gt; &lt;code>搜索“swimat”&lt;/code> 设置快捷键为自己喜欢的快捷键 如: &lt;code>Option + F&lt;/code>, 如下图所示:&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/2018-10-24-Swimat-shortcut.png" alt="Swimat-shortcut">&lt;/p>
&lt;p>&lt;strong>PS&lt;/strong>:&lt;/p>
&lt;p>设置快捷键时注意当前设置框最下面的文字提示信息，如果存在快捷键冲突，它会有提示&lt;/p>
&lt;h3 id="xcode包管理工具">Xcode包管理工具&lt;/h3>
&lt;p>&lt;a href="http://alcatraz.io/">alcatraz&lt;/a>&lt;/p>
&lt;p>安装&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -fsSL https://raw.githubusercontent.com/supermarin/Alcatraz/deploy/Scripts/install.sh &lt;span class="p">|&lt;/span> sh
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Elasticsearch快速入门</title><link>https://crazygit.wiseturtles.com/2018/04/11/elasticsearch-getting-started/</link><pubDate>Wed, 11 Apr 2018 18:15:39 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2018/04/11/elasticsearch-getting-started/</guid><description>&lt;h1 id="elasticsearch快速入门httpswwwelasticcoguideenelasticsearchreferencecurrentgetting-startedhtml">&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html">Elasticsearch快速入门&lt;/a>&lt;/h1>
&lt;p>当前使用版本: 6.2&lt;/p>
&lt;h2 id="基本概念httpswwwelasticcoguideenelasticsearchreferencecurrent_basic_conceptshtml">&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/_basic_concepts.html">基本概念&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Near Realtime (NRT)&lt;/p>
&lt;p>实时搜索，创建文档的索引后无需等待，立刻就可以开始搜索&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Cluster&lt;/p>
&lt;p>集群，一个集群可以包含多个节点。需要注意的是集群名字很重要，在同一个网络环境中，节点会自动加入相同集群名的集群。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>Node&lt;/p>
&lt;p>节点，每个节点都有自己的名字，它作为集群的一个单元，拥有数据存储和提供搜索能力等功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Index&lt;/p>
&lt;p>索引(Index)是一系列文档(Document)的集合, 索引名全部必须小写，一个集群里可以有任意多个索引。类似关系型数据库中的DB。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Type&lt;/p>
&lt;p>类似关系型数据库中的Table， 从Elasticsearch 6.0.0, 一个Index里只允许创建一个Type。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Document&lt;/p>
&lt;p>文档，存储的最小单元,类似关系型数据库中的Row。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Shards &amp;amp; Replicas&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>本文主要介绍使用docker的安装的方式，主要有三种格式的镜像&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 基本版本(默认版本)，包含X-pack的基本特性和免费证书&lt;/span>
$ docker pull docker.elastic.co/elasticsearch/elasticsearch:6.2.3
&lt;span class="c1"># platinum版本，包含X-pack的全部特性和30天试用证书&lt;/span>
$ docker pull docker.elastic.co/elasticsearch/elasticsearch-platinum:6.2.3
&lt;span class="c1"># oss版本，不包含X-pack，只有开源的Elasticsearch&lt;/span>
$ docker pull docker.elastic.co/elasticsearch/elasticsearch-oss:6.2.3
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>选择使用oss版本&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 安装&lt;/span>
$ docker pull docker.elastic.co/elasticsearch/elasticsearch-oss:6.2.3
&lt;span class="c1"># 启动服务&lt;/span>
$ docker run -p 9200:9200 -p 9300:9300 -e &lt;span class="s2">&amp;#34;cluster.name=mycluster&amp;#34;&lt;/span> -e &lt;span class="s2">&amp;#34;node.name=my_node&amp;#34;&lt;/span> docker.elastic.co/elasticsearch/elasticsearch-oss:6.2.3
&lt;span class="c1"># 检查启动的服务&lt;/span>
$ curl localhost:9200
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;my_node&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;cluster_name&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;mycluster&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;cluster_uuid&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;e4xwigyJQp-Er6ZJeIg1wg&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;version&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;number&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;6.2.3&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;build_hash&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;c59ff00&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;build_date&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;2018-03-13T10:06:29.741383Z&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;build_snapshot&amp;#34;&lt;/span> : false,
&lt;span class="s2">&amp;#34;lucene_version&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;7.2.1&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;minimum_wire_compatibility_version&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;5.6.0&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;minimum_index_compatibility_version&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;5.0.0&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="s2">&amp;#34;tagline&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;You Know, for Search&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="探索集群">探索集群&lt;/h2>
&lt;p>集群健康状态检查&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl &lt;span class="s2">&amp;#34;localhost:9200/_cat/health?v&amp;#34;&lt;/span>
epoch timestamp cluster status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent
&lt;span class="m">1523427762&lt;/span> 06:22:42 mycluster green &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> - 100.0%
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>节点信息检查&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl &lt;span class="s2">&amp;#34;localhost:9200/_cat/nodes?v&amp;#34;&lt;/span>
ip heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
172.17.0.2 &lt;span class="m">11&lt;/span> &lt;span class="m">91&lt;/span> &lt;span class="m">2&lt;/span> 0.00 0.03 0.04 mdi * my_node
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="列出所有索引信息">列出所有索引信息&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl &lt;span class="s2">&amp;#34;localhost:9200/_cat/indices?v&amp;#34;&lt;/span>
health status index uuid pri rep docs.count docs.deleted store.size pri.store.size
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="创建索引">创建索引&lt;/h3>
&lt;p>创建名为&lt;code>customer&lt;/code>的索引&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -X PUT &lt;span class="s2">&amp;#34;localhost:9200/customer?pretty&amp;#34;&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;acknowledged&amp;#34;&lt;/span> : true,
&lt;span class="s2">&amp;#34;shards_acknowledged&amp;#34;&lt;/span> : true,
&lt;span class="s2">&amp;#34;index&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;customer&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
$ curl &lt;span class="s2">&amp;#34;localhost:9200/_cat/indices?v&amp;#34;&lt;/span>
health status index uuid pri rep docs.count docs.deleted store.size pri.store.size
yellow open customer ltwryTbDSUy2mKATPJ2adA &lt;span class="m">5&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 1.1kb 1.1kb
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="创建文档">创建文档&lt;/h3>
&lt;p>在&lt;code>customer&lt;/code>索引里，创建ID为1的文档。
注意: 加入索引不存在，elasticearch会自动创建索引。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XPUT &lt;span class="s1">&amp;#39;localhost:9200/customer/_doc/1?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;name&amp;#34;: &amp;#34;John Doe&amp;#34;
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;_index&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;customer&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_type&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;_doc&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_version&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;result&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;created&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_shards&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;total&amp;#34;&lt;/span> : 2,
&lt;span class="s2">&amp;#34;successful&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;failed&amp;#34;&lt;/span> : &lt;span class="m">0&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="s2">&amp;#34;_seq_no&amp;#34;&lt;/span> : 0,
&lt;span class="s2">&amp;#34;_primary_term&amp;#34;&lt;/span> : &lt;span class="m">1&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1"># 查看创建的结果&lt;/span>
$ curl &lt;span class="s1">&amp;#39;localhost:9200/customer/_doc/1?pretty&amp;#39;&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;_index&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;customer&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_type&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;_doc&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_version&amp;#34;&lt;/span> : 2,
&lt;span class="s2">&amp;#34;found&amp;#34;&lt;/span> : true,
&lt;span class="s2">&amp;#34;_source&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;John Doe&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="删除索引">删除索引&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -X DELETE &lt;span class="s1">&amp;#39;localhost:9200/customer?pretty&amp;#39;&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;acknowledged&amp;#34;&lt;/span> : &lt;span class="nb">true&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="修改数据">修改数据&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 创建一个文档&lt;/span>
$ curl -XPUT &lt;span class="s1">&amp;#39;localhost:9200/customer/_doc/1?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;name&amp;#34;: &amp;#34;John Doe&amp;#34;
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;_index&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;customer&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_type&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;_doc&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_version&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;result&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;created&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_shards&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;total&amp;#34;&lt;/span> : 2,
&lt;span class="s2">&amp;#34;successful&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;failed&amp;#34;&lt;/span> : &lt;span class="m">0&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="s2">&amp;#34;_seq_no&amp;#34;&lt;/span> : 0,
&lt;span class="s2">&amp;#34;_primary_term&amp;#34;&lt;/span> : &lt;span class="m">1&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1"># 修改文档&lt;/span>
$ curl -XPUT &lt;span class="s1">&amp;#39;localhost:9200/customer/_doc/1?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;name&amp;#34;: &amp;#34;xxxxx&amp;#34;
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;_index&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;customer&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_type&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;_doc&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_version&amp;#34;&lt;/span> : 2,
&lt;span class="s2">&amp;#34;result&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;updated&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_shards&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;total&amp;#34;&lt;/span> : 2,
&lt;span class="s2">&amp;#34;successful&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;failed&amp;#34;&lt;/span> : &lt;span class="m">0&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="s2">&amp;#34;_seq_no&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;_primary_term&amp;#34;&lt;/span> : &lt;span class="m">1&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">## 通过POST方法，在创建文档时可以不用指定文档的id， elasticsearch会自动生成一个&lt;/span>
$ curl -XPOST &lt;span class="s1">&amp;#39;localhost:9200/customer/_doc?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;name&amp;#34;: &amp;#34;Jane Doe&amp;#34;
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;_index&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;customer&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_type&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;_doc&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;Umx0s2IBV3QZ-G3Zdj0c&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_version&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;result&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;created&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_shards&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;total&amp;#34;&lt;/span> : 2,
&lt;span class="s2">&amp;#34;successful&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;failed&amp;#34;&lt;/span> : &lt;span class="m">0&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="s2">&amp;#34;_seq_no&amp;#34;&lt;/span> : 0,
&lt;span class="s2">&amp;#34;_primary_term&amp;#34;&lt;/span> : &lt;span class="m">1&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="更新文档">更新文档&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XPOST &lt;span class="s1">&amp;#39;localhost:9200/customer/_doc/1/_update?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;doc&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;Jane Doe&amp;#34; }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;_index&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;customer&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_type&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;_doc&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_version&amp;#34;&lt;/span> : 3,
&lt;span class="s2">&amp;#34;result&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;updated&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_shards&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;total&amp;#34;&lt;/span> : 2,
&lt;span class="s2">&amp;#34;successful&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;failed&amp;#34;&lt;/span> : &lt;span class="m">0&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="s2">&amp;#34;_seq_no&amp;#34;&lt;/span> : 2,
&lt;span class="s2">&amp;#34;_primary_term&amp;#34;&lt;/span> : &lt;span class="m">1&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="删除文档">删除文档&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XDELETE &lt;span class="s1">&amp;#39;localhost:9200/customer/_doc/2?pretty&amp;#39;&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;_index&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;customer&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_type&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;_doc&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_version&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;result&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;not_found&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_shards&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;total&amp;#34;&lt;/span> : 2,
&lt;span class="s2">&amp;#34;successful&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;failed&amp;#34;&lt;/span> : &lt;span class="m">0&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="s2">&amp;#34;_seq_no&amp;#34;&lt;/span> : 0,
&lt;span class="s2">&amp;#34;_primary_term&amp;#34;&lt;/span> : &lt;span class="m">1&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="批量处理">批量处理&lt;/h3>
&lt;p>同时创建两个文档&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XPOST &lt;span class="s1">&amp;#39;localhost:9200/customer/_doc/_bulk?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{&amp;#34;index&amp;#34;:{&amp;#34;_id&amp;#34;:&amp;#34;1&amp;#34;}}
&lt;/span>&lt;span class="s1">{&amp;#34;name&amp;#34;: &amp;#34;John Doe&amp;#34; }
&lt;/span>&lt;span class="s1">{&amp;#34;index&amp;#34;:{&amp;#34;_id&amp;#34;:&amp;#34;2&amp;#34;}}
&lt;/span>&lt;span class="s1">{&amp;#34;name&amp;#34;: &amp;#34;Jane Doe&amp;#34; }
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;took&amp;#34;&lt;/span> : 14,
&lt;span class="s2">&amp;#34;errors&amp;#34;&lt;/span> : false,
&lt;span class="s2">&amp;#34;items&amp;#34;&lt;/span> : &lt;span class="o">[&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;index&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;_index&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;customer&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_type&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;_doc&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_version&amp;#34;&lt;/span> : 4,
&lt;span class="s2">&amp;#34;result&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;updated&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_shards&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;total&amp;#34;&lt;/span> : 2,
&lt;span class="s2">&amp;#34;successful&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;failed&amp;#34;&lt;/span> : &lt;span class="m">0&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="s2">&amp;#34;_seq_no&amp;#34;&lt;/span> : 3,
&lt;span class="s2">&amp;#34;_primary_term&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;status&amp;#34;&lt;/span> : &lt;span class="m">200&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;index&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;_index&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;customer&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_type&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;_doc&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_version&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;result&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;created&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_shards&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;total&amp;#34;&lt;/span> : 2,
&lt;span class="s2">&amp;#34;successful&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;failed&amp;#34;&lt;/span> : &lt;span class="m">0&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="s2">&amp;#34;_seq_no&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;_primary_term&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;status&amp;#34;&lt;/span> : &lt;span class="m">201&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">]&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>更新和删除文档&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XPOST &lt;span class="s1">&amp;#39;localhost:9200/customer/_doc/_bulk?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{&amp;#34;update&amp;#34;:{&amp;#34;_id&amp;#34;:&amp;#34;1&amp;#34;}}
&lt;/span>&lt;span class="s1">{&amp;#34;doc&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;John Doe becomes Jane Doe&amp;#34; } }
&lt;/span>&lt;span class="s1">{&amp;#34;delete&amp;#34;:{&amp;#34;_id&amp;#34;:&amp;#34;2&amp;#34;}}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;took&amp;#34;&lt;/span> : 20,
&lt;span class="s2">&amp;#34;errors&amp;#34;&lt;/span> : false,
&lt;span class="s2">&amp;#34;items&amp;#34;&lt;/span> : &lt;span class="o">[&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;update&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;_index&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;customer&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_type&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;_doc&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_version&amp;#34;&lt;/span> : 5,
&lt;span class="s2">&amp;#34;result&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;updated&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_shards&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;total&amp;#34;&lt;/span> : 2,
&lt;span class="s2">&amp;#34;successful&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;failed&amp;#34;&lt;/span> : &lt;span class="m">0&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="s2">&amp;#34;_seq_no&amp;#34;&lt;/span> : 4,
&lt;span class="s2">&amp;#34;_primary_term&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;status&amp;#34;&lt;/span> : &lt;span class="m">200&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;delete&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;_index&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;customer&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_type&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;_doc&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_id&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_version&amp;#34;&lt;/span> : 2,
&lt;span class="s2">&amp;#34;result&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;deleted&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;_shards&amp;#34;&lt;/span> : &lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;total&amp;#34;&lt;/span> : 2,
&lt;span class="s2">&amp;#34;successful&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;failed&amp;#34;&lt;/span> : &lt;span class="m">0&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="s2">&amp;#34;_seq_no&amp;#34;&lt;/span> : 2,
&lt;span class="s2">&amp;#34;_primary_term&amp;#34;&lt;/span> : 1,
&lt;span class="s2">&amp;#34;status&amp;#34;&lt;/span> : &lt;span class="m">200&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">]&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当批量操作时，如果某个操作失败，后面的操作仍然会继续执行，并且根据执行顺序，依次返回每个操作的执行状态。&lt;/p>
&lt;h2 id="探索数据">探索数据&lt;/h2>
&lt;p>在了解了基本操作之后，让我们来多添加一些数据，做一些数据分析的工作。&lt;/p>
&lt;p>下载测试用的数据集&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ wget &lt;span class="s2">&amp;#34;https://github.com/elastic/elasticsearch/blob/master/docs/src/test/resources/accounts.json?raw=true&amp;#34;&lt;/span> -O accounts.json
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>导入数据&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -H &lt;span class="s2">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> -XPOST &lt;span class="s2">&amp;#34;localhost:9200/bank/_doc/_bulk?pretty&amp;amp;refresh&amp;#34;&lt;/span> --data-binary &lt;span class="s2">&amp;#34;@accounts.json&amp;#34;&lt;/span>
$ curl &lt;span class="s2">&amp;#34;localhost:9200/_cat/indices?v&amp;#34;&lt;/span>
health status index uuid pri rep docs.count docs.deleted store.size pri.store.size
yellow open bank EnHJEWvLRv2tZLoI7Z_lXw &lt;span class="m">5&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">1000&lt;/span> &lt;span class="m">0&lt;/span> 474.7kb 474.7kb
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="查询数据">查询数据&lt;/h3>
&lt;p>查询数据，主要有两种方式：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-uri-request.html">REST request URI&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.2/search-request-body.html">REST request body&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>后者跟前者比，可以执行更复杂的操作，查询体也是json格式，便于阅读。前者主要是使用起来更加方便。&lt;/p>
&lt;p>比如:&lt;/p>
&lt;p>使用&lt;code>request URI&lt;/code>的格式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl &lt;span class="s2">&amp;#34;http://localhost:9200/bank/_search?q=*&amp;amp;sort=account_number:asc&amp;amp;pretty&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>request body&lt;/code>的格式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;query&amp;#34;: { &amp;#34;match_all&amp;#34;: {} },
&lt;/span>&lt;span class="s1"> &amp;#34;sort&amp;#34;: [
&lt;/span>&lt;span class="s1"> { &amp;#34;account_number&amp;#34;: &amp;#34;asc&amp;#34; }
&lt;/span>&lt;span class="s1"> ]
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="查询语法">查询语法&lt;/h3>
&lt;p>Elasticsearch提供了一个类似json格式的查询语法，叫做&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.2/query-dsl.html">Query DSL&lt;/a>。&lt;/p>
&lt;p>限定返回查询结果的个数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;query&amp;#34;: { &amp;#34;match_all&amp;#34;: {} },
&lt;/span>&lt;span class="s1"> &amp;#34;size&amp;#34;: 1
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>分页效果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;query&amp;#34;: { &amp;#34;match_all&amp;#34;: {} },
&lt;/span>&lt;span class="s1"> &amp;#34;from&amp;#34;: 10,
&lt;/span>&lt;span class="s1"> &amp;#34;size&amp;#34;: 10
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>排序&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;query&amp;#34;: { &amp;#34;match_all&amp;#34;: {} },
&lt;/span>&lt;span class="s1"> &amp;#34;sort&amp;#34;: { &amp;#34;balance&amp;#34;: { &amp;#34;order&amp;#34;: &amp;#34;desc&amp;#34; } }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="执行查询">执行查询&lt;/h3>
&lt;p>默认情况下，查询返回的&lt;code>_source&lt;/code>会包含所有的字段，我们也可以限制返回某些我们关心的字段&lt;/p>
&lt;p>只返回&lt;code>account_number&lt;/code>和&lt;code>balance&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;query&amp;#34;: { &amp;#34;match_all&amp;#34;: {} },
&lt;/span>&lt;span class="s1"> &amp;#34;_source&amp;#34;: [&amp;#34;account_number&amp;#34;, &amp;#34;balance&amp;#34;]
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="match_all">match_all&lt;/h4>
&lt;p>返回所有结果，没有查询条件限制&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;query&amp;#34;: { &amp;#34;match_all&amp;#34;: {} },
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="match">match&lt;/h4>
&lt;p>限定查询条件，返回&lt;code>account_number&lt;/code>为20的结果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;query&amp;#34;: { &amp;#34;match&amp;#34;: { &amp;#34;account_number&amp;#34;: 20 } }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查询&lt;code>address&lt;/code>里包含&lt;code>mill&lt;/code>的结果（不区分大小写）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;query&amp;#34;: { &amp;#34;match&amp;#34;: { &amp;#34;address&amp;#34;: &amp;#34;mill&amp;#34; } }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查询&lt;code>address&lt;/code>里包含&lt;code>mill&lt;/code>或&lt;code>lane&lt;/code>的记录（不区分大小写)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;query&amp;#34;: { &amp;#34;match&amp;#34;: { &amp;#34;address&amp;#34;: &amp;#34;mill lane&amp;#34; } }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="match_phrase">match_phrase&lt;/h4>
&lt;p>查询&lt;code>address&lt;/code>里包含&lt;code>mill&lt;/code>和&lt;code>lane&lt;/code>的记录（不区分大小写)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;query&amp;#34;: { &amp;#34;match_phrase&amp;#34;: { &amp;#34;address&amp;#34;: &amp;#34;mill lane&amp;#34; } }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="bool-must">bool must&lt;/h4>
&lt;p>返回&lt;code>address&lt;/code>包含&lt;code>mill&lt;/code>和&lt;code>lane&lt;/code>的结果，与上面的&lt;code>match_phrase&lt;/code>效果一样&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;query&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;bool&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;must&amp;#34;: [
&lt;/span>&lt;span class="s1"> { &amp;#34;match&amp;#34;: { &amp;#34;address&amp;#34;: &amp;#34;mill&amp;#34; } },
&lt;/span>&lt;span class="s1"> { &amp;#34;match&amp;#34;: { &amp;#34;address&amp;#34;: &amp;#34;lane&amp;#34; } }
&lt;/span>&lt;span class="s1"> ]
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="bool-should">bool should&lt;/h4>
&lt;p>返回&lt;code>address&lt;/code>包含&lt;code>mill&lt;/code>或&lt;code>lane&lt;/code>的结果，与&lt;code>{&amp;quot;match&amp;quot;: { &amp;quot;address&amp;quot;: &amp;quot;mill lane&amp;quot;}&lt;/code>效果一样&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;query&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;bool&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;should&amp;#34;: [
&lt;/span>&lt;span class="s1"> { &amp;#34;match&amp;#34;: { &amp;#34;address&amp;#34;: &amp;#34;mill&amp;#34; } },
&lt;/span>&lt;span class="s1"> { &amp;#34;match&amp;#34;: { &amp;#34;address&amp;#34;: &amp;#34;lane&amp;#34; } }
&lt;/span>&lt;span class="s1"> ]
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="bool-must_not">bool must_not&lt;/h4>
&lt;p>返回&lt;code>address&lt;/code>包即不包含&lt;code>mill&lt;/code>，也不包含&lt;code>lane&lt;/code>的结果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;query&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;bool&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;must_not&amp;#34;: [
&lt;/span>&lt;span class="s1"> { &amp;#34;match&amp;#34;: { &amp;#34;address&amp;#34;: &amp;#34;mill&amp;#34; } },
&lt;/span>&lt;span class="s1"> { &amp;#34;match&amp;#34;: { &amp;#34;address&amp;#34;: &amp;#34;lane&amp;#34; } }
&lt;/span>&lt;span class="s1"> ]
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="组合">组合&lt;/h4>
&lt;p>bool的多个条件还可以相互组合&lt;/p>
&lt;p>返回&lt;code>age=40&lt;/code>并且&lt;code>state!=ID&lt;/code>的结果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;query&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;bool&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;must&amp;#34;: [
&lt;/span>&lt;span class="s1"> { &amp;#34;match&amp;#34;: { &amp;#34;age&amp;#34;: &amp;#34;40&amp;#34; } }
&lt;/span>&lt;span class="s1"> ],
&lt;/span>&lt;span class="s1"> &amp;#34;must_not&amp;#34;: [
&lt;/span>&lt;span class="s1"> { &amp;#34;match&amp;#34;: { &amp;#34;state&amp;#34;: &amp;#34;ID&amp;#34; } }
&lt;/span>&lt;span class="s1"> ]
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="过滤filter">过滤(Filter)&lt;/h3>
&lt;p>过滤出&lt;code>20000&amp;lt;balance&amp;lt;30000&lt;/code>的结果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;query&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;bool&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;must&amp;#34;: { &amp;#34;match_all&amp;#34;: {} },
&lt;/span>&lt;span class="s1"> &amp;#34;filter&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;range&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;balance&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;gte&amp;#34;: 20000,
&lt;/span>&lt;span class="s1"> &amp;#34;lte&amp;#34;: 30000
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="聚合aggregations">聚合(Aggregations)&lt;/h3>
&lt;p>设置&lt;code>size=0&lt;/code>是因为我们只关心聚合后的结果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;size&amp;#34;: 0,
&lt;/span>&lt;span class="s1"> &amp;#34;aggs&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;group_by_state&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;terms&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;field&amp;#34;: &amp;#34;state.keyword&amp;#34;
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的语句等价于&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">state&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COUNT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bank&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">GROUP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">state&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COUNT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DESC&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>聚合嵌套&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl -XGET &lt;span class="s1">&amp;#39;localhost:9200/bank/_search?pretty&amp;#39;&lt;/span> -H &lt;span class="s1">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> -d&lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1">{
&lt;/span>&lt;span class="s1"> &amp;#34;size&amp;#34;: 0,
&lt;/span>&lt;span class="s1"> &amp;#34;aggs&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;group_by_state&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;terms&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;field&amp;#34;: &amp;#34;state.keyword&amp;#34;
&lt;/span>&lt;span class="s1"> },
&lt;/span>&lt;span class="s1"> &amp;#34;aggs&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;average_balance&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;avg&amp;#34;: {
&lt;/span>&lt;span class="s1"> &amp;#34;field&amp;#34;: &amp;#34;balance&amp;#34;
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1"> }
&lt;/span>&lt;span class="s1">}
&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="eleasticsearch安装及配置httpswwwelasticcoguideenelasticsearchreferencecurrentsetuphtml">&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup.html">Eleasticsearch安装及配置&lt;/a>&lt;/h2>
&lt;p>&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup.html">官方文档&lt;/a>详细介绍了各种安装Elasticsearch的方法，以及如何配置Elasticsearch。另外，
还介绍了将Elasticsearch迁移到生产环境时，需要关注的配置项等。&lt;/p>
&lt;h2 id="docker-composeyml">docker-compose.yml&lt;/h2>
&lt;p>使用&lt;code>docker compose&lt;/code>, 可以很方便的在本机创建一个关于elastic stack小集群， 对于开发和测试非常方便。
使用下面的&lt;code>docker-compose.yml&lt;/code>文件，通过&lt;code>docker compose&lt;/code>命令，可以在本地直接运行&lt;code>elasticsearch&lt;/code>和&lt;code>kibana&lt;/code>服务，&lt;code>kibana&lt;/code>里开发工具的&lt;code>Console&lt;/code>可以很方便的和&lt;code>elasticsearch&lt;/code>交互。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">elasticsearch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker.elastic.co/elasticsearch/elasticsearch-oss:6.2.3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">elasticsearch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;9200:9200&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;9300:9300&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">cluster.name=docker-cluster&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">bootstrap.memory_lock=true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">http.host=0.0.0.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">transport.host=127.0.0.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;ES_JAVA_OPTS=-Xms512m -Xmx512m&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ulimits&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">memlock&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">soft&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">hard&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">es_data:/usr/share/elasticsearch/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">networks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">esnet&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kibana&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker.elastic.co/kibana/kibana-oss:6.2.3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kibana&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">SERVER_NAME&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kibana-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ELASTICSEARCH_URL&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://elasticsearch:9200&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">networks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">esnet&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">elasticsearch&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;5601:5601&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">es_data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">driver&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">local&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">networks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">esnet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>关于集成更多elastic stack服务，可以参考:
&lt;a href="https://github.com/elastic/stack-docker/blob/master/docker-compose.yml">https://github.com/elastic/stack-docker/blob/master/docker-compose.yml&lt;/a>&lt;/p>
&lt;p>kibana Console运行效果如下：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/crazygit/static@main/img/2018-04-12-kibana-devtool.png" alt="kibana console">&lt;/p></description></item><item><title>工银亚洲开户攻略</title><link>https://crazygit.wiseturtles.com/2018/03/09/icbcasia/</link><pubDate>Fri, 09 Mar 2018 22:21:02 +0800</pubDate><guid>https://crazygit.wiseturtles.com/2018/03/09/icbcasia/</guid><description>&lt;h2 id="开户必读">开户必读&lt;/h2>
&lt;p>申请之前，建议阅读&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.icbc.com.cn/ICBC/%E4%B8%AA%E4%BA%BA%E9%87%91%E8%9E%8D/%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1/%E8%B7%A8%E5%A2%83%E9%87%91%E8%9E%8D/%E5%A2%83%E5%A4%96%E9%87%91%E8%9E%8D%E6%9C%8D%E5%8A%A1/%E5%B7%A5%E9%93%B6%E4%BA%9A%E6%B4%B2/">见证开立工银亚洲账户常见问题&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.icbcasia.com/ICBC/%E6%B5%B7%E5%A4%96%E5%88%86%E8%A1%8C/%E5%B7%A5%E9%93%B6%E4%BA%9A%E6%B4%B2/CN/%E4%B8%AA%E4%BA%BA%E9%87%91%E8%9E%8D/%E4%BA%BA%E6%B0%91%E5%B8%81%E5%8F%8A%E8%B7%A8%E5%A2%83%E7%90%86%E8%B4%A2/%E5%86%85%E5%9C%B0%E5%AE%A2%E6%88%B7%E6%9C%8D%E5%8A%A1%E4%B8%93%E5%8C%BA/retailfaq.htm">开立工银亚洲账户常见问题&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>工银亚洲账户分综合账户和理财账户的两种，它们之间的区别，以及支持的币种，费用等问题，里面都有答案了。&lt;/p>
&lt;h2 id="准备工作">准备工作&lt;/h2>
&lt;p>下面内容摘录自上面的文件&lt;/p>
&lt;h3 id="国内开户">国内开户&lt;/h3>
&lt;p>您无须前往香港，即可通过指定的境内工行网点，见证签署相关文件，代理开立工银亚洲的「理财金账户」或「综合账户」。在所有资料齐全有效的情况下，最快将于一周内完成代理开户手续。&lt;/p>
&lt;p>适用对象：年满18周岁的境内居民&lt;/p>
&lt;p>办理开户见证所需文件:&lt;/p>
&lt;ol>
&lt;li>境内居民本人有效身份证件&lt;/li>
&lt;li>港澳通行证或护照（有效签注三个月以上）&lt;/li>
&lt;li>住址证明：最近三个月内由政府机构或公共事务机构发出的列有客户姓名及地址资料的账单或者信函。如有效身份证上地址可显示客户当前的居住地址，则居住住址证明文件可不用提供。&lt;/li>
&lt;/ol>
&lt;p>另外，在前往境内工行网点办理正式见证手续之前，您可以预先登录工银亚洲门户网站，通过网上在线填单预先填写申请表格。&lt;/p>
&lt;p>网上在线开户请点击：&lt;a href="https://myebankasia.icbc.com.cn/icbc/abroadperbank/apply/MHApplyForward.jsp?areaCode=0110&amp;amp;dse_locale=zh-CN">在线申请及查询&lt;/a>&lt;/p>
&lt;p>有关工银亚洲开户见证服务详情及常见问题请进入&lt;strong>工行网站首页 &amp;gt; 个人业务 &amp;gt; 个人金融 &amp;gt; 个人服务 &amp;gt; 跨境金融 &amp;gt; 代理开户见证业务 &amp;gt; 工银亚洲（香港）开户见证服务&lt;/strong>，即可查询。&lt;/p>
&lt;p>境内代理工银亚洲开户见证服务网点名单: &lt;a href="http://www.icbc.com.cn/SiteCollectionDocuments/ICBC/Resources/ICBC/grjr/download/2014/khjzslwd20140520.xls?bcsi_scan_DDA438331875F113=0&amp;amp;bcsi_scan_filename=khjzslwd20140520.xls">工银亚洲开户见证业务受理网点&lt;/a>。&lt;/p>
&lt;h3 id="香港柜面开户">香港柜面开户&lt;/h3>
&lt;p>您也可以选择亲临工银亚洲位于香港的分行柜面办理开户手续。开户所需文件同开户见证服务。&lt;/p>
&lt;p>工银亚洲网点地址查询：请登录工银亚洲网站&lt;a href="http://www.icbcasia.com">http://www.icbcasia.com&lt;/a>, 在网页最底部“联系我们”，点击“分行网络”，即可查询到工银亚洲的所有网点信息。&lt;/p>
&lt;h2 id="我的申请过程">我的申请过程&lt;/h2>
&lt;h3 id="开户网点选择">开户网点选择&lt;/h3>
&lt;p>首先需要说明的是: 并不是所有的工商银行网点都可以办理工银亚洲开户业务。可以下载表格&lt;a href="http://www.icbc.com.cn/SiteCollectionDocuments/ICBC/Resources/ICBC/grjr/download/2014/khjzslwd20140520.xls?bcsi_scan_DDA438331875F113=0&amp;amp;bcsi_scan_filename=khjzslwd20140520.xls">工银亚洲开户见证业务受理网点&lt;/a>,
从中选择一个自己比较方便去的网点办理。&lt;/p>
&lt;h3 id="线上申请">线上申请&lt;/h3>
&lt;p>首先&lt;a href="https://myebankasia.icbc.com.cn/icbc/abroadperbank/apply/MHApplyForward.jsp?areaCode=0110&amp;amp;dse_locale=zh-CN">在线申请&lt;/a>, 提交表格后。便可以去开户网点进行办理。&lt;/p>
&lt;p>&lt;strong>PS&lt;/strong>: 我线上申请后，到了开户网点发现在线申请的表格根本不能用，必须按照网点提供的模板来填写。所以如果可以的话，最好去开户网点先问一下。&lt;/p>
&lt;h3 id="网点办理">网点办理&lt;/h3>
&lt;p>准备好如下证件:&lt;/p>
&lt;ul>
&lt;li>境内居民本人有效身份证件&lt;/li>
&lt;li>港澳通行证或护照（有效签注三个月以上）&lt;/li>
&lt;li>住址证明：最近三个月内由政府机构或公共事务机构发出的列有客户姓名及地址资料的账单或者信函。如有效身份证上地址可显示客户当前的居住地址，则居住住址证明文件可不用提供。(&lt;strong>注意&lt;/strong>: 后面审核通过后，工行亚洲银行卡的银行卡就会邮寄到这个地址，所以最好确保填写的地址可以收到信件)&lt;/li>
&lt;/ul>
&lt;p>去网点填写申请表后，会拿到一个密码器和三个密码函，密码函里分别是网上银行，电话理财，借记卡的初始密码。&lt;/p>
&lt;h3 id="等待资料审核">等待资料审核&lt;/h3>
&lt;p>审核的过程还是比较严格的，我的申请表格被打回来一次，原因就是因为填写的住址地址和身份证上写的有一点小区别。导致我又重新去网点重新提交了一次申请表。&lt;/p>
&lt;h3 id="电话确认">电话确认&lt;/h3>
&lt;p>提交申请表，大概过了一周的样子，就收到工行打来的电话确认，会问一些开户时提交的资料问题: 如证件号，手机号，地址等。电话确认过后，又是等待资料审核。&lt;/p>
&lt;h3 id="密码器激活">密码器激活&lt;/h3>
&lt;p>电话确认过后，又过了一周多的时间。手机收到了工银亚洲提示开户成功的短信，并有一个激活码, 这激活码是用于激活之前领到的密码器的。&lt;/p>
&lt;h3 id="账户激活">账户激活&lt;/h3>
&lt;p>需要从国内同名的工行卡汇款至工银亚洲账户，才能激活账号。激活主要分两步骤：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>购汇&lt;/p>
&lt;p>使用工商银行APP，搜索“结售汇”功能。可以根据当前的汇率，选择购买美元或港币。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>境外汇款&lt;/p>
&lt;p>通过境外转账业务，将购买的美元或港币，转至工银亚洲账户。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>激活步骤完成。&lt;/p>
&lt;h3 id="借记卡激活">借记卡激活&lt;/h3>
&lt;p>借记卡是在收到短信激活码后才寄出的，查询借记卡寄送进度:&lt;/p>
&lt;p>可拨打95588 转7-7-2-1查询借记卡寄件编号，再按以下任一种方式查询:&lt;/p>
&lt;ol>
&lt;li>中国邮政邮件查询网址：&lt;a href="http://yjcx.chinapost.com.cn/">http://yjcx.chinapost.com.cn/&lt;/a>&lt;/li>
&lt;li>中国邮政查询电话：11185 按8 选2 进入人工查询&lt;/li>
&lt;li>短信查询：编辑短信内容“YTCX+约投挂号信函邮件号码（含字母‘NE’）”发送到11185，11185会以短信的形式告知客户当前的邮寄状态。&lt;/li>
&lt;/ol>
&lt;p>收到借记卡后，根据在网点拿到的密码函里的初始密码，在境内工行ATM机办理一笔查询/取款交易即可启用卡片。&lt;/p>
&lt;p>最后，祝大家顺利办到工银亚洲卡。&lt;/p></description></item></channel></rss>